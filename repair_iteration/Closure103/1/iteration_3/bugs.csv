bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);	          NodeUtil.removeChild(parent,    fromNode);    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(fromNode);    	compilable	  [FE]  RuntimeException  	191	7	replace
2	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);	          NodeUtil.removeChild(parent,    fromNode);    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(fromNode);    	compilable	  [FE]  RuntimeException  	191	7	replace
3	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(parent);	          NodeUtil.removeChild(parent,    fromNode);    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(fromNode);    	compilable	  [FE]  RuntimeException  	191	7	replace
4	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(parent);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(parent);	          NodeUtil.removeChild(parent,    fromNode);    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(fromNode);    	compilable	  [FE]  RuntimeException  	191	7	replace
5	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);	          NodeUtil.removeChild(parent,    fromNode);    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(fromNode);    	compilable	  [FE]  RuntimeException  	191	7	replace
6	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);	          NodeUtil.removeChild(parent,    fromNode);    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(fromNode);    	compilable	  [FE]  RuntimeException  	191	7	replace
7	[BUG]  [BUGGY]  Traverse.traverse(compiler,  node,  this);  [CE]  cannot  find  symbol  Traverse  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Traverse.traverse(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Traverse.traverse(compiler,  node,  this);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    fromNode,    this);    	non-compiled	[CE]  cannot  find  symbol  Traverse	180	None	replace
8	[BUG]  [BUGGY]  Traverse.traverse(compiler,  parent,  this);  [CE]  cannot  find  symbol  Traverse  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Traverse.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Traverse.traverse(compiler,  parent,  this);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    fromNode,    this);    	non-compiled	[CE]  cannot  find  symbol  Traverse	180	None	replace
9	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(fromNode,  node);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(fromNode,    parent);    	compilable	  [FE]  RuntimeException  	59	7	replace
10	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(fromNode,  node);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(fromNode,  node);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(fromNode,    parent);    	compilable	  [FE]  RuntimeException  	59	7	replace
11	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(fromNode,  FINALLY);  [CE]  cannot  find  symbol  FINALLY  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(fromNode,  FINALLY);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(fromNode,  FINALLY);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(fromNode,    parent);    	non-compiled	[CE]  cannot  find  symbol  FINALLY	59	None	replace
12	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(fromNode,  parent);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(fromNode,    parent);    	compilable	  [FE]  RuntimeException  	59	7	replace
13	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(fromNode,  parent);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(fromNode,  parent);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(fromNode,    parent);    	compilable	  [FE]  RuntimeException  	59	7	replace
14	[BUG]  [BUGGY]  Node  parent  =  parent.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  parent.getFirstChild();	          Node    nextSibling    =    parent.getFirstChild();    Node    parent    =    parent.getFirstChild();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	123	None	replace
15	[BUG]  [BUGGY]  Node  nextSibling  =  node.getFirstChild();  Node  parent  =  parent.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getFirstChild();  Node  parent  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  node.getFirstChild();  Node  parent  =  parent.getFirstChild();	          Node    nextSibling    =    parent.getFirstChild();    Node    parent    =    parent.getFirstChild();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	123	None	replace
16	[BUG]  [BUGGY]  Node  nextSibling  =  fromNode.getFirstChild();  Node  parent  =  parent.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  fromNode.getFirstChild();  Node  parent  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  fromNode.getFirstChild();  Node  parent  =  parent.getFirstChild();	          Node    nextSibling    =    parent.getFirstChild();    Node    parent    =    parent.getFirstChild();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	123	None	replace
17	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  curHandler);  [CE]  cannot  find  symbol  curHandler  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  curHandler);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  node,  curHandler);	  return    computeFollowNode(fromNode,    parent,    node,    body);    	non-compiled	[CE]  cannot  find  symbol  curHandler	278	None	replace
18	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  finallyNode);  [CE]  cannot  find  symbol  finallyNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  finallyNode);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  node,  finallyNode);	  return    computeFollowNode(fromNode,    parent,    node,    body);    	non-compiled	[CE]  cannot  find  symbol  finallyNode	278	None	replace
19	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  cr);  [CE]  cannot  find  symbol  cr  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  cr);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  node,  cr);	  return    computeFollowNode(fromNode,    parent,    node,    body);    	non-compiled	[CE]  cannot  find  symbol  cr	278	None	replace
20	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getLastChild());  Node  body  =  node.getFirstChild();  [CE]  unreachable  statement  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getLastChild());  Node  body  =  node.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode.getLastChild());  Node  body  =  node.getFirstChild();	  return    computeFallThrough(node.getLastChild());    Node    body    =    node.getFirstChild();    	non-compiled	[CE]  unreachable  statement	255	None	replace
21	[BUG]  [BUGGY]  Node  parent  =  node.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  node.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  node.getFirstChild();	  return    computeFallThrough(node.getLastChild());    Node    node    =    parent.getFirstChild();    if(node!=    null)    {    return    computeFallThrough(node.getLastChild());    }    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	118	None	replace
22	[BUG]  [BUGGY]  Node  parent  =  node.getLastChild();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  node.getLastChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  node.getLastChild();	  return    computeFallThrough(node.getLastChild());    Node    node    =    parent.getFirstChild();    if(node!=    null)    {    return    computeFallThrough(node.getLastChild());    }    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	118	None	replace
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  node  =  parent.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	node  =  parent.getFirstChild();	  return    computeFallThrough(node.getLastChild());    Node    node    =    parent.getFirstChild();    if(node!=    null)    {    return    computeFallThrough(node.getLastChild());    }    	compilable	  [FE]  AssertionFailedError  	118	5	replace
24	[BUG]  [BUGGY]  node  =  parent.getFirstChild();  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  node  =  parent.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	node  =  parent.getFirstChild();	  return    computeFallThrough(node.getLastChild());    Node    node    =    parent.getFirstChild();    if(node!=    null)    {    return    computeFallThrough(node.getLastChild());    }    	compilable	  [FE]  AssertionFailedError  	118	5	replace
25	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getFirstChild(),  parent);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getFirstChild(),  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode.getFirstChild(),  parent);	  return    computeFallThrough(parent.getFirstChild(),    node);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	212	None	replace
26	[BUG]  [BUGGY]  return  computeFallThrough(parent.getFirstChild(),  fromNode,  node);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(parent.getFirstChild(),  fromNode,  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(parent.getFirstChild(),  fromNode,  node);	  return    computeFallThrough(parent.getFirstChild(),    node);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	212	None	replace
27	[BUG]  [BUGGY]  return  computeFallThrough(node.getFirstChild(),  parent);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(node.getFirstChild(),  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(node.getFirstChild(),  parent);	  return    computeFallThrough(parent.getFirstChild(),    node);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	212	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getLastChild();  Node  firstSibling  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  parent.getLastChild();  Node  firstSibling  =  parent.getFirstChild();	          Node    nextSibling    =    parent.getFirstChild();    Node    firstSibling    =    parent.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	269	5	replace
29	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getLastChild();  Node  firstSibling  =  parent.getFirstChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getLastChild();  Node  firstSibling  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getLastChild();  Node  firstSibling  =  parent.getFirstChild();	          Node    nextSibling    =    parent.getFirstChild();    Node    firstSibling    =    parent.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	269	5	replace
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getFirstChild();  Node  firstSibling  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  node.getFirstChild();  Node  firstSibling  =  parent.getFirstChild();	          Node    nextSibling    =    parent.getFirstChild();    Node    firstSibling    =    parent.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	269	5	replace
31	[BUG]  [BUGGY]  Node  nextSibling  =  node.getFirstChild();  Node  firstSibling  =  parent.getFirstChild();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getFirstChild();  Node  firstSibling  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  node.getFirstChild();  Node  firstSibling  =  parent.getFirstChild();	          Node    nextSibling    =    parent.getFirstChild();    Node    firstSibling    =    parent.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	269	5	replace
32	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Node  firstSibling  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  parent.getFirstChild();  Node  firstSibling  =  parent.getLastChild();	          Node    nextSibling    =    parent.getFirstChild();    Node    firstSibling    =    parent.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	269	5	replace
33	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Node  firstSibling  =  parent.getLastChild();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Node  firstSibling  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getFirstChild();  Node  firstSibling  =  parent.getLastChild();	          Node    nextSibling    =    parent.getFirstChild();    Node    firstSibling    =    parent.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	269	5	replace
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getLastChild();  Node  firstSibling  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  node.getLastChild();  Node  firstSibling  =  parent.getFirstChild();	          Node    nextSibling    =    parent.getFirstChild();    Node    firstSibling    =    parent.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	269	5	replace
35	[BUG]  [BUGGY]  Node  nextSibling  =  node.getLastChild();  Node  firstSibling  =  parent.getFirstChild();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getLastChild();  Node  firstSibling  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  node.getLastChild();  Node  firstSibling  =  parent.getFirstChild();	          Node    nextSibling    =    parent.getFirstChild();    Node    firstSibling    =    parent.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	269	5	replace
36	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  body);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  body  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  body);	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    body    =    parent.getFirstChild();    return    computeFollowNode(fromNode,    body);    	compilable	  [FE]  StackOverflowError  	264	7	replace
37	[BUG]  [BUGGY]  Node  body  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  body);  [FE]  StackOverflowError  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  body);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  body);	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    body    =    parent.getFirstChild();    return    computeFollowNode(fromNode,    body);    	compilable	  [FE]  StackOverflowError  	264	7	replace
38	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getLastChild();  return  computeFollowNode(fromNode,  body);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  body  =  parent.getLastChild();  return  computeFollowNode(fromNode,  body);	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    body    =    parent.getFirstChild();    return    computeFollowNode(fromNode,    body);    	compilable	  [FE]  AssertionFailedError  	264	3	replace
39	[BUG]  [BUGGY]  Node  body  =  parent.getLastChild();  return  computeFollowNode(fromNode,  body);  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getLastChild();  return  computeFollowNode(fromNode,  body);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  parent.getLastChild();  return  computeFollowNode(fromNode,  body);	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    body    =    parent.getFirstChild();    return    computeFollowNode(fromNode,    body);    	compilable	  [FE]  AssertionFailedError  	264	3	replace
40	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getFirstChild();  return  computeFallThrough(body);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  body  =  parent.getFirstChild();  return  computeFallThrough(body);	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    body    =    parent.getFirstChild();    return    computeFollowNode(fromNode,    body);    	compilable	  [FE]  AssertionFailedError  	264	6	replace
41	[BUG]  [BUGGY]  Node  body  =  parent.getFirstChild();  return  computeFallThrough(body);  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getFirstChild();  return  computeFallThrough(body);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  parent.getFirstChild();  return  computeFallThrough(body);	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    body    =    parent.getFirstChild();    return    computeFollowNode(fromNode,    body);    	compilable	  [FE]  AssertionFailedError  	264	6	replace
42	[BUG]  [BUGGY]  Node  body  =  parent.getFirstChild();  return  computeFallThrough(body,  fromNode);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getFirstChild();  return  computeFallThrough(body,  fromNode);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  parent.getFirstChild();  return  computeFallThrough(body,  fromNode);	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    body    =    parent.getFirstChild();    return    computeFollowNode(fromNode,    body);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	264	None	replace
43	[BUG]  [BUGGY]  nodeTraversal.traverse(compiler,  node,  this);  [CE]  cannot  find  symbol  nodeTraversal  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  nodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	nodeTraversal.traverse(compiler,  node,  this);	          NodeTraversal.traverse(compiler,    node,    this);    nodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	181	None	replace
44	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node,  this);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node,  this);	  NodeUtil.removeChild(parent,    node,    FINALLY);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	92	None	replace
45	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  parent,  FINALLY);  [CE]  cannot  find  symbol  FINALLY  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  parent,  FINALLY);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  parent,  FINALLY);	  NodeUtil.removeChild(parent,    node,    FINALLY);    	non-compiled	[CE]  cannot  find  symbol  FINALLY	92	None	replace
46	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node,  curHandler);  [CE]  cannot  find  symbol  curHandler  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node,  curHandler);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node,  curHandler);	  NodeUtil.removeChild(parent,    node,    FINALLY);    	non-compiled	[CE]  cannot  find  symbol  curHandler	92	None	replace
47	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node,  value);  [CE]  cannot  find  symbol  value  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node,  value);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node,  value);	  NodeUtil.removeChild(parent,    node,    FINALLY);    	non-compiled	[CE]  cannot  find  symbol  value	92	None	replace
48	[BUG]  [BUGGY]  return  computeFallThrough(parent.getFirstChild());  Node  parent  =  node.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(parent.getFirstChild());  Node  parent  =  node.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(parent.getFirstChild());    Node  parent  =  node.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	44	None	add
49	[BUG]  [BUGGY]  return  computeFallThrough(parent.getFirstChild());  return  computeFallThrough(parent.getFirstChild());  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(parent.getFirstChild());  return  computeFallThrough(parent.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(parent.getFirstChild());    return  computeFallThrough(parent.getFirstChild());	  	non-compiled	[CE]  unreachable  statement	44	None	add
50	[BUG]  [BUGGY]  return  computeFallThrough(parent.getFirstChild());  return  computeFallThrough(parent.getLastChild());  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(parent.getFirstChild());  return  computeFallThrough(parent.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(parent.getFirstChild());    return  computeFallThrough(parent.getLastChild());	  	non-compiled	[CE]  unreachable  statement	44	None	add
51	[BUG]  [BUGGY]  return  computeFallThrough(parent.getFirstChild());  Node  parent  =  node.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(parent.getFirstChild());  Node  parent  =  node.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(parent.getFirstChild());    Node  parent  =  node.getFirstChild();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	44	None	add
52	[BUG]  [BUGGY]  return  computeFallThrough(parent.getFirstChild());  return  computeFollowNode(parent.getFirstChild());  [CE]  unreachable  statement  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(parent.getFirstChild());  return  computeFollowNode(parent.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(parent.getFirstChild());    return  computeFollowNode(parent.getFirstChild());	  	non-compiled	[CE]  unreachable  statement	44	None	add
53	[BUG]  [BUGGY]  return  computeFallThrough(parent.getFirstChild());  return  computeFollowNode(parent.getLastChild());  [CE]  unreachable  statement  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(parent.getFirstChild());  return  computeFollowNode(parent.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(parent.getFirstChild());    return  computeFollowNode(parent.getLastChild());	  	non-compiled	[CE]  unreachable  statement	44	None	add
54	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getLastChild();  Node  head  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  body  =  parent.getLastChild();  Node  head  =  parent.getFirstChild();	          Node    body    =    parent.getFirstChild();    Node    head    =    parent.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	18	5	replace
55	[BUG]  [BUGGY]  Node  body  =  parent.getLastChild();  Node  head  =  parent.getFirstChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getLastChild();  Node  head  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  parent.getLastChild();  Node  head  =  parent.getFirstChild();	          Node    body    =    parent.getFirstChild();    Node    head    =    parent.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	18	5	replace
56	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  node.getFirstChild();  Node  head  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  body  =  node.getFirstChild();  Node  head  =  parent.getFirstChild();	          Node    body    =    parent.getFirstChild();    Node    head    =    parent.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	18	5	replace
57	[BUG]  [BUGGY]  Node  body  =  node.getFirstChild();  Node  head  =  parent.getFirstChild();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  node.getFirstChild();  Node  head  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  node.getFirstChild();  Node  head  =  parent.getFirstChild();	          Node    body    =    parent.getFirstChild();    Node    head    =    parent.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	18	5	replace
58	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getFirstChild();  Node  head  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  body  =  parent.getFirstChild();  Node  head  =  parent.getLastChild();	          Node    body    =    parent.getFirstChild();    Node    head    =    parent.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	18	5	replace
59	[BUG]  [BUGGY]  Node  body  =  parent.getFirstChild();  Node  head  =  parent.getLastChild();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getFirstChild();  Node  head  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  parent.getFirstChild();  Node  head  =  parent.getLastChild();	          Node    body    =    parent.getFirstChild();    Node    head    =    parent.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	18	5	replace
60	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  node.getLastChild();  Node  head  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  body  =  node.getLastChild();  Node  head  =  parent.getFirstChild();	          Node    body    =    parent.getFirstChild();    Node    head    =    parent.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	18	5	replace
61	[BUG]  [BUGGY]  Node  body  =  node.getLastChild();  Node  head  =  parent.getFirstChild();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  node.getLastChild();  Node  head  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  node.getLastChild();  Node  head  =  parent.getFirstChild();	          Node    body    =    parent.getFirstChild();    Node    head    =    parent.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	18	5	replace
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()!=  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()!=  Token.NAME);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.NAME);    	compilable	  [FE]  AssertionFailedError  	273	6	replace
63	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()!=  Token.NAME);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()!=  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()!=  Token.NAME);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.NAME);    	compilable	  [FE]  AssertionFailedError  	273	6	replace
64	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  parent);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(parent,  parent);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	273	7	replace
65	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  parent);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  parent);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  parent);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	273	7	replace
66	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(parent,  node);  Preconditions.checkState(node.getType()  ==  Token.NAME);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	273	7	replace
67	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node);  Preconditions.checkState(node.getType()  ==  Token.NAME);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	273	7	replace
68	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  node.getFirstChild();  return  computeFollowNode(fromNode,  body);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  body  =  node.getFirstChild();  return  computeFollowNode(fromNode,  body);	  return    computeFollowNode(fromNode,    parent.getFirstChild());    Node    body    =    parent.getFirstChild();    return    computeFollowNode(fromNode,    body);    	compilable	  [FE]  StackOverflowError  	246	7	replace
69	[BUG]  [BUGGY]  Node  body  =  node.getFirstChild();  return  computeFollowNode(fromNode,  body);  [FE]  StackOverflowError  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  node.getFirstChild();  return  computeFollowNode(fromNode,  body);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  node.getFirstChild();  return  computeFollowNode(fromNode,  body);	  return    computeFollowNode(fromNode,    parent.getFirstChild());    Node    body    =    parent.getFirstChild();    return    computeFollowNode(fromNode,    body);    	compilable	  [FE]  StackOverflowError  	246	7	replace
70	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Node  lastJump  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  parent.getFirstChild();  Node  lastJump  =  parent.getLastChild();	          Node    nextSibling    =    parent.getFirstChild();    Node    lastJump    =    parent.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	267	5	replace
71	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Node  lastJump  =  parent.getLastChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Node  lastJump  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getFirstChild();  Node  lastJump  =  parent.getLastChild();	          Node    nextSibling    =    parent.getFirstChild();    Node    lastJump    =    parent.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	267	5	replace
72	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getLastChild();  Node  lastJump  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  parent.getLastChild();  Node  lastJump  =  parent.getFirstChild();	          Node    nextSibling    =    parent.getFirstChild();    Node    lastJump    =    parent.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	267	5	replace
73	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getLastChild();  Node  lastJump  =  parent.getFirstChild();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getLastChild();  Node  lastJump  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getLastChild();  Node  lastJump  =  parent.getFirstChild();	          Node    nextSibling    =    parent.getFirstChild();    Node    lastJump    =    parent.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	267	5	replace
74	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getFirstChild();  Node  lastJump  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  node.getFirstChild();  Node  lastJump  =  parent.getFirstChild();	          Node    nextSibling    =    parent.getFirstChild();    Node    lastJump    =    parent.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	267	5	replace
75	[BUG]  [BUGGY]  Node  nextSibling  =  node.getFirstChild();  Node  lastJump  =  parent.getFirstChild();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getFirstChild();  Node  lastJump  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  node.getFirstChild();  Node  lastJump  =  parent.getFirstChild();	          Node    nextSibling    =    parent.getFirstChild();    Node    lastJump    =    parent.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	267	5	replace
76	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getFirstChild();  Node  lastJump  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  node.getFirstChild();  Node  lastJump  =  parent.getLastChild();	          Node    nextSibling    =    parent.getFirstChild();    Node    lastJump    =    parent.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	267	5	replace
77	[BUG]  [BUGGY]  Node  nextSibling  =  node.getFirstChild();  Node  lastJump  =  parent.getLastChild();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getFirstChild();  Node  lastJump  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  node.getFirstChild();  Node  lastJump  =  parent.getLastChild();	          Node    nextSibling    =    parent.getFirstChild();    Node    lastJump    =    parent.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	267	5	replace
78	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(parent,  node);  parent.removeChild(node);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.removeChild(node);    	compilable	  [FE]  AssertionFailedError  	136	6	replace
79	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node);  parent.removeChild(node);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.removeChild(node);    	compilable	  [FE]  AssertionFailedError  	136	6	replace
80	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  ParentUtil.removeChild(parent,  node);  parent.removeChild(node);  [CE]  cannot  find  symbol  ParentUtil  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  ParentUtil.removeChild(parent,  node);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node);  ParentUtil.removeChild(parent,  node);  parent.removeChild(node);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.removeChild(node);    	non-compiled	[CE]  cannot  find  symbol  ParentUtil	136	None	replace
81	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.removeChild(parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(parent,  node);  parent.removeChild(parent);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.removeChild(node);    	compilable	  [FE]  RuntimeException  	136	7	replace
82	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.removeChild(parent);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.removeChild(parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node);  parent.removeChild(parent);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.removeChild(node);    	compilable	  [FE]  RuntimeException  	136	7	replace
83	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  return  computeFallThrough(nextSibling.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  parent.getFirstChild();  return  computeFallThrough(nextSibling.getLastChild());	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    nextSibling    =    parent.getFirstChild();    return    computeFallThrough(nextSibling.getLastChild());    	compilable	  [FE]  AssertionFailedError  	263	6	replace
84	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  return  computeFallThrough(nextSibling.getLastChild());  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  return  computeFallThrough(nextSibling.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getFirstChild();  return  computeFallThrough(nextSibling.getLastChild());	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    nextSibling    =    parent.getFirstChild();    return    computeFallThrough(nextSibling.getLastChild());    	compilable	  [FE]  AssertionFailedError  	263	6	replace
85	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getLastChild();  return  computeFallThrough(nextSibling.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  parent.getLastChild();  return  computeFallThrough(nextSibling.getLastChild());	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    nextSibling    =    parent.getFirstChild();    return    computeFallThrough(nextSibling.getLastChild());    	compilable	  [FE]  AssertionFailedError  	263	5	replace
86	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getLastChild();  return  computeFallThrough(nextSibling.getLastChild());  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getLastChild();  return  computeFallThrough(nextSibling.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getLastChild();  return  computeFallThrough(nextSibling.getLastChild());	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    nextSibling    =    parent.getFirstChild();    return    computeFallThrough(nextSibling.getLastChild());    	compilable	  [FE]  AssertionFailedError  	263	5	replace
87	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  nextSibling.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  nextSibling.getLastChild());	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    nextSibling    =    parent.getFirstChild();    return    computeFallThrough(nextSibling.getLastChild());    	compilable	  [FE]  StackOverflowError  	263	7	replace
88	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  nextSibling.getLastChild());  [FE]  StackOverflowError  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  nextSibling.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  nextSibling.getLastChild());	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    nextSibling    =    parent.getFirstChild();    return    computeFallThrough(nextSibling.getLastChild());    	compilable	  [FE]  StackOverflowError  	263	7	replace
89	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  node.getParent();	  Node    nextSibling    =    parent.getParent();    	compilable	  [FE]  AssertionFailedError  	49	5	replace
90	[BUG]  [BUGGY]  Node  nextSibling  =  node.getParent();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  node.getParent();	  Node    nextSibling    =    parent.getParent();    	compilable	  [FE]  AssertionFailedError  	49	5	replace
91	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);	  	compilable	  [FE]  StackOverflowError  	141	7	add
92	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);	  	compilable	  [FE]  StackOverflowError  	141	7	add
93	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);	  	compilable	  [FE]  StackOverflowError  	141	7	add
94	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);	  	compilable	  [FE]  StackOverflowError  	141	7	add
95	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  parent,  this);	  	compilable	  [FE]  StackOverflowError  	141	7	add
96	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  parent,  this);	  	compilable	  [FE]  StackOverflowError  	141	7	add
97	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  node,  this);	  	compilable	  [FE]  StackOverflowError  	141	7	add
98	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  node,  this);  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  node,  this);	  	compilable	  [FE]  StackOverflowError  	141	7	add
99	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);	  	compilable	  [FE]  StackOverflowError  	141	7	add
100	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);	  	compilable	  [FE]  StackOverflowError  	141	7	add
101	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]              StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  node,  this);	  	compilable	  [FE]  StackOverflowError  	141	7	add
102	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  node,  this);  [FE]  StackOverflowError  [FE]              StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  node,  this);	  	compilable	  [FE]  StackOverflowError  	141	7	add
103	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(node,    parent);    NodeUtil.removeChild(parent,  node);	  	compilable	  [FE]  RuntimeException  	170	7	add
104	[BUG]  [BUGGY]  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  node);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(node,    parent);    NodeUtil.removeChild(parent,  node);	  	compilable	  [FE]  RuntimeException  	170	7	add
105	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(node,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(node,    parent);    NodeUtil.removeChild(node,  parent);	  	compilable	  [FE]  RuntimeException  	170	7	add
106	[BUG]  [BUGGY]  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(node,  parent);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(node,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(node,    parent);    NodeUtil.removeChild(node,  parent);	  	compilable	  [FE]  RuntimeException  	170	7	add
107	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(node,    parent);    NodeUtil.removeChild(parent,  parent);	  	compilable	  [FE]  RuntimeException  	170	7	add
108	[BUG]  [BUGGY]  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  parent);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(node,    parent);    NodeUtil.removeChild(parent,  parent);	  	compilable	  [FE]  RuntimeException  	170	7	add
109	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(node,    parent);    NodeUtil.removeChild(fromNode,  parent);	  	compilable	  [FE]  RuntimeException  	170	7	add
110	[BUG]  [BUGGY]  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(fromNode,  parent);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(node,    parent);    NodeUtil.removeChild(fromNode,  parent);	  	compilable	  [FE]  RuntimeException  	170	7	add
111	[BUG]  [BUGGY]  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  child);  [CE]  cannot  find  symbol  child  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  child);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(node,    parent);    NodeUtil.removeChild(parent,  child);	  	non-compiled	[CE]  cannot  find  symbol  child	170	None	add
112	[BUG]  [BUGGY]  Node  parent  =  getNextSibling(node);  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getNextSibling(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getNextSibling(node);	  Node    parent    =    getNextSibling();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	129	None	replace
113	[BUG]  [BUGGY]  Node  parent  =  getNextSibling(parent);  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getNextSibling(parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getNextSibling(parent);	  Node    parent    =    getNextSibling();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	129	None	replace
114	[BUG]  [BUGGY]  Node  parent  =  node.getNextSibling();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  node.getNextSibling();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  node.getNextSibling();	  Node    parent    =    getNextSibling();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	129	None	replace
115	[BUG]  [BUGGY]  Node  parent  =  getNextSibling().getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getNextSibling().getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getNextSibling().getParent();	  Node    parent    =    getNextSibling();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	129	None	replace
116	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  body  =  node.getNext();	  Node    body    =    parent.getNext();    	compilable	  [FE]  AssertionFailedError  	214	5	replace
117	[BUG]  [BUGGY]  Node  body  =  node.getNext();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  node.getNext();	  Node    body    =    parent.getNext();    	compilable	  [FE]  AssertionFailedError  	214	5	replace
118	[BUG]  [BUGGY]  Node  body  =  fromNode.getLastChild();  Node  body  =  fromNode.getLastChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  fromNode.getLastChild();  Node  body  =  fromNode.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    fromNode.getLastChild();    Node  body  =  fromNode.getLastChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	99	None	add
119	[BUG]  [BUGGY]  Node  body  =  fromNode.getLastChild();  Node  fromNode  =  fromNode.getLastChild();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  fromNode.getLastChild();  Node  fromNode  =  fromNode.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    fromNode.getLastChild();    Node  fromNode  =  fromNode.getLastChild();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	99	None	add
120	[BUG]  [BUGGY]  Node  body  =  fromNode.getLastChild();  Node  body  =  toNode.getLastChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  fromNode.getLastChild();  Node  body  =  toNode.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    fromNode.getLastChild();    Node  body  =  toNode.getLastChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	99	None	add
121	[BUG]  [BUGGY]  Node  body  =  fromNode.getLastChild();  Node  body  =  fromNode.getFirstChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  fromNode.getLastChild();  Node  body  =  fromNode.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    fromNode.getLastChild();    Node  body  =  fromNode.getFirstChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	99	None	add
122	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  priorityCounter,  nodePriorities);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,int,Map<DiGraphNode<Node,Branch>,Integer>)  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  priorityCounter,  nodePriorities);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  priorityCounter,  nodePriorities);	  return    computeFollowNode(fromNode,    parent,    nodePriorities,    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,int,Map<DiGraphNode<Node,Branch>,Integer>)	30	None	replace
123	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  priorities,  astPositionCounter);  [CE]  cannot  find  symbol  priorities  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  priorities,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  priorities,  astPositionCounter);	  return    computeFollowNode(fromNode,    parent,    nodePriorities,    astPositionCounter);    	non-compiled	[CE]  cannot  find  symbol  priorities	30	None	replace
124	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  priorities,  nodePriorities,  astPositionCounter);  [CE]  cannot  find  symbol  priorities  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  priorities,  nodePriorities,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  priorities,  nodePriorities,  astPositionCounter);	  return    computeFollowNode(fromNode,    parent,    nodePriorities,    astPositionCounter);    	non-compiled	[CE]  cannot  find  symbol  priorities	30	None	replace
125	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  nodePriorities,  parent,  astPositionCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Map<DiGraphNode<Node,Branch>,Integer>,Node,int)  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  nodePriorities,  parent,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  nodePriorities,  parent,  astPositionCounter);	  return    computeFollowNode(fromNode,    parent,    nodePriorities,    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Map<DiGraphNode<Node,Branch>,Integer>,Node,int)	30	None	replace
126	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  astPositionCounter,  nodePriorities);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,int,Map<DiGraphNode<Node,Branch>,Integer>)  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  astPositionCounter,  nodePriorities);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  astPositionCounter,  nodePriorities);	  return    computeFollowNode(fromNode,    parent,    nodePriorities,    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,int,Map<DiGraphNode<Node,Branch>,Integer>)	30	None	replace
127	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  node.getParent());  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  node.getParent());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent.getFirstChild(),  node.getParent());	  return    computeFollowNode(fromNode,    parent.getFirstChild());    Node    parent    =    node.getParent();    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)	50	None	replace
128	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild());  Node  parent  =  node.getNext();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild());  Node  parent  =  node.getNext();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent.getFirstChild());  Node  parent  =  node.getNext();	  return    computeFollowNode(fromNode,    parent.getFirstChild());    Node    parent    =    node.getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	50	None	replace
129	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  node.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  body  =  node.getParent();	  Node    body    =    parent.getParent();    	compilable	  [FE]  AssertionFailedError  	252	5	replace
130	[BUG]  [BUGGY]  Node  body  =  node.getParent();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  node.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  node.getParent();	  Node    body    =    parent.getParent();    	compilable	  [FE]  AssertionFailedError  	252	5	replace
131	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  node,  firstChild);  [CE]  cannot  find  symbol  firstChild  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  node,  firstChild);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  node,  firstChild);	  return    computeFallThrough(fromNode,    node);    	non-compiled	[CE]  cannot  find  symbol  firstChild	80	None	replace
132	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  parent,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,ControlFlowAnalysis)  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  fromNode,  parent,  this);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    parent,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,ControlFlowAnalysis)	145	None	replace
133	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  finallyMap,  nodePriorities);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Multimap<Node,Node>,Map<DiGraphNode<Node,Branch>,Integer>)  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  finallyMap,  nodePriorities);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  finallyMap,  nodePriorities);	  return    computeFollowNode(fromNode,    parent,    nodePriorities,    finallyMap);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Multimap<Node,Node>,Map<DiGraphNode<Node,Branch>,Integer>)	174	None	replace
134	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  finallyMap,  astPositionCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Map<DiGraphNode<Node,Branch>,Integer>,Multimap<Node,Node>,int)  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  finallyMap,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  nodePriorities,  finallyMap,  astPositionCounter);	  return    computeFollowNode(fromNode,    parent,    nodePriorities,    finallyMap);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Map<DiGraphNode<Node,Branch>,Integer>,Multimap<Node,Node>,int)	174	None	replace
135	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  finallyMap,  firstChild);  [CE]  cannot  find  symbol  firstChild  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  finallyMap,  firstChild);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  nodePriorities,  finallyMap,  firstChild);	  return    computeFollowNode(fromNode,    parent,    nodePriorities,    finallyMap);    	non-compiled	[CE]  cannot  find  symbol  firstChild	174	None	replace
136	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  finallyMap,  cfg);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Map<DiGraphNode<Node,Branch>,Integer>,Multimap<Node,Node>,ControlFlowGraph<Node>)  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  finallyMap,  cfg);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  nodePriorities,  finallyMap,  cfg);	  return    computeFollowNode(fromNode,    parent,    nodePriorities,    finallyMap);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Map<DiGraphNode<Node,Branch>,Integer>,Multimap<Node,Node>,ControlFlowGraph<Node>)	174	None	replace
137	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  finallyMap,  compiler);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Map<DiGraphNode<Node,Branch>,Integer>,Multimap<Node,Node>,AbstractCompiler)  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  finallyMap,  compiler);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  nodePriorities,  finallyMap,  compiler);	  return    computeFollowNode(fromNode,    parent,    nodePriorities,    finallyMap);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Map<DiGraphNode<Node,Branch>,Integer>,Multimap<Node,Node>,AbstractCompiler)	174	None	replace
138	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(parent.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	return  computeFollowNode(parent.getFirstChild());	  return    computeFallThrough(parent.getFirstChild());    	compilable	  [FE]  StackOverflowError  	45	7	replace
139	[BUG]  [BUGGY]  return  computeFollowNode(parent.getFirstChild());  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(parent.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(parent.getFirstChild());	  return    computeFallThrough(parent.getFirstChild());    	compilable	  [FE]  StackOverflowError  	45	7	replace
140	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getLastChild();  Node  nextSibling  =  parent.getLastChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getLastChild();  Node  nextSibling  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    parent.getLastChild();    Node  nextSibling  =  parent.getLastChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	1	None	add
141	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getLastChild();  Node  nextSibling  =  parent.getFirstChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getLastChild();  Node  nextSibling  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    parent.getLastChild();    Node  nextSibling  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	1	None	add
142	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getLastChild();  Node  parent  =  parent.getLastChild();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getLastChild();  Node  parent  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    parent.getLastChild();    Node  parent  =  parent.getLastChild();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	1	None	add
143	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getLastChild();  Node  parent  =  nextSibling.getLastChild();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getLastChild();  Node  parent  =  nextSibling.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    parent.getLastChild();    Node  parent  =  nextSibling.getLastChild();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	1	None	add
144	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getLastChild();  Node  nextSibling  =  child.getLastChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getLastChild();  Node  nextSibling  =  child.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    parent.getLastChild();    Node  nextSibling  =  child.getLastChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	1	None	add
145	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling    ==    null)    {    return    computeFallThrough(parent.getLastChild());    }    	compilable	  [FE]  RuntimeException  	227	7	replace
146	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling    ==    null)    {    return    computeFallThrough(parent.getLastChild());    }    	compilable	  [FE]  RuntimeException  	227	7	replace
147	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling    ==    null)    {    return    computeFallThrough(parent.getLastChild());    }    	compilable	  [FE]  RuntimeException  	227	7	replace
148	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling    ==    null)    {    return    computeFallThrough(parent.getLastChild());    }    	compilable	  [FE]  RuntimeException  	227	7	replace
149	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getParent();  Node  nextSibling  =  parent.getParent();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getParent();  Node  nextSibling  =  parent.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    parent.getParent();    Node  nextSibling  =  parent.getParent();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	48	None	add
150	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getParent();  Node  nextSibling  =  parent.getLastChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getParent();  Node  nextSibling  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    parent.getParent();    Node  nextSibling  =  parent.getLastChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	48	None	add
151	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getParent();  Node  nextSibling  =  parent.getNext();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getParent();  Node  nextSibling  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    parent.getParent();    Node  nextSibling  =  parent.getNext();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	48	None	add
152	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getParent();  Node  nextSibling  =  parent.getFirstChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getParent();  Node  nextSibling  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    parent.getParent();    Node  nextSibling  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	48	None	add
153	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getParent();  Node  parent  =  nextSibling.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getParent();  Node  parent  =  nextSibling.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    parent.getParent();    Node  parent  =  nextSibling.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	48	None	add
154	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getParent();  Node  parent  =  parent.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getParent();  Node  parent  =  parent.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    parent.getParent();    Node  parent  =  parent.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	48	None	add
155	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()!=  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()!=  Token.BLOCK);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    	compilable	  [FE]  AssertionFailedError  	271	6	replace
156	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()!=  Token.BLOCK);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()!=  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()!=  Token.BLOCK);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    	compilable	  [FE]  AssertionFailedError  	271	6	replace
157	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  parent);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(parent,  parent);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	271	7	replace
158	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  parent);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  parent);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  parent);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	271	7	replace
159	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(parent,  node);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    	compilable	  [FE]  AssertionFailedError  	271	6	replace
160	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    	compilable	  [FE]  AssertionFailedError  	271	6	replace
161	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  parent.getLastChild());  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  parent.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent.getFirstChild(),  parent.getLastChild());	  return    computeFollowNode(fromNode,    parent.getFirstChild());    return    computeFallThrough(fromNode,    parent.getFirstChild());    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)	187	None	replace
162	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  node.getLastChild());  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  node.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent.getFirstChild(),  node.getLastChild());	  return    computeFollowNode(fromNode,    parent.getFirstChild());    return    computeFallThrough(fromNode,    parent.getFirstChild());    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)	187	None	replace
163	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  node.getLastChild();  return  computeFollowNode(fromNode,  body);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  body  =  node.getLastChild();  return  computeFollowNode(fromNode,  body);	  return    computeFollowNode(fromNode,    node);    Node    body    =    node.getLastChild();    return    computeFollowNode(fromNode,    body);    	compilable	  [FE]  StackOverflowError  	217	7	replace
164	[BUG]  [BUGGY]  Node  body  =  node.getLastChild();  return  computeFollowNode(fromNode,  body);  [FE]  StackOverflowError  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  node.getLastChild();  return  computeFollowNode(fromNode,  body);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  node.getLastChild();  return  computeFollowNode(fromNode,  body);	  return    computeFollowNode(fromNode,    node);    Node    body    =    node.getLastChild();    return    computeFollowNode(fromNode,    body);    	compilable	  [FE]  StackOverflowError  	217	7	replace
165	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getFirstChild();  return  computeFallThrough(body.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  body  =  parent.getFirstChild();  return  computeFallThrough(body.getLastChild());	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    body    =    parent.getFirstChild();    return    computeFallThrough(body.getLastChild());    	compilable	  [FE]  AssertionFailedError  	262	6	replace
166	[BUG]  [BUGGY]  Node  body  =  parent.getFirstChild();  return  computeFallThrough(body.getLastChild());  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getFirstChild();  return  computeFallThrough(body.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  parent.getFirstChild();  return  computeFallThrough(body.getLastChild());	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    body    =    parent.getFirstChild();    return    computeFallThrough(body.getLastChild());    	compilable	  [FE]  AssertionFailedError  	262	6	replace
167	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getLastChild();  return  computeFallThrough(body.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  body  =  parent.getLastChild();  return  computeFallThrough(body.getLastChild());	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    body    =    parent.getFirstChild();    return    computeFallThrough(body.getLastChild());    	compilable	  [FE]  AssertionFailedError  	262	5	replace
168	[BUG]  [BUGGY]  Node  body  =  parent.getLastChild();  return  computeFallThrough(body.getLastChild());  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getLastChild();  return  computeFallThrough(body.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  parent.getLastChild();  return  computeFallThrough(body.getLastChild());	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    body    =    parent.getFirstChild();    return    computeFallThrough(body.getLastChild());    	compilable	  [FE]  AssertionFailedError  	262	5	replace
169	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  node.getFirstChild();  return  computeFallThrough(body.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  body  =  node.getFirstChild();  return  computeFallThrough(body.getLastChild());	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    body    =    parent.getFirstChild();    return    computeFallThrough(body.getLastChild());    	compilable	  [FE]  AssertionFailedError  	262	6	replace
170	[BUG]  [BUGGY]  Node  body  =  node.getFirstChild();  return  computeFallThrough(body.getLastChild());  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  node.getFirstChild();  return  computeFallThrough(body.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  node.getFirstChild();  return  computeFallThrough(body.getLastChild());	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    body    =    parent.getFirstChild();    return    computeFallThrough(body.getLastChild());    	compilable	  [FE]  AssertionFailedError  	262	6	replace
171	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  fromNode.getFirstChild();  return  computeFallThrough(body.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  body  =  fromNode.getFirstChild();  return  computeFallThrough(body.getLastChild());	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    body    =    parent.getFirstChild();    return    computeFallThrough(body.getLastChild());    	compilable	  [FE]  RuntimeException  	262	6	replace
172	[BUG]  [BUGGY]  Node  body  =  fromNode.getFirstChild();  return  computeFallThrough(body.getLastChild());  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  fromNode.getFirstChild();  return  computeFallThrough(body.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  fromNode.getFirstChild();  return  computeFallThrough(body.getLastChild());	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    body    =    parent.getFirstChild();    return    computeFallThrough(body.getLastChild());    	compilable	  [FE]  RuntimeException  	262	6	replace
173	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);	  	compilable	  [FE]  StackOverflowError  	144	7	add
174	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);	  	compilable	  [FE]  StackOverflowError  	144	7	add
175	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  node,  this);	  	compilable	  [FE]  StackOverflowError  	144	7	add
176	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  node,  this);  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  node,  this);	  	compilable	  [FE]  StackOverflowError  	144	7	add
177	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  parent,  this);	  	compilable	  [FE]  StackOverflowError  	144	7	add
178	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  parent,  this);	  	compilable	  [FE]  StackOverflowError  	144	7	add
179	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  node,  null);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  node,  null);  NodeTraversal.traverse(compiler,  parent,  this);	  	compilable	  [FE]  StackOverflowError  	144	7	add
180	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  node,  null);  NodeTraversal.traverse(compiler,  parent,  this);  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  node,  null);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  node,  null);  NodeTraversal.traverse(compiler,  parent,  this);	  	compilable	  [FE]  StackOverflowError  	144	7	add
181	[BUG]  [BUGGY]  Node  parent  =  node.getParent();  return  computeFollowNode(fromNode,  parent.getFirstChild());  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  node.getParent();  return  computeFollowNode(fromNode,  parent.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  node.getParent();  return  computeFollowNode(fromNode,  parent.getFirstChild());	  return    computeFollowNode(fromNode,    parent.getFirstChild());    Node    parent    =    node.getParent();    return    computeFollowNode(fromNode,    parent.getFirstChild());    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	52	None	replace
182	[BUG]  [BUGGY]  Node  parent  =  node.getParent();  return  computeFollowNode(parent,  parent.getFirstChild());  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  node.getParent();  return  computeFollowNode(parent,  parent.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  node.getParent();  return  computeFollowNode(parent,  parent.getFirstChild());	  return    computeFollowNode(fromNode,    parent.getFirstChild());    Node    parent    =    node.getParent();    return    computeFollowNode(fromNode,    parent.getFirstChild());    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	52	None	replace
183	[BUG]  [BUGGY]  Node  parent  =  node.getParent();  return  computeFollowNode(fromNode,  parent.getLastChild());  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  node.getParent();  return  computeFollowNode(fromNode,  parent.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  node.getParent();  return  computeFollowNode(fromNode,  parent.getLastChild());	  return    computeFollowNode(fromNode,    parent.getFirstChild());    Node    parent    =    node.getParent();    return    computeFollowNode(fromNode,    parent.getFirstChild());    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	52	None	replace
184	[BUG]  [BUGGY]  Node  parent  =  node.getParent();  return  computeFallThrough(parent.getLastChild());  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                  StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  node.getParent();  return  computeFallThrough(parent.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  node.getParent();  return  computeFallThrough(parent.getLastChild());	  return    computeFollowNode(fromNode,    parent.getFirstChild());    Node    parent    =    node.getParent();    return    computeFollowNode(fromNode,    parent.getFirstChild());    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	52	None	replace
185	[BUG]  [BUGGY]  Node  parent  =  node.getParent();  return  computeFallThrough(parent.getFirstChild());  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  node.getParent();  return  computeFallThrough(parent.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  node.getParent();  return  computeFallThrough(parent.getFirstChild());	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    parent    =    node.getParent();    return    computeFollowNode(fromNode,    parent.getFirstChild());    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	160	None	replace
186	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  cfg,  node);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  cfg,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  cfg,  node);	  NodeUtil.removeChild(parent,    cfg);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	113	None	replace
187	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node,  cfg);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node,  cfg);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node,  cfg);	  NodeUtil.removeChild(parent,    cfg);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	113	None	replace
188	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  parent,  cfg);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  parent,  cfg);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  parent,  cfg);	  NodeUtil.removeChild(parent,    cfg);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	113	None	replace
189	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  cfg,  deflt);  [CE]  cannot  find  symbol  deflt  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  cfg,  deflt);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  cfg,  deflt);	  NodeUtil.removeChild(parent,    cfg);    	non-compiled	[CE]  cannot  find  symbol  deflt	113	None	replace
190	[BUG]  [BUGGY]  NodeUtil.removeChild(fromNode,  parent,  cfg);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(fromNode,  parent,  cfg);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(fromNode,  parent,  cfg);	  NodeUtil.removeChild(parent,    cfg);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	113	None	replace
191	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(node,    node);    	compilable	  [FE]  RuntimeException  	66	7	replace
192	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(node,    node);    	compilable	  [FE]  RuntimeException  	66	7	replace
193	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.replaceChild(node,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(parent,  node);  parent.replaceChild(node,  node);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(node,    node);    	compilable	  [FE]  RuntimeException  	66	7	replace
194	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.replaceChild(node,  node);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.replaceChild(node,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node);  parent.replaceChild(node,  node);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(node,    node);    	compilable	  [FE]  RuntimeException  	66	7	replace
195	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.replaceChild(node,  FINALLY);  [CE]  cannot  find  symbol  FINALLY  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.replaceChild(node,  FINALLY);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node);  parent.replaceChild(node,  FINALLY);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(node,    node);    	non-compiled	[CE]  cannot  find  symbol  FINALLY	66	None	replace
196	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(node,    node);    	compilable	  [FE]  RuntimeException  	66	7	replace
197	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(node,    node);    	compilable	  [FE]  RuntimeException  	66	7	replace
198	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node.getLastChild());  Node  body  =  parent.getFirstChild();  [CE]  unreachable  statement  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  node.getLastChild());  Node  body  =  parent.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  node.getLastChild());  Node  body  =  parent.getFirstChild();	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    body    =    parent.getFirstChild();    	non-compiled	[CE]  unreachable  statement	261	None	replace
199	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(fromNode,    node);    	compilable	  [FE]  RuntimeException  	63	7	replace
200	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(fromNode,    node);    	compilable	  [FE]  RuntimeException  	63	7	replace
201	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  FINALLY);  [CE]  cannot  find  symbol  FINALLY  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  FINALLY);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  FINALLY);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(fromNode,    node);    	non-compiled	[CE]  cannot  find  symbol  FINALLY	63	None	replace
202	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  FINALLY);  parent.replaceChild(fromNode,  node);  [CE]  cannot  find  symbol  FINALLY  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  FINALLY);  parent.replaceChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  FINALLY);  parent.replaceChild(fromNode,  node);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(fromNode,    node);    	non-compiled	[CE]  cannot  find  symbol  FINALLY	63	None	replace
203	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getFirstChild(),  fromNode);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getFirstChild(),  fromNode);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode.getFirstChild(),  fromNode);	  return    computeFallThrough(node,    fromNode);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	81	None	replace
204	[BUG]  [BUGGY]  return  calculateFallThrough(fromNode,  node);  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  calculateFallThrough(fromNode,  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  calculateFallThrough(fromNode,  node);	  return    computeFallThrough(node,    fromNode);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
205	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  parent);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent.getFirstChild(),  parent);	  return    computeFollowNode(fromNode,    parent.getFirstChild());    Node    parent    =    node.getParent();    if(parent!=    null)    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)	54	None	replace
206	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.redeclareVarsInsideBranch(parent);	  NodeUtil.redeclareVarsInsideBranch(fromNode);    	compilable	  [FE]  RuntimeException  	241	5	replace
207	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(parent);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.redeclareVarsInsideBranch(parent);	  NodeUtil.redeclareVarsInsideBranch(fromNode);    	compilable	  [FE]  RuntimeException  	241	5	replace
208	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.redeclareVarsInsideBranch(node);	  NodeUtil.redeclareVarsInsideBranch(fromNode);    	compilable	  [FE]  RuntimeException  	241	5	replace
209	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(node);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.redeclareVarsInsideBranch(node);	  NodeUtil.redeclareVarsInsideBranch(fromNode);    	compilable	  [FE]  RuntimeException  	241	5	replace
210	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(node,  parent);  [CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(node,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.redeclareVarsInsideBranch(node,  parent);	  NodeUtil.redeclareVarsInsideBranch(fromNode);    	non-compiled	[CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;	241	None	replace
211	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(parent,  fromNode);  [CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.redeclareVarsInsideBranch(parent,  fromNode);	  NodeUtil.redeclareVarsInsideBranch(fromNode);    	non-compiled	[CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;	241	None	replace
212	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getFirstChild();  Preconditions.checkState(body!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  body  =  parent.getFirstChild();  Preconditions.checkState(body!=  null);	          Node    body    =    node.getFirstChild();    Preconditions.checkState(body!=    null);    	compilable	  [FE]  AssertionFailedError  	260	5	replace
213	[BUG]  [BUGGY]  Node  body  =  parent.getFirstChild();  Preconditions.checkState(body!=  null);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getFirstChild();  Preconditions.checkState(body!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  parent.getFirstChild();  Preconditions.checkState(body!=  null);	          Node    body    =    node.getFirstChild();    Preconditions.checkState(body!=    null);    	compilable	  [FE]  AssertionFailedError  	260	5	replace
214	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getFirstChild();  Preconditions.checkState(body  ==  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  body  =  parent.getFirstChild();  Preconditions.checkState(body  ==  null);	          Node    body    =    node.getFirstChild();    Preconditions.checkState(body!=    null);    	compilable	  [FE]  RuntimeException  	260	7	replace
215	[BUG]  [BUGGY]  Node  body  =  parent.getFirstChild();  Preconditions.checkState(body  ==  null);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getFirstChild();  Preconditions.checkState(body  ==  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  parent.getFirstChild();  Preconditions.checkState(body  ==  null);	          Node    body    =    node.getFirstChild();    Preconditions.checkState(body!=    null);    	compilable	  [FE]  RuntimeException  	260	7	replace
216	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  node.getLastChild();  Preconditions.checkState(body!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  body  =  node.getLastChild();  Preconditions.checkState(body!=  null);	          Node    body    =    node.getFirstChild();    Preconditions.checkState(body!=    null);    	compilable	  [FE]  AssertionFailedError  	260	6	replace
217	[BUG]  [BUGGY]  Node  body  =  node.getLastChild();  Preconditions.checkState(body!=  null);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  node.getLastChild();  Preconditions.checkState(body!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  node.getLastChild();  Preconditions.checkState(body!=  null);	          Node    body    =    node.getFirstChild();    Preconditions.checkState(body!=    null);    	compilable	  [FE]  AssertionFailedError  	260	6	replace
218	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  fromNode.getFirstChild();  Preconditions.checkState(body!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  body  =  fromNode.getFirstChild();  Preconditions.checkState(body!=  null);	          Node    body    =    node.getFirstChild();    Preconditions.checkState(body!=    null);    	compilable	  [FE]  AssertionFailedError  	260	6	replace
219	[BUG]  [BUGGY]  Node  body  =  fromNode.getFirstChild();  Preconditions.checkState(body!=  null);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  fromNode.getFirstChild();  Preconditions.checkState(body!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  fromNode.getFirstChild();  Preconditions.checkState(body!=  null);	          Node    body    =    node.getFirstChild();    Preconditions.checkState(body!=    null);    	compilable	  [FE]  AssertionFailedError  	260	6	replace
220	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getLastChild();  Preconditions.checkState(body!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  body  =  parent.getLastChild();  Preconditions.checkState(body!=  null);	          Node    body    =    node.getFirstChild();    Preconditions.checkState(body!=    null);    	compilable	  [FE]  AssertionFailedError  	260	5	replace
221	[BUG]  [BUGGY]  Node  body  =  parent.getLastChild();  Preconditions.checkState(body!=  null);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getLastChild();  Preconditions.checkState(body!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  parent.getLastChild();  Preconditions.checkState(body!=  null);	          Node    body    =    node.getFirstChild();    Preconditions.checkState(body!=    null);    	compilable	  [FE]  AssertionFailedError  	260	5	replace
222	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        fromNode);        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(fromNode);    NodeUtil.removeChild(parent,  fromNode);	  	compilable	  [FE]  RuntimeException  	190	7	add
223	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(fromNode);    NodeUtil.removeChild(parent,  fromNode);	  	compilable	  [FE]  RuntimeException  	190	7	add
224	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        fromNode);        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(fromNode);    NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	190	7	add
225	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(fromNode);    NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	190	7	add
226	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        fromNode);        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(fromNode);    NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	190	7	add
227	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(fromNode);    NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	190	7	add
228	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        fromNode);        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(fromNode);    NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	190	7	add
229	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(fromNode);    NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	190	7	add
230	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.FOR);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        fromNode);        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(fromNode);    NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.FOR);	  	compilable	  [FE]  RuntimeException  	190	7	add
231	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.FOR);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.FOR);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(fromNode);    NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.FOR);	  	compilable	  [FE]  RuntimeException  	190	7	add
232	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        fromNode);        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(fromNode);    NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	190	7	add
233	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(fromNode);    NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	190	7	add
234	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node,  parent);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node,  parent);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	197	None	replace
235	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  fromNode);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node);    	compilable	  [FE]  RuntimeException  	197	7	replace
236	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  fromNode);  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  fromNode);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node);    	compilable	  [FE]  RuntimeException  	197	7	replace
237	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(fromNode,  node);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node);    	compilable	  [FE]  RuntimeException  	197	7	replace
238	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(fromNode,  node);  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(fromNode,  node);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node);    	compilable	  [FE]  RuntimeException  	197	7	replace
239	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  finallyMap,  astPositionCounter);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Multimap<Node,Node>,int)  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  finallyMap,  astPositionCounter);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  finallyMap,  astPositionCounter);	  NodeTraversal.traverse(compiler,    node,    this,    finallyMap);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Multimap<Node,Node>,int)	237	None	replace
240	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  finallyMap,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Multimap<Node,Node>,ControlFlowAnalysis)  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  finallyMap,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  finallyMap,  this);	  NodeTraversal.traverse(compiler,    node,    this,    finallyMap);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Multimap<Node,Node>,ControlFlowAnalysis)	237	None	replace
241	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  finallyMap,  astPositionCounter);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Multimap<Node,Node>,int)  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  finallyMap,  astPositionCounter);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  this,  finallyMap,  astPositionCounter);	  NodeTraversal.traverse(compiler,    node,    this,    finallyMap);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Multimap<Node,Node>,int)	237	None	replace
242	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  finallyMap,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Multimap<Node,Node>,Node)  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  finallyMap,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  finallyMap,  parent);	  NodeTraversal.traverse(compiler,    node,    this,    finallyMap);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Multimap<Node,Node>,Node)	237	None	replace
243	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  finallyMap,  sourceFile);  [CE]  cannot  find  symbol  sourceFile  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  finallyMap,  sourceFile);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  finallyMap,  sourceFile);	  NodeTraversal.traverse(compiler,    node,    this,    finallyMap);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	237	None	replace
244	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  Node  nextSibling  =  node.getNext();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getNext();  Node  nextSibling  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    node.getNext();    Node  nextSibling  =  node.getNext();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	46	None	add
245	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  Node  nextSibling  =  parent.getNext();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getNext();  Node  nextSibling  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    node.getNext();    Node  nextSibling  =  parent.getNext();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	46	None	add
246	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  Node  nextSibling  =  parent.getLastChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getNext();  Node  nextSibling  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    node.getNext();    Node  nextSibling  =  parent.getLastChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	46	None	add
247	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  Node  nextSibling  =  parent.getFirstChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getNext();  Node  nextSibling  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    node.getNext();    Node  nextSibling  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	46	None	add
248	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  Node  nextSibling  =  node.getLastChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getNext();  Node  nextSibling  =  node.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    node.getNext();    Node  nextSibling  =  node.getLastChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	46	None	add
249	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  Node  nextSibling  =  child.getNext();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getNext();  Node  nextSibling  =  child.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    node.getNext();    Node  nextSibling  =  child.getNext();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	46	None	add
250	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  parent  =  node.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  parent  =  node.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent);  Node  parent  =  node.getParent();	  return    computeFollowNode(fromNode,    node);    Node    parent    =    node.getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	106	None	replace
251	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent);  Node  parent  =  node.getParent();  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  parent);  Node  parent  =  node.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  parent);  Node  parent  =  node.getParent();	  return    computeFollowNode(fromNode,    node);    Node    parent    =    node.getParent();    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	106	None	replace
252	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  fromNode,  parent);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    }    else    {    NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	143	None	replace
253	[BUG]  [BUGGY]  'else'  without  'if'  [CE]  unclosed  character  literal  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  'else'  without  'if'  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	'else'  without  'if'	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    }    else    {    NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  unclosed  character  literal	143	None	replace
254	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  count);  [CE]  cannot  find  symbol  count  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  count);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  node,  count);	  return    computeFollowNode(fromNode,    parent,    node,    thenBlock);    	non-compiled	[CE]  cannot  find  symbol  count	208	None	replace
255	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  this.nextSibling);  [CE]  cannot  find  symbol  nextSibling  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  this.nextSibling);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  node,  this.nextSibling);	  return    computeFollowNode(fromNode,    parent,    node,    thenBlock);    	non-compiled	[CE]  cannot  find  symbol  nextSibling	208	None	replace
256	[BUG]  [BUGGY]  Node  parent  =  toNode.getNext();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  toNode.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  toNode.getNext();	  Node    parent    =    node.getNext();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	43	None	replace
257	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  node  =  node.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  node  =  node.getFirstChild();	  return    computeFallThrough(node.getFirstChild());    Node    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	164	None	replace
258	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getFirstChild());  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getFirstChild());  Node  node  =  node.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode.getFirstChild());  Node  node  =  node.getFirstChild();	  return    computeFallThrough(node.getFirstChild());    Node    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	164	None	replace
259	[BUG]  [BUGGY]  Node  node  =  parent.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  node  =  parent.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  node  =  parent.getFirstChild();	  return    computeFallThrough(node.getFirstChild());    Node    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	164	None	replace
260	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  node  =  node.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	node  =  node.getFirstChild();	  return    computeFallThrough(node.getFirstChild());    Node    node    =    node.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	164	5	replace
261	[BUG]  [BUGGY]  node  =  node.getFirstChild();  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  node  =  node.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	node  =  node.getFirstChild();	  return    computeFallThrough(node.getFirstChild());    Node    node    =    node.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	164	5	replace
262	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node,  astPositionCounter);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  parent,  node,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  parent,  node,  astPositionCounter);	  return    computeFallThrough(fromNode,    parent,    node);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	126	None	replace
263	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node,  firstChild);  [CE]  cannot  find  symbol  firstChild  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  parent,  node,  firstChild);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  parent,  node,  firstChild);	  return    computeFallThrough(fromNode,    parent,    node);    	non-compiled	[CE]  cannot  find  symbol  firstChild	126	None	replace
264	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node,  cfg);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  parent,  node,  cfg);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  parent,  node,  cfg);	  return    computeFallThrough(fromNode,    parent,    node);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	126	None	replace
265	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node,  firstSibling);  [CE]  cannot  find  symbol  firstSibling  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  parent,  node,  firstSibling);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  parent,  node,  firstSibling);	  return    computeFallThrough(fromNode,    parent,    node);    	non-compiled	[CE]  cannot  find  symbol  firstSibling	126	None	replace
266	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	          NodeTraversal.traverse(compiler,    node,    this);    Preconditions.checkState(parent.getType()    ==    Token.NAME);    	compilable	  [FE]  StackOverflowError  	184	7	replace
267	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	          NodeTraversal.traverse(compiler,    node,    this);    Preconditions.checkState(parent.getType()    ==    Token.NAME);    	compilable	  [FE]  StackOverflowError  	184	7	replace
268	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Preconditions.checkState(parent.getType()  ==  Token.NAME);	          NodeTraversal.traverse(compiler,    node,    this);    Preconditions.checkState(parent.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	184	7	replace
269	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);	          NodeTraversal.traverse(compiler,    node,    this);    Preconditions.checkState(parent.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	184	7	replace
270	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  astPositionCounter);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,int)  [FE]        StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  astPositionCounter);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  this,  astPositionCounter);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	          NodeTraversal.traverse(compiler,    node,    this);    Preconditions.checkState(parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,int)	184	None	replace
271	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getLastChild());  return  computeFallThrough(fromNode.getLastChild());  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode.getLastChild());  return  computeFallThrough(fromNode.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode.getLastChild());    return  computeFallThrough(fromNode.getLastChild());	  	non-compiled	[CE]  unreachable  statement	34	None	add
272	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getLastChild());  Node  fromNode  =  parent.getFirstChild();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode.getLastChild());  Node  fromNode  =  parent.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode.getLastChild());    Node  fromNode  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	34	None	add
273	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getLastChild());  return  computeFollowNode(fromNode.getLastChild());  [CE]  unreachable  statement  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode.getLastChild());  return  computeFollowNode(fromNode.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode.getLastChild());    return  computeFollowNode(fromNode.getLastChild());	  	non-compiled	[CE]  unreachable  statement	34	None	add
274	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getLastChild());  Node  fromNode  =  node.getFirstChild();  return  computeFallThrough(fromNode.getLastChild());  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode.getLastChild());  Node  fromNode  =  node.getFirstChild();  return  computeFallThrough(fromNode.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode.getLastChild());    Node  fromNode  =  node.getFirstChild();  return  computeFallThrough(fromNode.getLastChild());	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	34	None	add
275	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getLastChild());  Node  fromNode  =  parent.getFirstChild();  return  computeFallThrough(fromNode.getLastChild());  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode.getLastChild());  Node  fromNode  =  parent.getFirstChild();  return  computeFallThrough(fromNode.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode.getLastChild());    Node  fromNode  =  parent.getFirstChild();  return  computeFallThrough(fromNode.getLastChild());	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	34	None	add
276	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getLastChild());  Node  fromNode  =  parent.getParent();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode.getLastChild());  Node  fromNode  =  parent.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode.getLastChild());    Node  fromNode  =  parent.getParent();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	34	None	add
277	[BUG]  [BUGGY]  Node  parent  =  parent.getNext();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  parent.getNext();	          Node    nextSibling    =    parent.getNext();    Node    parent    =    nextSibling.getNext();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	27	None	replace
278	[BUG]  [BUGGY]  Node  parent  =  nextSibling.getNext();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  nextSibling.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  nextSibling.getNext();	          Node    nextSibling    =    parent.getNext();    Node    parent    =    nextSibling.getNext();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	27	None	replace
279	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  parent.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(parent,  parent.getFirstChild());	  NodeUtil.removeChild(parent,    FINALLY);    	compilable	  [FE]  AssertionFailedError  	91	6	replace
280	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  parent.getFirstChild());  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  parent.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  parent.getFirstChild());	  NodeUtil.removeChild(parent,    FINALLY);    	compilable	  [FE]  AssertionFailedError  	91	6	replace
281	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  parent.getLastChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(parent,  parent.getLastChild());	  NodeUtil.removeChild(parent,    FINALLY);    	compilable	  [FE]  AssertionFailedError  	91	7	replace
282	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  parent.getLastChild());  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  parent.getLastChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  parent.getLastChild());	  NodeUtil.removeChild(parent,    FINALLY);    	compilable	  [FE]  AssertionFailedError  	91	7	replace
283	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  fromNode,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeTraversal.traverse(compiler,    fromNode,    this);    NodeTraversal.traverse(compiler,  fromNode,  this);	  	compilable	  [FE]  StackOverflowError  	71	7	add
284	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  fromNode,  this);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  fromNode,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,    fromNode,    this);    NodeTraversal.traverse(compiler,  fromNode,  this);	  	compilable	  [FE]  StackOverflowError  	71	7	add
285	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  fromNode,  this);  return  computeFollowNode(fromNode,  parent);  [CE]  unreachable  statement  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  fromNode,  this);  return  computeFollowNode(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,    fromNode,    this);    NodeTraversal.traverse(compiler,  fromNode,  this);  return  computeFollowNode(fromNode,  parent);	  	non-compiled	[CE]  unreachable  statement	71	None	add
286	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  fromNode,  this);  return  computeFallThrough(fromNode,  parent);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]        StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  fromNode,  this);  return  computeFallThrough(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,    fromNode,    this);    NodeTraversal.traverse(compiler,  fromNode,  this);  return  computeFallThrough(fromNode,  parent);	  	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	71	None	add
287	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  fromNode,  this);  parent.replaceChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeTraversal.traverse(compiler,    fromNode,    this);    NodeTraversal.traverse(compiler,  fromNode,  this);  parent.replaceChild(fromNode,  node);	  	compilable	  [FE]  StackOverflowError  	71	7	add
288	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  fromNode,  this);  parent.replaceChild(fromNode,  node);  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  fromNode,  this);  parent.replaceChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,    fromNode,    this);    NodeTraversal.traverse(compiler,  fromNode,  this);  parent.replaceChild(fromNode,  node);	  	compilable	  [FE]  StackOverflowError  	71	7	add
289	[BUG]  [BUGGY]  Node  parent  =  getParent(fromNode);  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getParent(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParent(fromNode);	  Node    parent    =    getParent(node);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	248	None	replace
290	[BUG]  [BUGGY]  Node  parent  =  getParent(fromNode,  node);  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getParent(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParent(fromNode,  node);	  Node    parent    =    getParent(node);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	248	None	replace
291	[BUG]  [BUGGY]  Node  parent  =  getParent(node,  node);  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getParent(node,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParent(node,  node);	  Node    parent    =    getParent(node);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	248	None	replace
292	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  node.getLastChild());  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  node.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  node.getLastChild());	  return    computeFollowNode(fromNode,    node.getLastChild());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	84	None	replace
293	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  firstJump);  [CE]  cannot  find  symbol  firstJump  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  firstJump);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  node,  firstJump);	  return    computeFollowNode(fromNode,    parent,    node,    firstSibling);    	non-compiled	[CE]  cannot  find  symbol  firstJump	210	None	replace
294	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  lastJump);  [CE]  cannot  find  symbol  lastJump  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  lastJump);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  node,  lastJump);	  return    computeFollowNode(fromNode,    parent,    node,    firstSibling);    	non-compiled	[CE]  cannot  find  symbol  lastJump	210	None	replace
295	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(fromNode,  parent,  node);  [CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(fromNode,  parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.redeclareVarsInsideBranch(fromNode,  parent,  node);	  NodeUtil.redeclareVarsInsideBranch(fromNode,    parent);    	non-compiled	[CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;	239	None	replace
296	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(fromNode,  parent,  nodePriorities);  [CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(fromNode,  parent,  nodePriorities);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.redeclareVarsInsideBranch(fromNode,  parent,  nodePriorities);	  NodeUtil.redeclareVarsInsideBranch(fromNode,    parent);    	non-compiled	[CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;	239	None	replace
297	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(fromNode,  node,  parent);  [CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(fromNode,  node,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.redeclareVarsInsideBranch(fromNode,  node,  parent);	  NodeUtil.redeclareVarsInsideBranch(fromNode,    parent);    	non-compiled	[CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;	239	None	replace
298	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(fromNode,  parent,  FINALLY);  [CE]  cannot  find  symbol  FINALLY  [FE]                RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(fromNode,  parent,  FINALLY);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.redeclareVarsInsideBranch(fromNode,  parent,  FINALLY);	  NodeUtil.redeclareVarsInsideBranch(fromNode,    parent);    	non-compiled	[CE]  cannot  find  symbol  FINALLY	239	None	replace
299	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  FINALLY);  [CE]  cannot  find  symbol  FINALLY  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  FINALLY);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  FINALLY);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,    node);    	non-compiled	[CE]  cannot  find  symbol  FINALLY	199	None	replace
300	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  return  computeFallThrough(fromNode,  parent);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  return  computeFallThrough(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  fromNode);  return  computeFallThrough(fromNode,  parent);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    return    computeFollowNode(fromNode,    parent);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	64	None	replace
301	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  return  computeFollowNode(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(parent,  node);  return  computeFollowNode(fromNode,  parent);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    return    computeFollowNode(fromNode,    parent);    	compilable	  [FE]  AssertionFailedError  	64	5	replace
302	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  return  computeFollowNode(fromNode,  parent);  [FE]  AssertionFailedError  [FE]                  RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  return  computeFollowNode(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node);  return  computeFollowNode(fromNode,  parent);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    return    computeFollowNode(fromNode,    parent);    	compilable	  [FE]  AssertionFailedError  	64	5	replace
303	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  return  computeFallThrough(fromNode,  parent);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                    RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  return  computeFallThrough(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node);  return  computeFallThrough(fromNode,  parent);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    return    computeFollowNode(fromNode,    parent);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	64	None	replace
304	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  fromNode);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    	compilable	  [FE]  RuntimeException  	57	6	replace
305	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  fromNode);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  fromNode);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    	compilable	  [FE]  RuntimeException  	57	6	replace
306	[BUG]  [BUGGY]  Traversal.traverse(compiler,  node,  this);  [CE]  cannot  find  symbol  Traversal  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Traversal.traverse(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Traversal.traverse(compiler,  node,  this);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  cannot  find  symbol  Traversal	142	None	replace
307	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  AssertionFailedError  <  Node>  parent  =  nextSibling.getParent();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getNext();  AssertionFailedError  <  Node>  parent  =  nextSibling.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  node.getNext();  AssertionFailedError  <  Node>  parent  =  nextSibling.getParent();	          Node    nextSibling    =    parent.getNext();    AssertionFailedError    <    Node>    parent    =    nextSibling.getParent();    	non-compiled	[CE]  cannot  find  symbol	169	None	replace
308	[BUG]  [BUGGY]  AssertionFailedError  <  Node>  parent  =  nextSibling.getParent();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  AssertionFailedError  <  Node>  parent  =  nextSibling.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	AssertionFailedError  <  Node>  parent  =  nextSibling.getParent();	          Node    nextSibling    =    parent.getNext();    AssertionFailedError    <    Node>    parent    =    nextSibling.getParent();    	non-compiled	[CE]  cannot  find  symbol	169	None	replace
309	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getParent();  AssertionFailedError  <  Node>  parent  =  nextSibling.getParent();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getParent();  AssertionFailedError  <  Node>  parent  =  nextSibling.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getParent();  AssertionFailedError  <  Node>  parent  =  nextSibling.getParent();	          Node    nextSibling    =    parent.getNext();    AssertionFailedError    <    Node>    parent    =    nextSibling.getParent();    	non-compiled	[CE]  cannot  find  symbol	169	None	replace
310	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getNext();  AssertionFailedError  <  Node>  parent  =  node.getParent();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getNext();  AssertionFailedError  <  Node>  parent  =  node.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getNext();  AssertionFailedError  <  Node>  parent  =  node.getParent();	          Node    nextSibling    =    parent.getNext();    AssertionFailedError    <    Node>    parent    =    nextSibling.getParent();    	non-compiled	[CE]  cannot  find  symbol	169	None	replace
311	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPosition,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Map<Node,Integer>,ControlFlowAnalysis)  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPosition,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  astPosition,  this);	  NodeTraversal.traverse(compiler,    node,    this,    astPosition);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Map<Node,Integer>,ControlFlowAnalysis)	69	None	replace
312	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  astPosition,  this,  node);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Map<Node,Integer>,ControlFlowAnalysis,Node)  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  astPosition,  this,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  astPosition,  this,  node);	  NodeTraversal.traverse(compiler,    node,    this,    astPosition);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Map<Node,Integer>,ControlFlowAnalysis,Node)	69	None	replace
313	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  node,  this,  astPosition);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,ControlFlowAnalysis,Map<Node,Integer>)  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  node,  this,  astPosition);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  fromNode,  node,  this,  astPosition);	  NodeTraversal.traverse(compiler,    node,    this,    astPosition);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,ControlFlowAnalysis,Map<Node,Integer>)	69	None	replace
314	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  node,  astPosition);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Map<Node,Integer>)  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  node,  astPosition);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  fromNode,  node,  astPosition);	  NodeTraversal.traverse(compiler,    node,    this,    astPosition);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Map<Node,Integer>)	69	None	replace
315	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPosition,  FINALLY);  [CE]  cannot  find  symbol  FINALLY  [FE]                  StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPosition,  FINALLY);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  astPosition,  FINALLY);	  NodeTraversal.traverse(compiler,    node,    this,    astPosition);    	non-compiled	[CE]  cannot  find  symbol  FINALLY	69	None	replace
316	[BUG]  [BUGGY]          Node    body    =    parent.getFirstChild();    Node  head  =  parent.getFirstChild();  Node  body  =  parent.getFirstChild();  Node  head  =  parent.getFirstChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    body    =    parent.getFirstChild();    Node  head  =  parent.getFirstChild();  Node  body  =  parent.getFirstChild();  Node  head  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        body        =        parent.getFirstChild();        Node    head    =    parent.getFirstChild();    Node  body  =  parent.getFirstChild();  Node  head  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	17	None	add
317	[BUG]  [BUGGY]          Node    body    =    parent.getFirstChild();    Node  head  =  parent.getFirstChild();  Node  body  =  parent.getLastChild();  Node  head  =  parent.getFirstChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    body    =    parent.getFirstChild();    Node  head  =  parent.getFirstChild();  Node  body  =  parent.getLastChild();  Node  head  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        body        =        parent.getFirstChild();        Node    head    =    parent.getFirstChild();    Node  body  =  parent.getLastChild();  Node  head  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	17	None	add
318	[BUG]  [BUGGY]          Node    body    =    parent.getFirstChild();    Node  head  =  parent.getFirstChild();  Node  body  =  parent.getFirstChild();  Node  head  =  parent.getLastChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    body    =    parent.getFirstChild();    Node  head  =  parent.getFirstChild();  Node  body  =  parent.getFirstChild();  Node  head  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        body        =        parent.getFirstChild();        Node    head    =    parent.getFirstChild();    Node  body  =  parent.getFirstChild();  Node  head  =  parent.getLastChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	17	None	add
319	[BUG]  [BUGGY]          Node    body    =    parent.getFirstChild();    Node  head  =  parent.getFirstChild();  Node  body  =  node.getFirstChild();  Node  head  =  parent.getFirstChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    body    =    parent.getFirstChild();    Node  head  =  parent.getFirstChild();  Node  body  =  node.getFirstChild();  Node  head  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        body        =        parent.getFirstChild();        Node    head    =    parent.getFirstChild();    Node  body  =  node.getFirstChild();  Node  head  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	17	None	add
320	[BUG]  [BUGGY]          Node    body    =    parent.getFirstChild();    Node  head  =  parent.getFirstChild();  Node  body  =  parent.getFirstChild();  Node  header  =  parent.getFirstChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    body    =    parent.getFirstChild();    Node  head  =  parent.getFirstChild();  Node  body  =  parent.getFirstChild();  Node  header  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        body        =        parent.getFirstChild();        Node    head    =    parent.getFirstChild();    Node  body  =  parent.getFirstChild();  Node  header  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	17	None	add
321	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getFirstChild().getString(),  parent);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getFirstChild().getString(),  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode.getFirstChild().getString(),  parent);	  return    computeFallThrough(fromNode.getFirstChild().getString());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	23	None	replace
322	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getLastChild().getString());  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getLastChild().getString());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode.getLastChild().getString());	  return    computeFallThrough(fromNode.getFirstChild().getString());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	23	None	replace
323	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getFirstChild().getString(),  node);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getFirstChild().getString(),  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode.getFirstChild().getString(),  node);	  return    computeFallThrough(fromNode.getFirstChild().getString());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	23	None	replace
324	[BUG]  [BUGGY]  return  computeFallThrough(parent.getFirstChild().getString());  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(parent.getFirstChild().getString());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(parent.getFirstChild().getString());	  return    computeFallThrough(fromNode.getFirstChild().getString());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	23	None	replace
325	[BUG]  [BUGGY]  return  computeFallThrough(node.getFirstChild().getString());  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(node.getFirstChild().getString());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(node.getFirstChild().getString());	  return    computeFallThrough(fromNode.getFirstChild().getString());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	23	None	replace
326	[BUG]  [BUGGY]          Node    body    =    node.getFirstChild();    Node  head  =  node.getFirstChild();  Node  body  =  node.getFirstChild();  Node  head  =  node.getFirstChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    body    =    node.getFirstChild();    Node  head  =  node.getFirstChild();  Node  body  =  node.getFirstChild();  Node  head  =  node.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        body        =        node.getFirstChild();        Node    head    =    node.getFirstChild();    Node  body  =  node.getFirstChild();  Node  head  =  node.getFirstChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	177	None	add
327	[BUG]  [BUGGY]          Node    body    =    node.getFirstChild();    Node  head  =  node.getFirstChild();  Node  body  =  node.getLastChild();  Node  head  =  node.getFirstChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    body    =    node.getFirstChild();    Node  head  =  node.getFirstChild();  Node  body  =  node.getLastChild();  Node  head  =  node.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        body        =        node.getFirstChild();        Node    head    =    node.getFirstChild();    Node  body  =  node.getLastChild();  Node  head  =  node.getFirstChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	177	None	add
328	[BUG]  [BUGGY]          Node    body    =    node.getFirstChild();    Node  head  =  node.getFirstChild();  Node  body  =  parent.getFirstChild();  Node  head  =  node.getFirstChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    body    =    node.getFirstChild();    Node  head  =  node.getFirstChild();  Node  body  =  parent.getFirstChild();  Node  head  =  node.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        body        =        node.getFirstChild();        Node    head    =    node.getFirstChild();    Node  body  =  parent.getFirstChild();  Node  head  =  node.getFirstChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	177	None	add
329	[BUG]  [BUGGY]          Node    body    =    node.getFirstChild();    Node  head  =  node.getFirstChild();  Node  body  =  node.getFirstChild();  Node  head  =  node.getLastChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    body    =    node.getFirstChild();    Node  head  =  node.getFirstChild();  Node  body  =  node.getFirstChild();  Node  head  =  node.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        body        =        node.getFirstChild();        Node    head    =    node.getFirstChild();    Node  body  =  node.getFirstChild();  Node  head  =  node.getLastChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	177	None	add
330	[BUG]  [BUGGY]          Node    body    =    node.getFirstChild();    Node  head  =  node.getFirstChild();  Node  body  =  parent.getFirstChild();  Node  head  =  parent.getFirstChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    body    =    node.getFirstChild();    Node  head  =  node.getFirstChild();  Node  body  =  parent.getFirstChild();  Node  head  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        body        =        node.getFirstChild();        Node    head    =    node.getFirstChild();    Node  body  =  parent.getFirstChild();  Node  head  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	177	None	add
331	[BUG]  [BUGGY]          Node    body    =    node.getFirstChild();    Node  head  =  node.getFirstChild();  Node  body  =  node.getFirstChild();  Node  head  =  parent.getFirstChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    body    =    node.getFirstChild();    Node  head  =  node.getFirstChild();  Node  body  =  node.getFirstChild();  Node  head  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        body        =        node.getFirstChild();        Node    head    =    node.getFirstChild();    Node  body  =  node.getFirstChild();  Node  head  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	177	None	add
332	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(fromNode,  parent);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(fromNode,    parent);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(fromNode,  parent);	  	compilable	  [FE]  RuntimeException  	58	7	add
333	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(fromNode,  parent);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(fromNode,  parent);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(fromNode,  parent);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(fromNode,    parent);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(fromNode,  parent);	  	compilable	  [FE]  RuntimeException  	58	7	add
334	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(fromNode,  parent);  NodeUtil.removeChild(fromNode);  NodeUtil.removeChild(fromNode,  parent);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(fromNode,  parent);  NodeUtil.removeChild(fromNode);  NodeUtil.removeChild(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(fromNode,    parent);    NodeUtil.removeChild(fromNode);  NodeUtil.removeChild(fromNode,  parent);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	58	None	add
335	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(fromNode,  parent);  NodeUtil.removeChild(fromNode,  parent);  NodeUtil.removeChild(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(fromNode,    parent);    NodeUtil.removeChild(fromNode,  parent);  NodeUtil.removeChild(fromNode,  parent);	  	compilable	  [FE]  RuntimeException  	58	7	add
336	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(fromNode,  parent);  NodeUtil.removeChild(fromNode,  parent);  NodeUtil.removeChild(fromNode,  parent);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(fromNode,  parent);  NodeUtil.removeChild(fromNode,  parent);  NodeUtil.removeChild(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(fromNode,    parent);    NodeUtil.removeChild(fromNode,  parent);  NodeUtil.removeChild(fromNode,  parent);	  	compilable	  [FE]  RuntimeException  	58	7	add
337	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(fromNode,  parent);  NodeUtil.addChildToFront(parent,  fromNode);  NodeUtil.removeChild(fromNode,  parent);  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(fromNode,  parent);  NodeUtil.addChildToFront(parent,  fromNode);  NodeUtil.removeChild(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(fromNode,    parent);    NodeUtil.addChildToFront(parent,  fromNode);  NodeUtil.removeChild(fromNode,  parent);	  	non-compiled	[CE]  cannot  find  symbol	58	None	add
338	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(fromNode,  parent);  NodeUtil.addChildToBack(parent,  fromNode);  NodeUtil.removeChild(fromNode,  parent);  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(fromNode,  parent);  NodeUtil.addChildToBack(parent,  fromNode);  NodeUtil.removeChild(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(fromNode,    parent);    NodeUtil.addChildToBack(parent,  fromNode);  NodeUtil.removeChild(fromNode,  parent);	  	non-compiled	[CE]  cannot  find  symbol	58	None	add
339	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(fromNode,  parent);  NodeUtil.getFinally(parent,  fromNode);  NodeUtil.removeChild(fromNode,  parent);  [CE]  cannot  find  symbol  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(fromNode,  parent);  NodeUtil.getFinally(parent,  fromNode);  NodeUtil.removeChild(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(fromNode,    parent);    NodeUtil.getFinally(parent,  fromNode);  NodeUtil.removeChild(fromNode,  parent);	  	non-compiled	[CE]  cannot  find  symbol	58	None	add
340	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  parent,  astPositionCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int)  [FE]                          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  node,  parent,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  node,  parent,  astPositionCounter);	  return    computeFollowNode(fromNode,    node,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int)	158	None	replace
341	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  parent,  firstSibling);  [CE]  cannot  find  symbol  firstSibling  [FE]                            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  node,  parent,  firstSibling);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  node,  parent,  firstSibling);	  return    computeFollowNode(fromNode,    node,    parent);    	non-compiled	[CE]  cannot  find  symbol  firstSibling	158	None	replace
342	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent.cloneTree(),  node);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  parent.cloneTree(),  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  parent.cloneTree(),  node);	  return    computeFallThrough(fromNode,    parent.cloneTree());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	128	None	replace
343	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  node.cloneTree());  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  node.cloneTree());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  node.cloneTree());	  return    computeFallThrough(fromNode,    parent.cloneTree());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	128	None	replace
344	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent.getFirstChild(),  parent.cloneTree());  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  parent.getFirstChild(),  parent.cloneTree());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  parent.getFirstChild(),  parent.cloneTree());	  return    computeFallThrough(fromNode,    parent.cloneTree());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	128	None	replace
345	[BUG]  [BUGGY]  Node  parent  =  getParentNode(node.getParent());  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getParentNode(node.getParent());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParentNode(node.getParent());	  Node    parent    =    getParentNode(parent.getParent());    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	258	None	replace
346	[BUG]  [BUGGY]  Node  parent  =  getParentNode(parent.getParent(),  node);  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getParentNode(parent.getParent(),  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParentNode(parent.getParent(),  node);	  Node    parent    =    getParentNode(parent.getParent());    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	258	None	replace
347	[BUG]  [BUGGY]  Node  parent  =  getParentNode(parent.getLastChild());  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getParentNode(parent.getLastChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParentNode(parent.getLastChild());	  Node    parent    =    getParentNode(parent.getParent());    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	258	None	replace
348	[BUG]  [BUGGY]  Node  parent  =  getParentNode(fromNode.getParent());  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getParentNode(fromNode.getParent());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParentNode(fromNode.getParent());	  Node    parent    =    getParentNode(parent.getParent());    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	258	None	replace
349	[BUG]  [BUGGY]  Node  body  =  parent.removeFirstChild();  Node  body  =  parent.removeFirstChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.removeFirstChild();  Node  body  =  parent.removeFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    parent.removeFirstChild();    Node  body  =  parent.removeFirstChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	249	None	add
350	[BUG]  [BUGGY]  Node  body  =  parent.removeFirstChild();  Node  parent  =  parent.removeFirstChild();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.removeFirstChild();  Node  parent  =  parent.removeFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    parent.removeFirstChild();    Node  parent  =  parent.removeFirstChild();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	249	None	add
351	[BUG]  [BUGGY]  Node  body  =  parent.removeFirstChild();  Node  body  =  parent.removeLastChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.removeFirstChild();  Node  body  =  parent.removeLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    parent.removeFirstChild();    Node  body  =  parent.removeLastChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	249	None	add
352	[BUG]  [BUGGY]  Node  body  =  parent.removeFirstChild();  Node  body  =  node.removeFirstChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.removeFirstChild();  Node  body  =  node.removeFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    parent.removeFirstChild();    Node  body  =  node.removeFirstChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	249	None	add
353	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.removeFirstChild();  Node  head  =  parent.removeFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node    body    =    parent.removeFirstChild();    Node  head  =  parent.removeFirstChild();	  	compilable	  [FE]  RuntimeException  	249	7	add
354	[BUG]  [BUGGY]  Node  body  =  parent.removeFirstChild();  Node  head  =  parent.removeFirstChild();  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.removeFirstChild();  Node  head  =  parent.removeFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    parent.removeFirstChild();    Node  head  =  parent.removeFirstChild();	  	compilable	  [FE]  RuntimeException  	249	7	add
355	[BUG]  [BUGGY]  Node  nextSibling  =  node.getFirstChild();  Node  nextSibling  =  node.getFirstChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getFirstChild();  Node  nextSibling  =  node.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    node.getFirstChild();    Node  nextSibling  =  node.getFirstChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	3	None	add
356	[BUG]  [BUGGY]  Node  nextSibling  =  node.getFirstChild();  Node  nextSibling  =  node.getLastChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getFirstChild();  Node  nextSibling  =  node.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    node.getFirstChild();    Node  nextSibling  =  node.getLastChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	3	None	add
357	[BUG]  [BUGGY]  Node  nextSibling  =  node.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    node.getFirstChild();    Node  nextSibling  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	3	None	add
358	[BUG]  [BUGGY]  Node  nextSibling  =  node.getFirstChild();  Node  nextSibling  =  parent.getLastChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getFirstChild();  Node  nextSibling  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    node.getFirstChild();    Node  nextSibling  =  parent.getLastChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	3	None	add
359	[BUG]  [BUGGY]  Node  nextSibling  =  node.getFirstChild();  Node  nextSibling  =  child.getFirstChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getFirstChild();  Node  nextSibling  =  child.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    node.getFirstChild();    Node  nextSibling  =  child.getFirstChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	3	None	add
360	[BUG]  [BUGGY]  Node  nextSibling  =  node.getFirstChild();  Node  parent  =  node.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getFirstChild();  Node  parent  =  node.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    node.getFirstChild();    Node  parent  =  node.getFirstChild();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	3	None	add
361	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFollowNode(fromNode,    parent);    }    	compilable	  [FE]  RuntimeException  	229	7	replace
362	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFollowNode(fromNode,    parent);    }    	compilable	  [FE]  RuntimeException  	229	7	replace
363	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFollowNode(fromNode,    parent);    }    	compilable	  [FE]  RuntimeException  	229	7	replace
364	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFollowNode(fromNode,    parent);    }    	compilable	  [FE]  RuntimeException  	229	7	replace
365	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(fromNode,  parent);  }  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(fromNode,  parent);  }	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	229	None	replace
366	[BUG]  [BUGGY]  Node  body  =  child.getFirstChild();  [CE]  cannot  find  symbol  child  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  child.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  child.getFirstChild();	          Node    body    =    node.getFirstChild();    Node    body    =    child.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  child	105	None	replace
367	[BUG]  [BUGGY]  Traverse.traverse(compiler,  node,  this);  Traverse.traverse(compiler,  fromNode,  this);  [CE]  cannot  find  symbol  Traverse  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Traverse.traverse(compiler,  node,  this);  Traverse.traverse(compiler,  fromNode,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Traverse.traverse(compiler,  node,  this);  Traverse.traverse(compiler,  fromNode,  this);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    child,    this);    	non-compiled	[CE]  cannot  find  symbol  Traverse	182	None	replace
368	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  parent,  this);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    child,    this);    	compilable	  [FE]  StackOverflowError  	182	7	replace
369	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [FE]  StackOverflowError  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  parent,  this);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    child,    this);    	compilable	  [FE]  StackOverflowError  	182	7	replace
370	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  return  computeFallThrough(node.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  parent.getFirstChild();  return  computeFallThrough(node.getLastChild());	  return    computeFallThrough(node.getFirstChild());    Node    nextSibling    =    parent.getFirstChild();    return    computeFallThrough(node.getFirstChild());    	compilable	  [FE]  AssertionFailedError  	274	6	replace
371	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  return  computeFallThrough(node.getLastChild());  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  return  computeFallThrough(node.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getFirstChild();  return  computeFallThrough(node.getLastChild());	  return    computeFallThrough(node.getFirstChild());    Node    nextSibling    =    parent.getFirstChild();    return    computeFallThrough(node.getFirstChild());    	compilable	  [FE]  AssertionFailedError  	274	6	replace
372	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getFirstChild();  return  computeFallThrough(nextSibling.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  node.getFirstChild();  return  computeFallThrough(nextSibling.getLastChild());	  return    computeFallThrough(node.getFirstChild());    Node    nextSibling    =    parent.getFirstChild();    return    computeFallThrough(node.getFirstChild());    	compilable	  [FE]  AssertionFailedError  	274	6	replace
373	[BUG]  [BUGGY]  Node  nextSibling  =  node.getFirstChild();  return  computeFallThrough(nextSibling.getLastChild());  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getFirstChild();  return  computeFallThrough(nextSibling.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  node.getFirstChild();  return  computeFallThrough(nextSibling.getLastChild());	  return    computeFallThrough(node.getFirstChild());    Node    nextSibling    =    parent.getFirstChild();    return    computeFallThrough(node.getFirstChild());    	compilable	  [FE]  AssertionFailedError  	274	6	replace
374	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(node.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(node.getLastChild());	  return    computeFallThrough(node.getFirstChild());    Node    nextSibling    =    parent.getFirstChild();    return    computeFallThrough(node.getFirstChild());    	compilable	  [FE]  StackOverflowError  	274	7	replace
375	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(node.getLastChild());  [FE]  StackOverflowError  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(node.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(node.getLastChild());	  return    computeFallThrough(node.getFirstChild());    Node    nextSibling    =    parent.getFirstChild();    return    computeFallThrough(node.getFirstChild());    	compilable	  [FE]  StackOverflowError  	274	7	replace
376	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  parent);	  return    computeFollowNode(fromNode,    node);    NodeTraversal.traverse(compiler,    node,    thenBlock);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	205	None	replace
377	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPositionCounter);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int)  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  astPositionCounter);	  return    computeFollowNode(fromNode,    node);    NodeTraversal.traverse(compiler,    node,    thenBlock);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int)	205	None	replace
378	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  node);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  parent,  node);	  return    computeFollowNode(fromNode,    node);    NodeTraversal.traverse(compiler,    node,    thenBlock);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	205	None	replace
379	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  firstChild);  [CE]  cannot  find  symbol  firstChild  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  firstChild);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  firstChild);	  return    computeFollowNode(fromNode,    node);    NodeTraversal.traverse(compiler,    node,    thenBlock);    	non-compiled	[CE]  cannot  find  symbol  firstChild	205	None	replace
380	[BUG]  [BUGGY]  AstControlFlowGraph  <  Node>  cfg  =  compiler.getCfg();  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  AstControlFlowGraph  <  Node>  cfg  =  compiler.getCfg();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	AstControlFlowGraph  <  Node>  cfg  =  compiler.getCfg();	          NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph    <    Node>    cfg    =    compiler.getCfg();    	non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	257	None	replace
381	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getCfg();  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getCfg();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  parent,  this);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getCfg();	          NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph    <    Node>    cfg    =    compiler.getCfg();    	non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	257	None	replace
382	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  parent);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getCfg();  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node)  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  parent);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getCfg();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  this,  parent);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getCfg();	          NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph    <    Node>    cfg    =    compiler.getCfg();    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node)	257	None	replace
383	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  astPositionCounter);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getCfg();  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,int)  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  astPositionCounter);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getCfg();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  this,  astPositionCounter);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getCfg();	          NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph    <    Node>    cfg    =    compiler.getCfg();    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,int)	257	None	replace
384	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(node);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);	  	compilable	  [FE]  RuntimeException  	235	7	add
385	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(node);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);	  	compilable	  [FE]  RuntimeException  	235	7	add
386	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  NodeUtil.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  NodeUtil.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(node);    NodeUtil.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	235	None	add
387	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(node);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);	  	compilable	  [FE]  RuntimeException  	235	6	add
388	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(node);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);	  	compilable	  [FE]  RuntimeException  	235	6	add
389	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  NodeUtil.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  NodeUtil.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(node);    NodeUtil.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	235	None	add
390	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  NodeUtil.removeChild(fromNode,  parent);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(node);    NodeUtil.removeChild(fromNode,  parent);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);	  	compilable	  [FE]  RuntimeException  	235	7	add
391	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  NodeUtil.removeChild(fromNode,  parent);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  NodeUtil.removeChild(fromNode,  parent);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(node);    NodeUtil.removeChild(fromNode,  parent);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);	  	compilable	  [FE]  RuntimeException  	235	7	add
392	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  NodeUtil.removeChild(parent);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  NodeUtil.removeChild(parent);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(node);    NodeUtil.removeChild(parent);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	235	None	add
393	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  priorities,  nodePriorities);  [CE]  cannot  find  symbol  priorities  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  priorities,  nodePriorities);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  priorities,  nodePriorities);	  return    computeFollowNode(fromNode,    parent,    nodePriorities,    priorityCounter);    	non-compiled	[CE]  cannot  find  symbol  priorities	31	None	replace
394	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  exceptionHandler,  priorityCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Map<DiGraphNode<Node,Branch>,Integer>,Deque<Node>,int)  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  exceptionHandler,  priorityCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  nodePriorities,  exceptionHandler,  priorityCounter);	  return    computeFollowNode(fromNode,    parent,    nodePriorities,    priorityCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Map<DiGraphNode<Node,Branch>,Integer>,Deque<Node>,int)	31	None	replace
395	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  nodePriorities,  parent,  priorityCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Map<DiGraphNode<Node,Branch>,Integer>,Node,int)  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  nodePriorities,  parent,  priorityCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  nodePriorities,  parent,  priorityCounter);	  return    computeFollowNode(fromNode,    parent,    nodePriorities,    priorityCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Map<DiGraphNode<Node,Branch>,Integer>,Node,int)	31	None	replace
396	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  fromNode.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  fromNode.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFallThrough(parent.getLastChild());    }    	compilable	  [FE]  RuntimeException  	223	7	replace
397	[BUG]  [BUGGY]  Node  nextSibling  =  fromNode.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  fromNode.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  fromNode.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFallThrough(parent.getLastChild());    }    	compilable	  [FE]  RuntimeException  	223	7	replace
398	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFallThrough(parent.getLastChild());    }    	compilable	  [FE]  RuntimeException  	223	7	replace
399	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFallThrough(parent.getLastChild());    }    	compilable	  [FE]  RuntimeException  	223	7	replace
400	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getFirstChild();  Node  head  =  node.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  body  =  parent.getFirstChild();  Node  head  =  node.getFirstChild();	          Node    body    =    node.getFirstChild();    Node    head    =    node.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	178	5	replace
401	[BUG]  [BUGGY]  Node  body  =  parent.getFirstChild();  Node  head  =  node.getFirstChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getFirstChild();  Node  head  =  node.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  parent.getFirstChild();  Node  head  =  node.getFirstChild();	          Node    body    =    node.getFirstChild();    Node    head    =    node.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	178	5	replace
402	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  node.getLastChild();  Node  head  =  node.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  body  =  node.getLastChild();  Node  head  =  node.getFirstChild();	          Node    body    =    node.getFirstChild();    Node    head    =    node.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	178	5	replace
403	[BUG]  [BUGGY]  Node  body  =  node.getLastChild();  Node  head  =  node.getFirstChild();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  node.getLastChild();  Node  head  =  node.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  node.getLastChild();  Node  head  =  node.getFirstChild();	          Node    body    =    node.getFirstChild();    Node    head    =    node.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	178	5	replace
404	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getLastChild();  Node  head  =  node.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  body  =  parent.getLastChild();  Node  head  =  node.getFirstChild();	          Node    body    =    node.getFirstChild();    Node    head    =    node.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	178	5	replace
405	[BUG]  [BUGGY]  Node  body  =  parent.getLastChild();  Node  head  =  node.getFirstChild();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getLastChild();  Node  head  =  node.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  parent.getLastChild();  Node  head  =  node.getFirstChild();	          Node    body    =    node.getFirstChild();    Node    head    =    node.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	178	5	replace
406	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  head  =  node.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  body  =  fromNode.getFirstChild();  Node  head  =  node.getFirstChild();	          Node    body    =    node.getFirstChild();    Node    head    =    node.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	178	5	replace
407	[BUG]  [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  head  =  node.getFirstChild();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  head  =  node.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  fromNode.getFirstChild();  Node  head  =  node.getFirstChild();	          Node    body    =    node.getFirstChild();    Node    head    =    node.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	178	5	replace
408	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getLastChild());  return  computeFallThrough(fromNode.getLastChild());  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getLastChild());  return  computeFallThrough(fromNode.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(fromNode.getLastChild());    return  computeFallThrough(fromNode.getLastChild());	  	non-compiled	[CE]  unreachable  statement	19	None	add
409	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getLastChild());  Node  fromNode  =  parent.getFirstChild();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getLastChild());  Node  fromNode  =  parent.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(fromNode.getLastChild());    Node  fromNode  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	19	None	add
410	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getLastChild());  Node  fromNode  =  node.getFirstChild();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getLastChild());  Node  fromNode  =  node.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(fromNode.getLastChild());    Node  fromNode  =  node.getFirstChild();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	19	None	add
411	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getLastChild());  Node  fromNode  =  parent.getFirstChild();  return  computeFallThrough(fromNode.getLastChild());  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getLastChild());  Node  fromNode  =  parent.getFirstChild();  return  computeFallThrough(fromNode.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(fromNode.getLastChild());    Node  fromNode  =  parent.getFirstChild();  return  computeFallThrough(fromNode.getLastChild());	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	19	None	add
412	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getLastChild());  Node  fromNode  =  parent.getParent();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getLastChild());  Node  fromNode  =  parent.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(fromNode.getLastChild());    Node  fromNode  =  parent.getParent();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	19	None	add
413	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getLastChild());  Node  fromNode  =  node.getFirstChild();  return  computeFallThrough(fromNode.getLastChild());  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getLastChild());  Node  fromNode  =  node.getFirstChild();  return  computeFallThrough(fromNode.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(fromNode.getLastChild());    Node  fromNode  =  node.getFirstChild();  return  computeFallThrough(fromNode.getLastChild());	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	19	None	add
414	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node.getLastChild());  Node  parent  =  node.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  node.getLastChild());  Node  parent  =  node.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    node.getLastChild());    Node  parent  =  node.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	83	None	add
415	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node.getLastChild());  Node  body  =  node.getLastChild();  [CE]  unreachable  statement  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  node.getLastChild());  Node  body  =  node.getLastChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    node.getLastChild());    Node  body  =  node.getLastChild();	  	non-compiled	[CE]  unreachable  statement	83	None	add
416	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node.getLastChild());  NodeTraversal.traverse(compiler,  node,  this);  [CE]  unreachable  statement  [FE]        StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  node.getLastChild());  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    node.getLastChild());    NodeTraversal.traverse(compiler,  node,  this);	  	non-compiled	[CE]  unreachable  statement	83	None	add
417	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node.getLastChild());  Node  node  =  parent.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  node.getLastChild());  Node  node  =  parent.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    node.getLastChild());    Node  node  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	83	None	add
418	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node.getLastChild());  Node  body  =  node.getFirstChild();  [CE]  unreachable  statement  [FE]            StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  node.getLastChild());  Node  body  =  node.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    node.getLastChild());    Node  body  =  node.getFirstChild();	  	non-compiled	[CE]  unreachable  statement	83	None	add
419	[BUG]  [BUGGY]  NodeUtil.addChildToFront(parent,  node);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.addChildToFront(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.addChildToFront(parent,  node);	          NodeUtil.removeChild(parent,    node);    NodeUtil.addChildToFront(parent,    node);    	non-compiled	[CE]  cannot  find  symbol	196	None	replace
420	[BUG]  [BUGGY]  NodeUtil.removeChild(node,  parent);  NodeUtil.addChildToFront(parent,  node);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(node,  parent);  NodeUtil.addChildToFront(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(node,  parent);  NodeUtil.addChildToFront(parent,  node);	          NodeUtil.removeChild(parent,    node);    NodeUtil.addChildToFront(parent,    node);    	non-compiled	[CE]  cannot  find  symbol	196	None	replace
421	[BUG]  [BUGGY]  NodeUtil.removeChild(node);  NodeUtil.addChildToFront(parent,  node);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(node);  NodeUtil.addChildToFront(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(node);  NodeUtil.addChildToFront(parent,  node);	          NodeUtil.removeChild(parent,    node);    NodeUtil.addChildToFront(parent,    node);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	196	None	replace
422	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.addChildToFront(parent,  node);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.addChildToFront(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  parent);  NodeUtil.addChildToFront(parent,  node);	          NodeUtil.removeChild(parent,    node);    NodeUtil.addChildToFront(parent,    node);    	non-compiled	[CE]  cannot  find  symbol	196	None	replace
423	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent.getLastChild(),  node);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  parent.getLastChild(),  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  parent.getLastChild(),  node);	  return    computeFallThrough(fromNode,    parent.getLastChild());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	82	None	replace
424	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent.getLastChild(),  astPositionCounter);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  parent.getLastChild(),  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  parent.getLastChild(),  astPositionCounter);	  return    computeFallThrough(fromNode,    parent.getLastChild());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	82	None	replace
425	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  nextSibling  =  parent.getNext();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  nextSibling  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFallThrough(parent.getLastChild());    }    Node  nextSibling  =  parent.getNext();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	222	None	add
426	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  parent  =  nextSibling.getNext();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  parent  =  nextSibling.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFallThrough(parent.getLastChild());    }    Node  parent  =  nextSibling.getNext();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	222	None	add
427	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  nextSibling  =  parent.getFirstChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  nextSibling  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFallThrough(parent.getLastChild());    }    Node  nextSibling  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	222	None	add
428	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  parent  =  nextSibling.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  parent  =  nextSibling.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFallThrough(parent.getLastChild());    }    Node  parent  =  nextSibling.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	222	None	add
429	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  parent  =  node.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  parent  =  node.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFallThrough(parent.getLastChild());    }    Node  parent  =  node.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	222	None	add
430	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  nextSibling  =  parent.getParent();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  nextSibling  =  parent.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFallThrough(parent.getLastChild());    }    Node  nextSibling  =  parent.getParent();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	222	None	add
431	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  astPositionCounter,  node);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,int,Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  astPositionCounter,  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  astPositionCounter,  node);	  return    computeFollowNode(fromNode,    parent,    node,    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,int,Node)	154	None	replace
432	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  priorityCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int)  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  priorityCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  node,  priorityCounter);	  return    computeFollowNode(fromNode,    parent,    node,    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int)	154	None	replace
433	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  astPositionCounter,  priorityCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int,int)  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  astPositionCounter,  priorityCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  node,  astPositionCounter,  priorityCounter);	  return    computeFollowNode(fromNode,    parent,    node,    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int,int)	154	None	replace
434	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  priorityCounter,  astPositionCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int,int)  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  priorityCounter,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  node,  priorityCounter,  astPositionCounter);	  return    computeFollowNode(fromNode,    parent,    node,    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int,int)	154	None	replace
435	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  astPositionCounter,  priorityComparator);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int,Comparator<DiGraphNode<Node,Branch>>)  [FE]                          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  astPositionCounter,  priorityComparator);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  node,  astPositionCounter,  priorityComparator);	  return    computeFollowNode(fromNode,    parent,    node,    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int,Comparator<DiGraphNode<Node,Branch>>)	154	None	replace
436	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  nextSibling  =  parent.getNext();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  nextSibling  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFallThrough(nextSibling.getLastChild());    }    Node  nextSibling  =  parent.getNext();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	220	None	add
437	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  parent  =  nextSibling.getNext();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  parent  =  nextSibling.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFallThrough(nextSibling.getLastChild());    }    Node  parent  =  nextSibling.getNext();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	220	None	add
438	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  parent  =  nextSibling.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  parent  =  nextSibling.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFallThrough(nextSibling.getLastChild());    }    Node  parent  =  nextSibling.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	220	None	add
439	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  nextSibling  =  parent.getFirstChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  nextSibling  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFallThrough(nextSibling.getLastChild());    }    Node  nextSibling  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	220	None	add
440	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  parent  =  node.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  parent  =  node.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFallThrough(nextSibling.getLastChild());    }    Node  parent  =  node.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	220	None	add
441	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  fromNode  =  parent.getParent();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  fromNode  =  parent.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFallThrough(nextSibling.getLastChild());    }    Node  fromNode  =  parent.getParent();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	220	None	add
442	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  node.getLastChild();	  Node    nextSibling    =    parent.getLastChild();    	compilable	  [FE]  AssertionFailedError  	2	5	replace
443	[BUG]  [BUGGY]  Node  nextSibling  =  node.getLastChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  node.getLastChild();	  Node    nextSibling    =    parent.getLastChild();    	compilable	  [FE]  AssertionFailedError  	2	5	replace
444	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  fromNode.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  fromNode.getLastChild();	  Node    nextSibling    =    parent.getLastChild();    	compilable	  [FE]  AssertionFailedError  	2	5	replace
445	[BUG]  [BUGGY]  Node  nextSibling  =  fromNode.getLastChild();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  fromNode.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  fromNode.getLastChild();	  Node    nextSibling    =    parent.getLastChild();    	compilable	  [FE]  AssertionFailedError  	2	5	replace
446	[BUG]  [BUGGY]  Node  node  =  parent.getFirstChild();  return  computeFollowNode(node.getFirstChild());  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  node  =  parent.getFirstChild();  return  computeFollowNode(node.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  node  =  parent.getFirstChild();  return  computeFollowNode(node.getFirstChild());	  return    computeFallThrough(node.getFirstChild());    Node    node    =    parent.getFirstChild();    return    computeFollowNode(node.getFirstChild());    	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	12	None	replace
447	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  node  =  parent.getFirstChild();  return  computeFollowNode(node.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	node  =  parent.getFirstChild();  return  computeFollowNode(node.getFirstChild());	  return    computeFallThrough(node.getFirstChild());    Node    node    =    parent.getFirstChild();    return    computeFollowNode(node.getFirstChild());    	compilable	  [FE]  StackOverflowError  	12	7	replace
448	[BUG]  [BUGGY]  node  =  parent.getFirstChild();  return  computeFollowNode(node.getFirstChild());  [FE]  StackOverflowError  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  node  =  parent.getFirstChild();  return  computeFollowNode(node.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	node  =  parent.getFirstChild();  return  computeFollowNode(node.getFirstChild());	  return    computeFallThrough(node.getFirstChild());    Node    node    =    parent.getFirstChild();    return    computeFollowNode(node.getFirstChild());    	compilable	  [FE]  StackOverflowError  	12	7	replace
449	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  firstChild);  [CE]  cannot  find  symbol  firstChild  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  firstChild);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  nodePriorities,  firstChild);	  return    computeFollowNode(fromNode,    parent,    nodePriorities,    firstSibling);    	non-compiled	[CE]  cannot  find  symbol  firstChild	33	None	replace
450	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  curHandler);  [CE]  cannot  find  symbol  curHandler  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  curHandler);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  nodePriorities,  curHandler);	  return    computeFollowNode(fromNode,    parent,    nodePriorities,    firstSibling);    	non-compiled	[CE]  cannot  find  symbol  curHandler	33	None	replace
451	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  FINALLY);  [CE]  cannot  find  symbol  FINALLY  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  FINALLY);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  nodePriorities,  FINALLY);	  return    computeFollowNode(fromNode,    parent,    nodePriorities,    firstSibling);    	non-compiled	[CE]  cannot  find  symbol  FINALLY	33	None	replace
452	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  lastJump);  [CE]  cannot  find  symbol  lastJump  [FE]                          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  lastJump);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  nodePriorities,  lastJump);	  return    computeFollowNode(fromNode,    parent,    nodePriorities,    firstSibling);    	non-compiled	[CE]  cannot  find  symbol  lastJump	33	None	replace
453	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode,  parent);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode,  parent);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(parent,    fromNode);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	233	None	replace
454	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(parent,  fromNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(parent,  fromNode);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(parent,    fromNode);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	233	None	replace
455	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  parent);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  parent);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(parent,    fromNode);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	233	None	replace
456	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  parent);  parent.removeChild(fromNode,  parent);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  parent);  parent.removeChild(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  parent);  parent.removeChild(fromNode,  parent);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(parent,    fromNode);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	233	None	replace
457	[BUG]  [BUGGY]  Node  parent  =  node.getParent();  return  computeFollowNode(fromNode,  parent);  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  node.getParent();  return  computeFollowNode(fromNode,  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  node.getParent();  return  computeFollowNode(fromNode,  parent);	  return    computeFollowNode(fromNode,    parent.getFirstChild());    Node    parent    =    node.getParent();    return    computeFallThrough(parent.getFirstChild());    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	247	None	replace
458	[BUG]  [BUGGY]  Node  parent  =  node.getParent();  return  computeFollowNode(parent,  fromNode);  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  node.getParent();  return  computeFollowNode(parent,  fromNode);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  node.getParent();  return  computeFollowNode(parent,  fromNode);	  return    computeFollowNode(fromNode,    parent.getFirstChild());    Node    parent    =    node.getParent();    return    computeFallThrough(parent.getFirstChild());    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	247	None	replace
459	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild(),  node.getParent());  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild(),  node.getParent());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent.getLastChild(),  node.getParent());	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    parent    =    node.getParent();    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)	74	None	replace
460	[BUG]  [BUGGY]  Node  parent  =  node.getParent();  return  computeFallThrough(parent.getLastChild(),  parent.getLastChild());  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  node.getParent();  return  computeFallThrough(parent.getLastChild(),  parent.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  node.getParent();  return  computeFallThrough(parent.getLastChild(),  parent.getLastChild());	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    parent    =    node.getParent();    return    computeFallThrough(parent.getLastChild(),    parent.getLastChild());    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	79	None	replace
461	[BUG]  [BUGGY]  Node  parent  =  node.getParent();  return  computeFallThrough(parent.getFirstChild(),  parent.getLastChild());  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  node.getParent();  return  computeFallThrough(parent.getFirstChild(),  parent.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  node.getParent();  return  computeFallThrough(parent.getFirstChild(),  parent.getLastChild());	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    parent    =    node.getParent();    return    computeFallThrough(parent.getLastChild(),    parent.getLastChild());    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	79	None	replace
462	[BUG]  [BUGGY]  Node  parent  =  node.getParent();  return  computeFallThrough(node.getLastChild(),  parent.getLastChild());  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  node.getParent();  return  computeFallThrough(node.getLastChild(),  parent.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  node.getParent();  return  computeFallThrough(node.getLastChild(),  parent.getLastChild());	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    parent    =    node.getParent();    return    computeFallThrough(parent.getLastChild(),    parent.getLastChild());    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	79	None	replace
463	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node)  [FE]                  StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  this,  parent);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    return    computeFallThrough(fromNode,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node)	148	None	replace
464	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  parent);  return  computeFallThrough(fromNode,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node)  [FE]                    StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  parent);  return  computeFallThrough(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  this,  parent);  return  computeFallThrough(fromNode,  parent);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    return    computeFallThrough(fromNode,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node)	148	None	replace
465	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  return  computeFallThrough(fromNode,  parent);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                      StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  return  computeFallThrough(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  this);  return  computeFallThrough(fromNode,  parent);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    return    computeFallThrough(fromNode,    parent);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	148	None	replace
466	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  return  computeFallThrough(fromNode,  parent);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  return  computeFallThrough(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  parent,  this);  return  computeFallThrough(fromNode,  parent);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    return    computeFallThrough(fromNode,    parent);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	148	None	replace
467	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  null);  return  computeFallThrough(fromNode,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,<null>)  [FE]                          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  null);  return  computeFallThrough(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  this,  null);  return  computeFallThrough(fromNode,  parent);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    return    computeFallThrough(fromNode,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,<null>)	148	None	replace
468	[BUG]  [BUGGY]  Node  parent  =  nextSibling.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  nextSibling.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  nextSibling.getFirstChild();	          Node    nextSibling    =    parent.getFirstChild();    Node    parent    =    nextSibling.getFirstChild();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	122	None	replace
469	[BUG]  [BUGGY]  Node  parent  =  getParent(parent,  node);  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getParent(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParent(parent,  node);	  Node    parent    =    getParent(parent);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	192	None	replace
470	[BUG]  [BUGGY]  Node  parent  =  getParent(parent.getFirstChild());  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getParent(parent.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParent(parent.getFirstChild());	  Node    parent    =    getParent(parent);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	192	None	replace
471	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  parent  =  parent.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	parent  =  parent.getParent();	  return    computeFollowNode(fromNode,    parent.getFirstChild());    Node    parent    =    node.getParent();    if(parent!=    null)    {    return    computeFollowNode(fromNode,    parent.getLastChild());    }    	compilable	  [FE]  AssertionFailedError  	53	5	replace
472	[BUG]  [BUGGY]  parent  =  parent.getParent();  [FE]  AssertionFailedError  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  parent  =  parent.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	parent  =  parent.getParent();	  return    computeFollowNode(fromNode,    parent.getFirstChild());    Node    parent    =    node.getParent();    if(parent!=    null)    {    return    computeFollowNode(fromNode,    parent.getLastChild());    }    	compilable	  [FE]  AssertionFailedError  	53	5	replace
473	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  node.getFirstChild());  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  node.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  node.getFirstChild());	  return    computeFollowNode(fromNode,    parent.getFirstChild());    Node    parent    =    node.getParent();    if(parent!=    null)    {    return    computeFollowNode(fromNode,    parent.getLastChild());    }    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	53	None	replace
474	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  return    computeFollowNode(fromNode,    parent.getFirstChild());    Node    parent    =    node.getParent();    if(parent!=    null)    {    return    computeFollowNode(fromNode,    parent.getLastChild());    }    	compilable	  [FE]  RuntimeException  	53	7	replace
475	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]                  StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  return    computeFollowNode(fromNode,    parent.getFirstChild());    Node    parent    =    node.getParent();    if(parent!=    null)    {    return    computeFollowNode(fromNode,    parent.getLastChild());    }    	compilable	  [FE]  RuntimeException  	53	7	replace
476	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    NodeUtil.removeChild(parent,  node);	  	compilable	  [FE]  RuntimeException  	270	7	add
477	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(parent,  node);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    NodeUtil.removeChild(parent,  node);	  	compilable	  [FE]  RuntimeException  	270	7	add
478	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	270	7	add
479	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	270	7	add
480	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FOR);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FOR);	  	compilable	  [FE]  RuntimeException  	270	7	add
481	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FOR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FOR);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FOR);	  	compilable	  [FE]  RuntimeException  	270	7	add
482	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	270	7	add
483	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	270	7	add
484	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	270	7	add
485	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	270	7	add
486	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	270	7	add
487	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	270	7	add
488	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild());  Node  body  =  parent.getLastChild();  [CE]  unreachable  statement  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild());  Node  body  =  parent.getLastChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent.getFirstChild());  Node  body  =  parent.getLastChild();	  return    computeFollowNode(fromNode,    parent.getFirstChild());    Node    body    =    parent.getFirstChild();    	non-compiled	[CE]  unreachable  statement	244	None	replace
489	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling    ==    null)    {    return    computeFallThrough(nextSibling.getLastChild());    }    	compilable	  [FE]  AssertionFailedError  	225	5	replace
490	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling    ==    null)    {    return    computeFallThrough(nextSibling.getLastChild());    }    	compilable	  [FE]  AssertionFailedError  	225	5	replace
491	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  finallyMap,  node);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Multimap<Node,Node>,Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  finallyMap,  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  finallyMap,  node);	  return    computeFollowNode(fromNode,    parent,    node,    finallyMap);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Multimap<Node,Node>,Node)	209	None	replace
492	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  finallyMap,  astPositionCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>,int)  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  finallyMap,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  node,  finallyMap,  astPositionCounter);	  return    computeFollowNode(fromNode,    parent,    node,    finallyMap);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>,int)	209	None	replace
493	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  parent,  finallyMap);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>)  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  node,  parent,  finallyMap);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  node,  parent,  finallyMap);	  return    computeFollowNode(fromNode,    parent,    node,    finallyMap);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>)	209	None	replace
494	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  finallyMap,  firstChild);  [CE]  cannot  find  symbol  firstChild  [FE]                          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  finallyMap,  firstChild);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  node,  finallyMap,  firstChild);	  return    computeFollowNode(fromNode,    parent,    node,    finallyMap);    	non-compiled	[CE]  cannot  find  symbol  firstChild	209	None	replace
495	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  finallyMap,  thenBlock);  [CE]  cannot  find  symbol  thenBlock  [FE]                            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  finallyMap,  thenBlock);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  node,  finallyMap,  thenBlock);	  return    computeFollowNode(fromNode,    parent,    node,    finallyMap);    	non-compiled	[CE]  cannot  find  symbol  thenBlock	209	None	replace
496	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  node);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node)  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  parent,  this,  node);	  NodeTraversal.traverse(compiler,    node,    this,    toNode);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node)	172	None	replace
497	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  toNode);  [CE]  cannot  find  symbol  toNode  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  toNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  parent,  this,  toNode);	  NodeTraversal.traverse(compiler,    node,    this,    toNode);    	non-compiled	[CE]  cannot  find  symbol  toNode	172	None	replace
498	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,ControlFlowAnalysis)  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  parent,  this);	  NodeTraversal.traverse(compiler,    node,    this,    toNode);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,ControlFlowAnalysis)	172	None	replace
499	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(fromNode);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);	  	compilable	  [FE]  RuntimeException  	60	7	add
500	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(fromNode);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);	  	compilable	  [FE]  RuntimeException  	60	7	add
501	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(fromNode);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);	  	compilable	  [FE]  RuntimeException  	60	6	add
502	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(fromNode);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);	  	compilable	  [FE]  RuntimeException  	60	6	add
503	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  NodeUtil.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  NodeUtil.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(fromNode);    NodeUtil.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	60	None	add
504	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  NodeUtil.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  NodeUtil.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(fromNode);    NodeUtil.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	60	None	add
505	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(fromNode);    NodeUtil.removeChild(parent);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	60	None	add
506	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(fromNode);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);	  	compilable	  [FE]  RuntimeException  	60	7	add
507	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(fromNode);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);	  	compilable	  [FE]  RuntimeException  	60	7	add
508	[BUG]  [BUGGY]  Node  fromNode  =  parent.getFirstChild();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  fromNode  =  parent.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  fromNode  =  parent.getFirstChild();	  return    computeFollowNode(fromNode,    node);    Node    fromNode    =    parent.getFirstChild();    	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	110	None	replace
509	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  fromNode  =  parent.getFirstChild();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                  StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  fromNode  =  parent.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent);  Node  fromNode  =  parent.getFirstChild();	  return    computeFollowNode(fromNode,    node);    Node    fromNode    =    parent.getFirstChild();    	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	110	None	replace
510	[BUG]  [BUGGY]  Node  fromNode  =  parent.getLastChild();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                    StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  fromNode  =  parent.getLastChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  fromNode  =  parent.getLastChild();	  return    computeFollowNode(fromNode,    node);    Node    fromNode    =    parent.getFirstChild();    	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	110	None	replace
511	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(node,    parent);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  parent);	  	compilable	  [FE]  RuntimeException  	194	7	add
512	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  parent);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(node,    parent);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  parent);	  	compilable	  [FE]  RuntimeException  	194	7	add
513	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(node,    parent);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  parent);	  	compilable	  [FE]  RuntimeException  	194	7	add
514	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  parent);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(node,    parent);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  parent);	  	compilable	  [FE]  RuntimeException  	194	7	add
515	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(node);  NodeUtil.removeChild(parent,  node);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(node);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(node,    parent);    NodeUtil.removeChild(node);  NodeUtil.removeChild(parent,  node);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	194	None	add
516	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(node,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(node,    parent);    NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(node,  parent);	  	compilable	  [FE]  RuntimeException  	194	7	add
517	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(node,  parent);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(node,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(node,    parent);    NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(node,  parent);	  	compilable	  [FE]  RuntimeException  	194	7	add
518	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(node);  NodeUtil.removeChild(parent,  parent);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(node);  NodeUtil.removeChild(parent,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(node,    parent);    NodeUtil.removeChild(node);  NodeUtil.removeChild(parent,  parent);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	194	None	add
519	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(node,    parent);    NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  parent);	  	compilable	  [FE]  RuntimeException  	194	7	add
520	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  parent);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(node,    parent);    NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  parent);	  	compilable	  [FE]  RuntimeException  	194	7	add
521	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(parent.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	return  computeFollowNode(parent.getLastChild());	  return    computeFollowNode(fromNode.getLastChild());    	compilable	  [FE]  AssertionFailedError  	35	3	replace
522	[BUG]  [BUGGY]  return  computeFollowNode(parent.getLastChild());  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(parent.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(parent.getLastChild());	  return    computeFollowNode(fromNode.getLastChild());    	compilable	  [FE]  AssertionFailedError  	35	3	replace
523	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(node);    	compilable	  [FE]  RuntimeException  	236	6	replace
524	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(node);    	compilable	  [FE]  RuntimeException  	236	6	replace
525	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  ParentUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  [CE]  cannot  find  symbol  ParentUtil  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  ParentUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  fromNode);  ParentUtil.removeChild(parent,  fromNode);  parent.removeChild(node);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(node);    	non-compiled	[CE]  cannot  find  symbol  ParentUtil	236	None	replace
526	[BUG]  [BUGGY]  Node  body  =  node.getLastChild();  Node  body  =  node.getLastChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  node.getLastChild();  Node  body  =  node.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    node.getLastChild();    Node  body  =  node.getLastChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	95	None	add
527	[BUG]  [BUGGY]  Node  body  =  node.getLastChild();  Node  body  =  parent.getLastChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  node.getLastChild();  Node  body  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    node.getLastChild();    Node  body  =  parent.getLastChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	95	None	add
528	[BUG]  [BUGGY]  Node  body  =  node.getLastChild();  Node  body  =  node.getFirstChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  node.getLastChild();  Node  body  =  node.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    node.getLastChild();    Node  body  =  node.getFirstChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	95	None	add
529	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  node.getLastChild();  Node  head  =  node.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node    body    =    node.getLastChild();    Node  head  =  node.getLastChild();	  	compilable	  [FE]  AssertionFailedError  	95	3	add
530	[BUG]  [BUGGY]  Node  body  =  node.getLastChild();  Node  head  =  node.getLastChild();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  node.getLastChild();  Node  head  =  node.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    node.getLastChild();    Node  head  =  node.getLastChild();	  	compilable	  [FE]  AssertionFailedError  	95	3	add
531	[BUG]  [BUGGY]  Node  body  =  node.getLastChild();  Node  body  =  child.getLastChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  node.getLastChild();  Node  body  =  child.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    node.getLastChild();    Node  body  =  child.getLastChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	95	None	add
532	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  nodeUtil.removeChild(parent,  fromNode);  [CE]  cannot  find  symbol  nodeUtil  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  nodeUtil.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  fromNode);  nodeUtil.removeChild(parent,  fromNode);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    }    else    {    NodeUtil.removeChild(parent,    fromNode);    }    	non-compiled	[CE]  cannot  find  symbol  nodeUtil	234	None	replace
533	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);	  	compilable	  [FE]  AssertionFailedError  	135	6	add
534	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);	  	compilable	  [FE]  AssertionFailedError  	135	6	add
535	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(node);	  	compilable	  [FE]  RuntimeException  	135	7	add
536	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(node);	  	compilable	  [FE]  RuntimeException  	135	7	add
537	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);	  	compilable	  [FE]  AssertionFailedError  	135	6	add
538	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);	  	compilable	  [FE]  AssertionFailedError  	135	6	add
539	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  NodeUtil.removeChild(node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  NodeUtil.removeChild(node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    parent.removeChild(node);    NodeUtil.removeChild(node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(node);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	135	None	add
540	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  NodeUtil.removeChild(parent);  NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  NodeUtil.removeChild(parent);  NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    parent.removeChild(node);    NodeUtil.removeChild(parent);  NodeUtil.removeChild(parent,  node);  parent.removeChild(node);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	135	None	add
541	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  NodeUtil.removeChild(fromNode);  NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  NodeUtil.removeChild(fromNode);  NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    parent.removeChild(node);    NodeUtil.removeChild(fromNode);  NodeUtil.removeChild(parent,  node);  parent.removeChild(node);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	135	None	add
542	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeTraversal.traverse(compiler,        node,        this);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,  parent,  this);	  	compilable	  [FE]  StackOverflowError  	183	7	add
543	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  parent,  this);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,  parent,  this);	  	compilable	  [FE]  StackOverflowError  	183	7	add
544	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeTraversal.traverse(compiler,        node,        this);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,  node,  this);	  	compilable	  [FE]  StackOverflowError  	183	7	add
545	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  node,  this);  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,  node,  this);	  	compilable	  [FE]  StackOverflowError  	183	7	add
546	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  node,  this);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeTraversal.traverse(compiler,        node,        this);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,  node,  this);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  StackOverflowError  	183	7	add
547	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  node,  this);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  node,  this);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,  node,  this);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  StackOverflowError  	183	7	add
548	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeTraversal.traverse(compiler,        node,        this);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  StackOverflowError  	183	7	add
549	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  StackOverflowError  	183	7	add
550	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  node,  this);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeTraversal.traverse(compiler,        node,        this);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,  node,  this);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  StackOverflowError  	183	7	add
551	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  node,  this);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  node,  this);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,  node,  this);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  StackOverflowError  	183	7	add
552	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]              StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeTraversal.traverse(compiler,        node,        this);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  StackOverflowError  	183	7	add
553	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [FE]  StackOverflowError  [FE]              StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  StackOverflowError  	183	7	add
554	[BUG]  [BUGGY]  Node  body  =  n.getFirstChild();  [CE]  cannot  find  symbol  n  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  n.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  n.getFirstChild();	          Node    body    =    node.getFirstChild();    Node    body    =    node.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  n	101	None	replace
555	[BUG]  [BUGGY]  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getLastChild());  }  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getLastChild());  }  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getLastChild());  }	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    parent    =    node.getParent();    if(parent!=    null)    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	78	None	replace
556	[BUG]  [BUGGY]  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFallThrough(parent.getLastChild());  }	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    parent    =    node.getParent();    if(parent!=    null)    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	78	None	replace
557	[BUG]  [BUGGY]  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getFirstChild());  }  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getFirstChild());  }  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getFirstChild());  }	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    parent    =    node.getParent();    if(parent!=    null)    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	78	None	replace
558	[BUG]  [BUGGY]  Node  node  =  parent.getFirstChild();  return  computeFallThrough(node.getLastChild());  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  node  =  parent.getFirstChild();  return  computeFallThrough(node.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  node  =  parent.getFirstChild();  return  computeFallThrough(node.getLastChild());	  return    computeFallThrough(node.getLastChild());    Node    node    =    parent.getFirstChild();    return    computeFallThrough(node.getLastChild());    	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	117	None	replace
559	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  node  =  parent.getFirstChild();  return  computeFallThrough(node.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	node  =  parent.getFirstChild();  return  computeFallThrough(node.getLastChild());	  return    computeFallThrough(node.getLastChild());    Node    node    =    parent.getFirstChild();    return    computeFallThrough(node.getLastChild());    	compilable	  [FE]  AssertionFailedError  	117	6	replace
560	[BUG]  [BUGGY]  node  =  parent.getFirstChild();  return  computeFallThrough(node.getLastChild());  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  node  =  parent.getFirstChild();  return  computeFallThrough(node.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	node  =  parent.getFirstChild();  return  computeFallThrough(node.getLastChild());	  return    computeFallThrough(node.getLastChild());    Node    node    =    parent.getFirstChild();    return    computeFallThrough(node.getLastChild());    	compilable	  [FE]  AssertionFailedError  	117	6	replace
561	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);	  	compilable	  [FE]  RuntimeException  	56	6	add
562	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);	  	compilable	  [FE]  RuntimeException  	56	6	add
563	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	56	None	add
564	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(fromNode,  NodeUtil.getLastChild());  NodeUtil.removeChild(parent,  fromNode);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(fromNode,  NodeUtil.getLastChild());  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(fromNode,  NodeUtil.getLastChild());  NodeUtil.removeChild(parent,  fromNode);	  	non-compiled	[CE]  cannot  find  symbol	56	None	add
565	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.addChildToFront(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.addChildToFront(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    NodeUtil.addChildToFront(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);	  	non-compiled	[CE]  cannot  find  symbol	56	None	add
566	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.addChildToBack(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.addChildToBack(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    NodeUtil.addChildToBack(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);	  	non-compiled	[CE]  cannot  find  symbol	56	None	add
567	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getLastChild(),  node);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getLastChild(),  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode.getLastChild(),  node);	  return    computeFallThrough(parent.getLastChild(),    node);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	211	None	replace
568	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getLastChild(),  parent);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getLastChild(),  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode.getLastChild(),  parent);	  return    computeFallThrough(parent.getLastChild(),    node);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	211	None	replace
569	[BUG]  [BUGGY]  return  computeFallThrough(parent.getLastChild(),  fromNode,  node);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(parent.getLastChild(),  fromNode,  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(parent.getLastChild(),  fromNode,  node);	  return    computeFallThrough(parent.getLastChild(),    node);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	211	None	replace
570	[BUG]  [BUGGY]  return  computeFallThrough(node.getLastChild(),  parent);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(node.getLastChild(),  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(node.getLastChild(),  parent);	  return    computeFallThrough(parent.getLastChild(),    node);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	211	None	replace
571	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPositionCounter,  priorityComparator);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,Comparator<DiGraphNode<Node,Branch>>)  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPositionCounter,  priorityComparator);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  astPositionCounter,  priorityComparator);	  NodeTraversal.traverse(compiler,    node,    this,    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,Comparator<DiGraphNode<Node,Branch>>)	70	None	replace
572	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  astPositionCounter,  priorityComparator);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,int,Comparator<DiGraphNode<Node,Branch>>)  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  astPositionCounter,  priorityComparator);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  this,  astPositionCounter,  priorityComparator);	  NodeTraversal.traverse(compiler,    node,    this,    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,int,Comparator<DiGraphNode<Node,Branch>>)	70	None	replace
573	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPositionCounter,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,ControlFlowAnalysis)  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPositionCounter,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  astPositionCounter,  this);	  NodeTraversal.traverse(compiler,    node,    this,    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,ControlFlowAnalysis)	70	None	replace
574	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  node,  this,  astPositionCounter);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,ControlFlowAnalysis,int)  [FE]                  StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  node,  this,  astPositionCounter);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  fromNode,  node,  this,  astPositionCounter);	  NodeTraversal.traverse(compiler,    node,    this,    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,ControlFlowAnalysis,int)	70	None	replace
575	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  node,  astPositionCounter);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,int)  [FE]                    StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  node,  astPositionCounter);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  fromNode,  node,  astPositionCounter);	  NodeTraversal.traverse(compiler,    node,    this,    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,int)	70	None	replace
576	[BUG]  [BUGGY]  Node  body  =  parent.getFirstChild();  Node  parent  =  node.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getFirstChild();  Node  parent  =  node.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  parent.getFirstChild();  Node  parent  =  node.getFirstChild();	          Node    body    =    node.getFirstChild();    Node    parent    =    node.getFirstChild();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	176	None	replace
577	[BUG]  [BUGGY]  Node  body  =  node.getLastChild();  Node  parent  =  node.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  node.getLastChild();  Node  parent  =  node.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  node.getLastChild();  Node  parent  =  node.getFirstChild();	          Node    body    =    node.getFirstChild();    Node    parent    =    node.getFirstChild();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	176	None	replace
578	[BUG]  [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  parent  =  node.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  parent  =  node.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  fromNode.getFirstChild();  Node  parent  =  node.getFirstChild();	          Node    body    =    node.getFirstChild();    Node    parent    =    node.getFirstChild();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	176	None	replace
579	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  value);  [CE]  cannot  find  symbol  value  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  value);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  nodePriorities,  value);	  return    computeFollowNode(fromNode,    parent,    nodePriorities,    thenBlock);    	non-compiled	[CE]  cannot  find  symbol  value	173	None	replace
580	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  parent,  this);	  	compilable	  [FE]  StackOverflowError  	67	7	add
581	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  parent,  this);	  	compilable	  [FE]  StackOverflowError  	67	7	add
582	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  return  computeFollowNode(fromNode,  parent);  [CE]  unreachable  statement  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  return  computeFollowNode(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  parent,  this);  return  computeFollowNode(fromNode,  parent);	  	non-compiled	[CE]  unreachable  statement	67	None	add
583	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  StackOverflowError  <  Node>  overflowError  =  computeFallThrough(fromNode.getLastChild());  [CE]  type  StackOverflowError  does  not  take  parameters  [FE]        StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  StackOverflowError  <  Node>  overflowError  =  computeFallThrough(fromNode.getLastChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,    parent,    this);    StackOverflowError  <  Node>  overflowError  =  computeFallThrough(fromNode.getLastChild());	  	non-compiled	[CE]  type  StackOverflowError  does  not  take  parameters	67	None	add
584	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  StackOverflowError  <  Node>  overflowError  =  computeFallThrough(parent.getLastChild());  [CE]  type  StackOverflowError  does  not  take  parameters  [FE]          StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  StackOverflowError  <  Node>  overflowError  =  computeFallThrough(parent.getLastChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,    parent,    this);    StackOverflowError  <  Node>  overflowError  =  computeFallThrough(parent.getLastChild());	  	non-compiled	[CE]  type  StackOverflowError  does  not  take  parameters	67	None	add
585	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  StackOverflowError  <  Node>  overflowError  =  computeFallThrough(fromNode.getFirstChild());  [CE]  type  StackOverflowError  does  not  take  parameters  [FE]            StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  StackOverflowError  <  Node>  overflowError  =  computeFallThrough(fromNode.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,    parent,    this);    StackOverflowError  <  Node>  overflowError  =  computeFallThrough(fromNode.getFirstChild());	  	non-compiled	[CE]  type  StackOverflowError  does  not  take  parameters	67	None	add
586	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  return  computeFallThrough(fromNode,  parent);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]              StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  return  computeFallThrough(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  parent,  this);  return  computeFallThrough(fromNode,  parent);	  	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	67	None	add
587	[BUG]  [BUGGY]  Node  parent  =  getParentNode(fromNode,  node);  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getParentNode(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParentNode(fromNode,  node);	  Node    parent    =    getParentNode(parent,    node);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	151	None	replace
588	[BUG]  [BUGGY]  Node  parent  =  getParentNode(node,  node);  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getParentNode(node,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParentNode(node,  node);	  Node    parent    =    getParentNode(parent,    node);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	151	None	replace
589	[BUG]  [BUGGY]  Node  parent  =  getParentNode(parent,  fromNode);  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getParentNode(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParentNode(parent,  fromNode);	  Node    parent    =    getParentNode(parent,    node);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	151	None	replace
590	[BUG]  [BUGGY]  Node  parent  =  getParentNode(node,  parent);  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getParentNode(node,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParentNode(node,  parent);	  Node    parent    =    getParentNode(parent,    node);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	151	None	replace
591	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  body  =  parent.getFirstChild();  [CE]  unreachable  statement  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  body  =  parent.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent);  Node  body  =  parent.getFirstChild();	  return    computeFollowNode(fromNode,    node);    Node    body    =    parent.getFirstChild();    	non-compiled	[CE]  unreachable  statement	108	None	replace
592	[BUG]  [BUGGY]          Node    body    =    node.getFirstChild();    Preconditions.checkState(body!=  null);  Node  body  =  node.getFirstChild();  Preconditions.checkState(body!=  null);  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    body    =    node.getFirstChild();    Preconditions.checkState(body!=  null);  Node  body  =  node.getFirstChild();  Preconditions.checkState(body!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        body        =        node.getFirstChild();        Preconditions.checkState(body!=    null);    Node  body  =  node.getFirstChild();  Preconditions.checkState(body!=  null);	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	259	None	add
593	[BUG]  [BUGGY]          Node    body    =    node.getFirstChild();    Preconditions.checkState(body!=  null);  Node  body  =  node.getLastChild();  Preconditions.checkState(body!=  null);  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    body    =    node.getFirstChild();    Preconditions.checkState(body!=  null);  Node  body  =  node.getLastChild();  Preconditions.checkState(body!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        body        =        node.getFirstChild();        Preconditions.checkState(body!=    null);    Node  body  =  node.getLastChild();  Preconditions.checkState(body!=  null);	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	259	None	add
594	[BUG]  [BUGGY]          Node    body    =    node.getFirstChild();    Preconditions.checkState(body!=  null);  Node  body  =  node.getFirstChild();  Preconditions.checkState(body  ==  null);  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    body    =    node.getFirstChild();    Preconditions.checkState(body!=  null);  Node  body  =  node.getFirstChild();  Preconditions.checkState(body  ==  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        body        =        node.getFirstChild();        Preconditions.checkState(body!=    null);    Node  body  =  node.getFirstChild();  Preconditions.checkState(body  ==  null);	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	259	None	add
595	[BUG]  [BUGGY]          Node    body    =    node.getFirstChild();    Preconditions.checkState(body!=  null);  Node  body  =  node.getFirstChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    body    =    node.getFirstChild();    Preconditions.checkState(body!=  null);  Node  body  =  node.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        body        =        node.getFirstChild();        Preconditions.checkState(body!=    null);    Node  body  =  node.getFirstChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	259	None	add
596	[BUG]  [BUGGY]          Node    body    =    node.getFirstChild();    Preconditions.checkState(body!=  null);  Node  body  =  parent.getFirstChild();  Preconditions.checkState(body!=  null);  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    body    =    node.getFirstChild();    Preconditions.checkState(body!=  null);  Node  body  =  parent.getFirstChild();  Preconditions.checkState(body!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        body        =        node.getFirstChild();        Preconditions.checkState(body!=    null);    Node  body  =  parent.getFirstChild();  Preconditions.checkState(body!=  null);	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	259	None	add
597	[BUG]  [BUGGY]          Node    body    =    node.getFirstChild();    Preconditions.checkState(body!=  null);  Node  body  =  node.getLastChild();  Preconditions.checkState(body  ==  null);  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    body    =    node.getFirstChild();    Preconditions.checkState(body!=  null);  Node  body  =  node.getLastChild();  Preconditions.checkState(body  ==  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        body        =        node.getFirstChild();        Preconditions.checkState(body!=    null);    Node  body  =  node.getLastChild();  Preconditions.checkState(body  ==  null);	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	259	None	add
598	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  body  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  node);	  return    computeFollowNode(fromNode,    node);    Node    body    =    parent.getFirstChild();    return    computeFollowNode(fromNode,    body);    	compilable	  [FE]  StackOverflowError  	218	7	replace
599	[BUG]  [BUGGY]  Node  body  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  node);  [FE]  StackOverflowError  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  node);	  return    computeFollowNode(fromNode,    node);    Node    body    =    parent.getFirstChild();    return    computeFollowNode(fromNode,    body);    	compilable	  [FE]  StackOverflowError  	218	7	replace
600	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getFirstChild();  return  computeFollowNode(body,  fromNode);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  body  =  parent.getFirstChild();  return  computeFollowNode(body,  fromNode);	  return    computeFollowNode(fromNode,    node);    Node    body    =    parent.getFirstChild();    return    computeFollowNode(fromNode,    body);    	compilable	  [FE]  StackOverflowError  	218	7	replace
601	[BUG]  [BUGGY]  Node  body  =  parent.getFirstChild();  return  computeFollowNode(body,  fromNode);  [FE]  StackOverflowError  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getFirstChild();  return  computeFollowNode(body,  fromNode);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  parent.getFirstChild();  return  computeFollowNode(body,  fromNode);	  return    computeFollowNode(fromNode,    node);    Node    body    =    parent.getFirstChild();    return    computeFollowNode(fromNode,    body);    	compilable	  [FE]  StackOverflowError  	218	7	replace
602	[BUG]  [BUGGY]  NodeUtil.removeChild(node);  NodeUtil.removeChild(parent,  node);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(node);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(node);  NodeUtil.removeChild(parent,  node);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	133	None	replace
603	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  parent);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    	compilable	  [FE]  RuntimeException  	133	7	replace
604	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  parent);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  parent);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    	compilable	  [FE]  RuntimeException  	133	7	replace
605	[BUG]  [BUGGY]  NodeUtil.removeChild(parent);  NodeUtil.removeChild(parent,  node);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent);  NodeUtil.removeChild(parent,  node);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	133	None	replace
606	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getFirstChild(),  parent,  node);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getFirstChild(),  parent,  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode.getFirstChild(),  parent,  node);	  return    computeFallThrough(fromNode.getFirstChild(),    node);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	280	None	replace
607	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getFirstChild(),  node,  parent);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getFirstChild(),  node,  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode.getFirstChild(),  node,  parent);	  return    computeFallThrough(fromNode.getFirstChild(),    node);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	280	None	replace
608	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getFirstChild(),  node,  firstSibling);  [CE]  cannot  find  symbol  firstSibling  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getFirstChild(),  node,  firstSibling);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode.getFirstChild(),  node,  firstSibling);	  return    computeFallThrough(fromNode.getFirstChild(),    node);    	non-compiled	[CE]  cannot  find  symbol  firstSibling	280	None	replace
609	[BUG]  [BUGGY]  Node  node  =  parent.getParent();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                  StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  node  =  parent.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  node  =  parent.getParent();	  return    computeFollowNode(fromNode,    node);    Node    node    =    parent.getParent();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	111	None	replace
610	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  node  =  parent.getParent();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                    StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  node  =  parent.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent);  Node  node  =  parent.getParent();	  return    computeFollowNode(fromNode,    node);    Node    node    =    parent.getParent();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	111	None	replace
611	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  node  =  parent.getNext();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                      StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  node  =  parent.getNext();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent);  Node  node  =  parent.getNext();	  return    computeFollowNode(fromNode,    node);    Node    node    =    parent.getParent();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	111	None	replace
612	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.removeChild(fromNode);    	compilable	  [FE]  RuntimeException  	140	6	replace
613	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.removeChild(fromNode);    	compilable	  [FE]  RuntimeException  	140	6	replace
614	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  ParentUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  [CE]  cannot  find  symbol  ParentUtil  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  ParentUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node);  ParentUtil.removeChild(parent,  node);  parent.removeChild(fromNode);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.removeChild(fromNode);    	non-compiled	[CE]  cannot  find  symbol  ParentUtil	140	None	replace
615	[BUG]  [BUGGY]  Node  parent  =  getParent(),  fromNode);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getParent(),  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParent(),  fromNode);	  Node    parent    =    getParent(),    node);    	non-compiled	[CE]  ';'  expected	130	None	replace
616	[BUG]  [BUGGY]  Node  parent  =  getParent(),  parent);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getParent(),  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParent(),  parent);	  Node    parent    =    getParent(),    node);    	non-compiled	[CE]  ';'  expected	130	None	replace
617	[BUG]  [BUGGY]  Node  parent  =  getParent(),  node,  computeFollowNode(fromNode);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getParent(),  node,  computeFollowNode(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParent(),  node,  computeFollowNode(fromNode);	  Node    parent    =    getParent(),    node);    	non-compiled	[CE]  ';'  expected	130	None	replace
618	[BUG]  [BUGGY]  Node  parent  =  getNextSibling(),  node);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getNextSibling(),  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getNextSibling(),  node);	  Node    parent    =    getParent(),    node);    	non-compiled	[CE]  ';'  expected	130	None	replace
619	[BUG]  [BUGGY]  Node  parent  =  getParent(),  node,  computeFallThrough);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getParent(),  node,  computeFallThrough);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParent(),  node,  computeFallThrough);	  Node    parent    =    getParent(),    node);    	non-compiled	[CE]  ';'  expected	130	None	replace
620	[BUG]  [BUGGY]  Node  parent  =  getParentNode(node,  FINALLY);  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getParentNode(node,  FINALLY);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParentNode(node,  FINALLY);	  Node    parent    =    getParentNode(node);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	149	None	replace
621	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(fromNode,  parent);	  NodeUtil.removeChild(node);    	compilable	  [FE]  RuntimeException  	231	7	replace
622	[BUG]  [BUGGY]  NodeUtil.removeChild(fromNode,  parent);  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(fromNode,  parent);	  NodeUtil.removeChild(node);    	compilable	  [FE]  RuntimeException  	231	7	replace
623	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(fromNode,  node);	  NodeUtil.removeChild(node);    	compilable	  [FE]  RuntimeException  	231	7	replace
624	[BUG]  [BUGGY]  NodeUtil.removeChild(fromNode,  node);  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(fromNode,  node);	  NodeUtil.removeChild(node);    	compilable	  [FE]  RuntimeException  	231	7	replace
625	[BUG]  [BUGGY]  NodeUtil.removeChild(lastJump,  node);  [CE]  cannot  find  symbol  lastJump  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(lastJump,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(lastJump,  node);	  NodeUtil.removeChild(node);    	non-compiled	[CE]  cannot  find  symbol  lastJump	231	None	replace
626	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getFirstChild());  Node  fromNode  =  parent.getFirstChild();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getFirstChild());  Node  fromNode  =  parent.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(fromNode.getFirstChild());    Node  fromNode  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	21	None	add
627	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getFirstChild());  Node  fromNode  =  node.getFirstChild();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getFirstChild());  Node  fromNode  =  node.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(fromNode.getFirstChild());    Node  fromNode  =  node.getFirstChild();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	21	None	add
628	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getFirstChild());  Node  fromNode  =  parent.getParent();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getFirstChild());  Node  fromNode  =  parent.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(fromNode.getFirstChild());    Node  fromNode  =  parent.getParent();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	21	None	add
629	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getFirstChild());  return  computeFallThrough(fromNode.getFirstChild());  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getFirstChild());  return  computeFallThrough(fromNode.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(fromNode.getFirstChild());    return  computeFallThrough(fromNode.getFirstChild());	  	non-compiled	[CE]  unreachable  statement	21	None	add
630	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getFirstChild());  return  computeFallThrough(fromNode.getLastChild());  [CE]  unreachable  statement  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getFirstChild());  return  computeFallThrough(fromNode.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(fromNode.getFirstChild());    return  computeFallThrough(fromNode.getLastChild());	  	non-compiled	[CE]  unreachable  statement	21	None	add
631	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getFirstChild());  Node  parent  =  fromNode.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getFirstChild());  Node  parent  =  fromNode.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(fromNode.getFirstChild());    Node  parent  =  fromNode.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	21	None	add
632	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  NodeUtil.addChildToFront(parent,  fromNode);  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  NodeUtil.addChildToFront(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node);  NodeUtil.addChildToFront(parent,  fromNode);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.addChildToFront(parent,    fromNode);    	non-compiled	[CE]  cannot  find  symbol	189	None	replace
633	[BUG]  [BUGGY]  NodeUtil.addChildToFront(parent,  fromNode);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.addChildToFront(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.addChildToFront(parent,  fromNode);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.addChildToFront(parent,    fromNode);    	non-compiled	[CE]  cannot  find  symbol	189	None	replace
634	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  FINALLY);  NodeUtil.addChildToFront(parent,  fromNode);  [CE]  cannot  find  symbol  FINALLY  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  FINALLY);  NodeUtil.addChildToFront(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  FINALLY);  NodeUtil.addChildToFront(parent,  fromNode);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.addChildToFront(parent,    fromNode);    	non-compiled	[CE]  cannot  find  symbol  FINALLY	189	None	replace
635	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.addChildToFront(parent,  fromNode);  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.addChildToFront(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  parent);  NodeUtil.addChildToFront(parent,  fromNode);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.addChildToFront(parent,    fromNode);    	non-compiled	[CE]  cannot  find  symbol	189	None	replace
636	[BUG]  [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  body  =  fromNode.getFirstChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  body  =  fromNode.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    fromNode.getFirstChild();    Node  body  =  fromNode.getFirstChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	97	None	add
637	[BUG]  [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  body  =  fromNode.getLastChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  body  =  fromNode.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    fromNode.getFirstChild();    Node  body  =  fromNode.getLastChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	97	None	add
638	[BUG]  [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  fromNode  =  fromNode.getFirstChild();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  fromNode  =  fromNode.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    fromNode.getFirstChild();    Node  fromNode  =  fromNode.getFirstChild();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	97	None	add
639	[BUG]  [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  body  =  toNode.getFirstChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  body  =  toNode.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    fromNode.getFirstChild();    Node  body  =  toNode.getFirstChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	97	None	add
640	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  head  =  fromNode.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node    body    =    fromNode.getFirstChild();    Node  head  =  fromNode.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	97	3	add
641	[BUG]  [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  head  =  fromNode.getFirstChild();  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  head  =  fromNode.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    fromNode.getFirstChild();    Node  head  =  fromNode.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	97	3	add
642	[BUG]  [BUGGY]  Node  parent  =  fromNode.getParent();  return  computeFallThrough(parent.getLastChild());  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                  StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  fromNode.getParent();  return  computeFallThrough(parent.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  fromNode.getParent();  return  computeFallThrough(parent.getLastChild());	  return    computeFollowNode(fromNode,    parent.getFirstChild());    Node    parent    =    node.getParent();    return    computeFallThrough(parent.getLastChild());    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	55	None	replace
643	[BUG]  [BUGGY]  Node  body  =  node.getFirstChild();  Node  parent  =  parent.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  node.getFirstChild();  Node  parent  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  node.getFirstChild();  Node  parent  =  parent.getFirstChild();	          Node    body    =    parent.getFirstChild();    Node    parent    =    parent.getFirstChild();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	15	None	replace
644	[BUG]  [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  parent  =  parent.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  parent  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  fromNode.getFirstChild();  Node  parent  =  parent.getFirstChild();	          Node    body    =    parent.getFirstChild();    Node    parent    =    parent.getFirstChild();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	15	None	replace
645	[BUG]  [BUGGY]  Node  head  =  parent.getFirstChild();  Node  parent  =  parent.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  head  =  parent.getFirstChild();  Node  parent  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  head  =  parent.getFirstChild();  Node  parent  =  parent.getFirstChild();	          Node    body    =    parent.getFirstChild();    Node    parent    =    parent.getFirstChild();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	15	None	replace
646	[BUG]  [BUGGY]  Node  body  =  parent.getFirstChild();  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getFirstChild();  Node  node  =  node.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  parent.getFirstChild();  Node  node  =  node.getFirstChild();	          Node    body    =    node.getFirstChild();    Node    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	175	None	replace
647	[BUG]  [BUGGY]  Node  body  =  node.getLastChild();  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  node.getLastChild();  Node  node  =  node.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  node.getLastChild();  Node  node  =  node.getFirstChild();	          Node    body    =    node.getFirstChild();    Node    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	175	None	replace
648	[BUG]  [BUGGY]  Node  body  =  node.getFirstChild();  Node  node  =  parent.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  node.getFirstChild();  Node  node  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  node.getFirstChild();  Node  node  =  parent.getFirstChild();	          Node    body    =    node.getFirstChild();    Node    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	175	None	replace
649	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  Node  nextSibling  =  parent.getNext();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  Node  nextSibling  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFollowNode(fromNode,    parent);    }    Node  nextSibling  =  parent.getNext();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	228	None	add
650	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  Node  nextSibling  =  parent.getFirstChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  Node  nextSibling  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFollowNode(fromNode,    parent);    }    Node  nextSibling  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	228	None	add
651	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  Node  nextSibling  =  parent.getLastChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  Node  nextSibling  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFollowNode(fromNode,    parent);    }    Node  nextSibling  =  parent.getLastChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	228	None	add
652	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  Node  nextSibling  =  parent.getParent();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  Node  nextSibling  =  parent.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFollowNode(fromNode,    parent);    }    Node  nextSibling  =  parent.getParent();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	228	None	add
653	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  null);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFollowNode(fromNode,    parent);    }    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  null);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	228	None	add
654	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  null);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFollowNode(fromNode,    parent);    }    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  null);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	228	None	add
655	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  fromNode.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  fromNode.getNext();	  Node    nextSibling    =    node.getNext();    	compilable	  [FE]  AssertionFailedError  	47	5	replace
656	[BUG]  [BUGGY]  Node  nextSibling  =  fromNode.getNext();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  fromNode.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  fromNode.getNext();	  Node    nextSibling    =    node.getNext();    	compilable	  [FE]  AssertionFailedError  	47	5	replace
657	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode.getFirstChild(),  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	return  computeFollowNode(fromNode.getFirstChild(),  parent);	  return    computeFollowNode(fromNode.getFirstChild());    	compilable	  [FE]  AssertionFailedError  	37	3	replace
658	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getFirstChild(),  parent);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode.getFirstChild(),  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode.getFirstChild(),  parent);	  return    computeFollowNode(fromNode.getFirstChild());    	compilable	  [FE]  AssertionFailedError  	37	3	replace
659	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode.getFirstChild(),  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	return  computeFollowNode(fromNode.getFirstChild(),  node);	  return    computeFollowNode(fromNode.getFirstChild());    	compilable	  [FE]  RuntimeException  	37	7	replace
660	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getFirstChild(),  node);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode.getFirstChild(),  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode.getFirstChild(),  node);	  return    computeFollowNode(fromNode.getFirstChild());    	compilable	  [FE]  RuntimeException  	37	7	replace
661	[BUG]  [BUGGY]  Node  parent  =  node.getParentNode();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  node.getParentNode();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  node.getParentNode();	  Node    parent    =    getParentNode();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	193	None	replace
662	[BUG]  [BUGGY]  Node  parent  =  getParent().getNext();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getParent().getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParent().getNext();	  Node    parent    =    getParent().getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	131	None	replace
663	[BUG]  [BUGGY]  Node  parent  =  node.getParent().getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  node.getParent().getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  node.getParent().getParent();	  Node    parent    =    getParent().getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	131	None	replace
664	[BUG]  [BUGGY]  Node  parent  =  getParent().cloneTree();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getParent().cloneTree();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParent().cloneTree();	  Node    parent    =    getParent().getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	131	None	replace
665	[BUG]  [BUGGY]  Node  parent  =  getParent().getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getParent().getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParent().getFirstChild();	  Node    parent    =    getParent().getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	131	None	replace
666	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getFirstChild();  return  computeFallThrough(node.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  node.getFirstChild();  return  computeFallThrough(node.getLastChild());	  return    computeFallThrough(node.getFirstChild());    Node    nextSibling    =    node.getFirstChild();    return    computeFallThrough(node.getFirstChild());    	compilable	  [FE]  AssertionFailedError  	275	6	replace
667	[BUG]  [BUGGY]  Node  nextSibling  =  node.getFirstChild();  return  computeFallThrough(node.getLastChild());  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getFirstChild();  return  computeFallThrough(node.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  node.getFirstChild();  return  computeFallThrough(node.getLastChild());	  return    computeFallThrough(node.getFirstChild());    Node    nextSibling    =    node.getFirstChild();    return    computeFallThrough(node.getFirstChild());    	compilable	  [FE]  AssertionFailedError  	275	6	replace
668	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getLastChild();  return  computeFallThrough(nextSibling.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  node.getLastChild();  return  computeFallThrough(nextSibling.getFirstChild());	  return    computeFallThrough(node.getFirstChild());    Node    nextSibling    =    node.getFirstChild();    return    computeFallThrough(node.getFirstChild());    	compilable	  [FE]  AssertionFailedError  	275	6	replace
669	[BUG]  [BUGGY]  Node  nextSibling  =  node.getLastChild();  return  computeFallThrough(nextSibling.getFirstChild());  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getLastChild();  return  computeFallThrough(nextSibling.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  node.getLastChild();  return  computeFallThrough(nextSibling.getFirstChild());	  return    computeFallThrough(node.getFirstChild());    Node    nextSibling    =    node.getFirstChild();    return    computeFallThrough(node.getFirstChild());    	compilable	  [FE]  AssertionFailedError  	275	6	replace
670	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getLastChild();  return  computeFallThrough(node.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  node.getLastChild();  return  computeFallThrough(node.getFirstChild());	  return    computeFallThrough(node.getFirstChild());    Node    nextSibling    =    node.getFirstChild();    return    computeFallThrough(node.getFirstChild());    	compilable	  [FE]  AssertionFailedError  	275	6	replace
671	[BUG]  [BUGGY]  Node  nextSibling  =  node.getLastChild();  return  computeFallThrough(node.getFirstChild());  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getLastChild();  return  computeFallThrough(node.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  node.getLastChild();  return  computeFallThrough(node.getFirstChild());	  return    computeFallThrough(node.getFirstChild());    Node    nextSibling    =    node.getFirstChild();    return    computeFallThrough(node.getFirstChild());    	compilable	  [FE]  AssertionFailedError  	275	6	replace
672	[BUG]  [BUGGY]  Node  body  =  parent.getNext();  Node  body  =  parent.getNext();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getNext();  Node  body  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    parent.getNext();    Node  body  =  parent.getNext();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	213	None	add
673	[BUG]  [BUGGY]  Node  body  =  parent.getNext();  Node  parent  =  parent.getNext();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getNext();  Node  parent  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    parent.getNext();    Node  parent  =  parent.getNext();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	213	None	add
674	[BUG]  [BUGGY]  Node  body  =  parent.getNext();  Node  parent  =  body.getNext();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getNext();  Node  parent  =  body.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    parent.getNext();    Node  parent  =  body.getNext();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	213	None	add
675	[BUG]  [BUGGY]  Node  body  =  parent.getNext();  Node  body  =  node.getNext();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getNext();  Node  body  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    parent.getNext();    Node  body  =  node.getNext();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	213	None	add
676	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getNext();  Node  head  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node    body    =    parent.getNext();    Node  head  =  parent.getNext();	  	compilable	  [FE]  AssertionFailedError  	213	3	add
677	[BUG]  [BUGGY]  Node  body  =  parent.getNext();  Node  head  =  parent.getNext();  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getNext();  Node  head  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    parent.getNext();    Node  head  =  parent.getNext();	  	compilable	  [FE]  AssertionFailedError  	213	3	add
678	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.replaceChild(node,  this);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.replaceChild(node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node);  parent.replaceChild(node,  this);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.replaceChild(node,    this);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	138	None	replace
679	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  parent);  parent.replaceChild(node,  this);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  parent);  parent.replaceChild(node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  parent);  parent.replaceChild(node,  this);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.replaceChild(node,    this);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	138	None	replace
680	[BUG]  [BUGGY]  NodeUtil.removeChild(node,  parent);  parent.replaceChild(node,  this);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(node,  parent);  parent.replaceChild(node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(node,  parent);  parent.replaceChild(node,  this);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.replaceChild(node,    this);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	138	None	replace
681	[BUG]  [BUGGY]  NodeUtil.replaceChild(parent,  node);  parent.replaceChild(node,  this);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.replaceChild(parent,  node);  parent.replaceChild(node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.replaceChild(parent,  node);  parent.replaceChild(node,  this);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.replaceChild(node,    this);    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
682	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  nextSibling);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  nextSibling);	  return    computeFallThrough(node.getFirstChild());    Node    nextSibling    =    node.getFirstChild();    return    computeFollowNode(fromNode,    parent);    	compilable	  [FE]  StackOverflowError  	276	7	replace
683	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  nextSibling);  [FE]  StackOverflowError  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  nextSibling);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  nextSibling);	  return    computeFallThrough(node.getFirstChild());    Node    nextSibling    =    node.getFirstChild();    return    computeFollowNode(fromNode,    parent);    	compilable	  [FE]  StackOverflowError  	276	7	replace
684	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getFirstChild();  return  computeFollowNode(fromNode,  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  node.getFirstChild();  return  computeFollowNode(fromNode,  parent);	  return    computeFallThrough(node.getFirstChild());    Node    nextSibling    =    node.getFirstChild();    return    computeFollowNode(fromNode,    parent);    	compilable	  [FE]  AssertionFailedError  	276	3	replace
685	[BUG]  [BUGGY]  Node  nextSibling  =  node.getFirstChild();  return  computeFollowNode(fromNode,  parent);  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getFirstChild();  return  computeFollowNode(fromNode,  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  node.getFirstChild();  return  computeFollowNode(fromNode,  parent);	  return    computeFallThrough(node.getFirstChild());    Node    nextSibling    =    node.getFirstChild();    return    computeFollowNode(fromNode,    parent);    	compilable	  [FE]  AssertionFailedError  	276	3	replace
686	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getLastChild();  return  computeFollowNode(fromNode,  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  node.getLastChild();  return  computeFollowNode(fromNode,  parent);	  return    computeFallThrough(node.getFirstChild());    Node    nextSibling    =    node.getFirstChild();    return    computeFollowNode(fromNode,    parent);    	compilable	  [FE]  AssertionFailedError  	276	3	replace
687	[BUG]  [BUGGY]  Node  nextSibling  =  node.getLastChild();  return  computeFollowNode(fromNode,  parent);  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getLastChild();  return  computeFollowNode(fromNode,  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  node.getLastChild();  return  computeFollowNode(fromNode,  parent);	  return    computeFallThrough(node.getFirstChild());    Node    nextSibling    =    node.getFirstChild();    return    computeFollowNode(fromNode,    parent);    	compilable	  [FE]  AssertionFailedError  	276	3	replace
688	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getNext();  return  computeFollowNode(fromNode,  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  node.getNext();  return  computeFollowNode(fromNode,  parent);	  return    computeFallThrough(node.getFirstChild());    Node    nextSibling    =    node.getFirstChild();    return    computeFollowNode(fromNode,    parent);    	compilable	  [FE]  AssertionFailedError  	276	3	replace
689	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  return  computeFollowNode(fromNode,  parent);  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getNext();  return  computeFollowNode(fromNode,  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  node.getNext();  return  computeFollowNode(fromNode,  parent);	  return    computeFallThrough(node.getFirstChild());    Node    nextSibling    =    node.getFirstChild();    return    computeFollowNode(fromNode,    parent);    	compilable	  [FE]  AssertionFailedError  	276	3	replace
690	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  parent);	  return    computeFallThrough(node.getLastChild());    Node    nextSibling    =    parent.getFirstChild();    return    computeFollowNode(fromNode,    parent);    	compilable	  [FE]  AssertionFailedError  	256	3	replace
691	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  parent);  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  parent);	  return    computeFallThrough(node.getLastChild());    Node    nextSibling    =    parent.getFirstChild();    return    computeFollowNode(fromNode,    parent);    	compilable	  [FE]  AssertionFailedError  	256	3	replace
692	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getLastChild();  return  computeFollowNode(fromNode,  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  parent.getLastChild();  return  computeFollowNode(fromNode,  parent);	  return    computeFallThrough(node.getLastChild());    Node    nextSibling    =    parent.getFirstChild();    return    computeFollowNode(fromNode,    parent);    	compilable	  [FE]  AssertionFailedError  	256	3	replace
693	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getLastChild();  return  computeFollowNode(fromNode,  parent);  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getLastChild();  return  computeFollowNode(fromNode,  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getLastChild();  return  computeFollowNode(fromNode,  parent);	  return    computeFallThrough(node.getLastChild());    Node    nextSibling    =    parent.getFirstChild();    return    computeFollowNode(fromNode,    parent);    	compilable	  [FE]  AssertionFailedError  	256	3	replace
694	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild(),  node,  astPositionCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int)  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild(),  node,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent.getLastChild(),  node,  astPositionCounter);	  return    computeFollowNode(fromNode,    parent.getLastChild(),    node);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int)	85	None	replace
695	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild(),  node,  firstSibling);  [CE]  cannot  find  symbol  firstSibling  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild(),  node,  firstSibling);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent.getLastChild(),  node,  firstSibling);	  return    computeFollowNode(fromNode,    parent.getLastChild(),    node);    	non-compiled	[CE]  cannot  find  symbol  firstSibling	85	None	replace
696	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild(),  node,  value);  [CE]  cannot  find  symbol  value  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild(),  node,  value);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent.getLastChild(),  node,  value);	  return    computeFollowNode(fromNode,    parent.getLastChild(),    node);    	non-compiled	[CE]  cannot  find  symbol  value	85	None	replace
697	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild(),  node,  lastJump);  [CE]  cannot  find  symbol  lastJump  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild(),  node,  lastJump);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent.getLastChild(),  node,  lastJump);	  return    computeFollowNode(fromNode,    parent.getLastChild(),    node);    	non-compiled	[CE]  cannot  find  symbol  lastJump	85	None	replace
698	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  cfg,  astPositionCounter);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,ControlFlowGraph<Node>,int)  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  cfg,  astPositionCounter);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  this,  cfg,  astPositionCounter);	  NodeTraversal.traverse(compiler,    node,    this,    cfg);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,ControlFlowGraph<Node>,int)	73	None	replace
699	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  parent,  cfg);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node,ControlFlowGraph<Node>)  [FE]                  StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  parent,  cfg);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  this,  parent,  cfg);	  NodeTraversal.traverse(compiler,    node,    this,    cfg);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node,ControlFlowGraph<Node>)	73	None	replace
700	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  astPositionCounter,  cfg);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,int,ControlFlowGraph<Node>)  [FE]                    StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  astPositionCounter,  cfg);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  this,  astPositionCounter,  cfg);	  NodeTraversal.traverse(compiler,    node,    this,    cfg);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,int,ControlFlowGraph<Node>)	73	None	replace
701	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  cfg,  astPosition);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,ControlFlowGraph<Node>,Map<Node,Integer>)  [FE]                      StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  cfg,  astPosition);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  this,  cfg,  astPosition);	  NodeTraversal.traverse(compiler,    node,    this,    cfg);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,ControlFlowGraph<Node>,Map<Node,Integer>)	73	None	replace
702	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent,  this,  cfg);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,ControlFlowAnalysis,ControlFlowGraph<Node>)  [FE]                        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent,  this,  cfg);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  parent,  this,  cfg);	  NodeTraversal.traverse(compiler,    node,    this,    cfg);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,ControlFlowAnalysis,ControlFlowGraph<Node>)	73	None	replace
703	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent.getFirstChild(),  node,  firstSibling);  [CE]  cannot  find  symbol  firstSibling  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  parent.getFirstChild(),  node,  firstSibling);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  parent.getFirstChild(),  node,  firstSibling);	  return    computeFallThrough(fromNode,    parent.getFirstChild(),    node);    	non-compiled	[CE]  cannot  find  symbol  firstSibling	265	None	replace
704	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent.getFirstChild(),  node,  finallyMap);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  parent.getFirstChild(),  node,  finallyMap);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  parent.getFirstChild(),  node,  finallyMap);	  return    computeFallThrough(fromNode,    parent.getFirstChild(),    node);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	265	None	replace
705	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent.getFirstChild(),  node,  lastJump);  [CE]  cannot  find  symbol  lastJump  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  parent.getFirstChild(),  node,  lastJump);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  parent.getFirstChild(),  node,  lastJump);	  return    computeFallThrough(fromNode,    parent.getFirstChild(),    node);    	non-compiled	[CE]  cannot  find  symbol  lastJump	265	None	replace
706	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent.getFirstChild(),  node,  this);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  parent.getFirstChild(),  node,  this);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  parent.getFirstChild(),  node,  this);	  return    computeFallThrough(fromNode,    parent.getFirstChild(),    node);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	265	None	replace
707	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getFirstChild());  Node  parent  =  node.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getFirstChild());  Node  parent  =  node.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode.getFirstChild());  Node  parent  =  node.getParent();	  return    computeFallThrough(node.getFirstChild());    Node    parent    =    node.getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	7	None	replace
708	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getFirstChild());  Node  parent  =  node.getNext();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getFirstChild());  Node  parent  =  node.getNext();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode.getFirstChild());  Node  parent  =  node.getNext();	  return    computeFallThrough(node.getFirstChild());    Node    parent    =    node.getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	7	None	replace
709	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getLastChild());  Node  parent  =  node.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getLastChild());  Node  parent  =  node.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode.getLastChild());  Node  parent  =  node.getParent();	  return    computeFallThrough(node.getFirstChild());    Node    parent    =    node.getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	7	None	replace
710	[BUG]  [BUGGY]  Node  parent  =  node.getParent();  return  computeFollowNode(parent,  fromNode.getLastChild());  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  node.getParent();  return  computeFollowNode(parent,  fromNode.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  node.getParent();  return  computeFollowNode(parent,  fromNode.getLastChild());	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    parent    =    node.getParent();    return    computeFallThrough(parent.getLastChild());    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	161	None	replace
711	[BUG]  [BUGGY]  Node  parent  =  parent.getLastChild();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  parent.getLastChild();	          Node    nextSibling    =    parent.getFirstChild();    Node    parent    =    parent.getLastChild();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	125	None	replace
712	[BUG]  [BUGGY]  Node  nextSibling  =  node.getFirstChild();  Node  parent  =  parent.getLastChild();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getFirstChild();  Node  parent  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  node.getFirstChild();  Node  parent  =  parent.getLastChild();	          Node    nextSibling    =    parent.getFirstChild();    Node    parent    =    parent.getLastChild();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	125	None	replace
713	[BUG]  [BUGGY]  Node  nextSibling  =  fromNode.getFirstChild();  Node  parent  =  parent.getLastChild();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  fromNode.getFirstChild();  Node  parent  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  fromNode.getFirstChild();  Node  parent  =  parent.getLastChild();	          Node    nextSibling    =    parent.getFirstChild();    Node    parent    =    parent.getLastChild();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	125	None	replace
714	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(node,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  parent);	  	compilable	  [FE]  RuntimeException  	198	7	add
715	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  parent);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(node,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  parent);	  	compilable	  [FE]  RuntimeException  	198	7	add
716	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(node,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  node);	  	compilable	  [FE]  RuntimeException  	198	7	add
717	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  node);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(node,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  node);	  	compilable	  [FE]  RuntimeException  	198	7	add
718	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  child);  [CE]  cannot  find  symbol  child  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  child);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(node,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  child);	  	non-compiled	[CE]  cannot  find  symbol  child	198	None	add
719	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  node);  NodeUtil.removeChild(node);  NodeUtil.removeChild(parent,  node);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  node);  NodeUtil.removeChild(node);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(node,    node);    NodeUtil.removeChild(node);  NodeUtil.removeChild(parent,  node);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	198	None	add
720	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  node);  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(node,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(node,    node);    NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(node,  parent);	  	compilable	  [FE]  RuntimeException  	198	7	add
721	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  node);  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(node,  parent);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  node);  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(node,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(node,    node);    NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(node,  parent);	  	compilable	  [FE]  RuntimeException  	198	7	add
722	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  node);  NodeUtil.addChildToFront(parent,  node);  NodeUtil.removeChild(node,  parent);  [CE]  cannot  find  symbol  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  node);  NodeUtil.addChildToFront(parent,  node);  NodeUtil.removeChild(node,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(node,    node);    NodeUtil.addChildToFront(parent,  node);  NodeUtil.removeChild(node,  parent);	  	non-compiled	[CE]  cannot  find  symbol	198	None	add
723	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  needsTraverseFunctions);  [CE]  cannot  find  symbol  needsTraverseFunctions  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  needsTraverseFunctions);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  nodePriorities,  needsTraverseFunctions);	  return    computeFollowNode(fromNode,    parent,    nodePriorities,    values);    	non-compiled	[CE]  cannot  find  symbol  needsTraverseFunctions	32	None	replace
724	[BUG]  [BUGGY]  Node  parent  =  node.getParent();  return  computeFollowNode(parent,  parent.getLastChild());  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  node.getParent();  return  computeFollowNode(parent,  parent.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  node.getParent();  return  computeFollowNode(parent,  parent.getLastChild());	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    parent    =    node.getParent();    return    computeFollowNode(fromNode,    parent.getLastChild());    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	77	None	replace
725	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFallThrough(nextSibling.getLastChild());    }    	compilable	  [FE]  AssertionFailedError  	221	5	replace
726	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFallThrough(nextSibling.getLastChild());    }    	compilable	  [FE]  AssertionFailedError  	221	5	replace
727	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);	  	compilable	  [FE]  AssertionFailedError  	132	5	add
728	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);	  	compilable	  [FE]  AssertionFailedError  	132	5	add
729	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node);  NodeUtil.removeChild(parent,  node);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node);  NodeUtil.removeChild(parent,  node);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	132	None	add
730	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent);  NodeUtil.removeChild(parent,  node);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent);  NodeUtil.removeChild(parent,  node);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	132	None	add
731	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.addChildToFront(parent,  node);  NodeUtil.removeChild(parent,  node);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.addChildToFront(parent,  node);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    NodeUtil.addChildToFront(parent,  node);  NodeUtil.removeChild(parent,  node);	  	non-compiled	[CE]  cannot  find  symbol	132	None	add
732	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  node);	  	compilable	  [FE]  RuntimeException  	132	7	add
733	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  node);  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  node);	  	compilable	  [FE]  RuntimeException  	132	7	add
734	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(fromNode);  NodeUtil.removeChild(parent,  node);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(fromNode);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(fromNode);  NodeUtil.removeChild(parent,  node);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	132	None	add
735	[BUG]  [BUGGY]  Node  body  =  node.getFirstChild();  Node  parent  =  body.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  node.getFirstChild();  Node  parent  =  body.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  node.getFirstChild();  Node  parent  =  body.getFirstChild();	          Node    body    =    parent.getFirstChild();    Node    parent    =    body.getFirstChild();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	185	None	replace
736	[BUG]  [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  parent  =  body.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  parent  =  body.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  fromNode.getFirstChild();  Node  parent  =  body.getFirstChild();	          Node    body    =    parent.getFirstChild();    Node    parent    =    body.getFirstChild();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	185	None	replace
737	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent.getFirstChild(),  astPositionCounter);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  parent.getFirstChild(),  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  parent.getFirstChild(),  astPositionCounter);	  return    computeFallThrough(fromNode,    parent.getFirstChild());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	86	None	replace
738	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent.getFirstChild(),  1);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  parent.getFirstChild(),  1);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  parent.getFirstChild(),  1);	  return    computeFallThrough(fromNode,    parent.getFirstChild());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	86	None	replace
739	[BUG]  [BUGGY]  Node  nextSibling  =  fromNode.getFirstChild();  Node  nextSibling  =  fromNode.getFirstChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  fromNode.getFirstChild();  Node  nextSibling  =  fromNode.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    fromNode.getFirstChild();    Node  nextSibling  =  fromNode.getFirstChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	5	None	add
740	[BUG]  [BUGGY]  Node  nextSibling  =  fromNode.getFirstChild();  Node  nextSibling  =  fromNode.getLastChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  fromNode.getFirstChild();  Node  nextSibling  =  fromNode.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    fromNode.getFirstChild();    Node  nextSibling  =  fromNode.getLastChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	5	None	add
741	[BUG]  [BUGGY]  Node  nextSibling  =  fromNode.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  fromNode.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    fromNode.getFirstChild();    Node  nextSibling  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	5	None	add
742	[BUG]  [BUGGY]  Node  nextSibling  =  fromNode.getFirstChild();  Node  nextSibling  =  toNode.getFirstChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  fromNode.getFirstChild();  Node  nextSibling  =  toNode.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    fromNode.getFirstChild();    Node  nextSibling  =  toNode.getFirstChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	5	None	add
743	[BUG]  [BUGGY]  Node  nextSibling  =  fromNode.getFirstChild();  Node  nextSibling  =  parent.getLastChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  fromNode.getFirstChild();  Node  nextSibling  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    fromNode.getFirstChild();    Node  nextSibling  =  parent.getLastChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	5	None	add
744	[BUG]  [BUGGY]  Node  nextSibling  =  fromNode.getFirstChild();  Node  nextSibling  =  node.getFirstChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  fromNode.getFirstChild();  Node  nextSibling  =  node.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    fromNode.getFirstChild();    Node  nextSibling  =  node.getFirstChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	5	None	add
745	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  astPositionCounter);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,int)  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  astPositionCounter);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  parent,  this,  astPositionCounter);	  NodeTraversal.traverse(compiler,    parent,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,int)	68	None	replace
746	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  astPosition);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Map<Node,Integer>)  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  astPosition);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  parent,  this,  astPosition);	  NodeTraversal.traverse(compiler,    parent,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Map<Node,Integer>)	68	None	replace
747	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  fromNode);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node)  [FE]        StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  parent,  this,  fromNode);	  NodeTraversal.traverse(compiler,    parent,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node)	68	None	replace
748	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  node  =  parent.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  node  =  parent.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent);  Node  node  =  parent.getFirstChild();	  return    computeFollowNode(fromNode,    node);    Node    node    =    parent.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	107	None	replace
749	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent);  Node  node  =  parent.getFirstChild();  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  parent);  Node  node  =  parent.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  parent);  Node  node  =  parent.getFirstChild();	  return    computeFollowNode(fromNode,    node);    Node    node    =    parent.getFirstChild();    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	107	None	replace
750	[BUG]  [BUGGY]  node.setLastChild();  return  computeFollowNode(fromNode.getFirstChild());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  node.setLastChild();  return  computeFollowNode(fromNode.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	node.setLastChild();  return  computeFollowNode(fromNode.getFirstChild());	  return    computeFallThrough(node.getLastChild());    return    computeFollowNode(fromNode.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol	201	None	replace
751	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    parent.removeChild(fromNode);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);	  	compilable	  [FE]  RuntimeException  	139	7	add
752	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    parent.removeChild(fromNode);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);	  	compilable	  [FE]  RuntimeException  	139	7	add
753	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    parent.removeChild(fromNode);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);	  	compilable	  [FE]  RuntimeException  	139	6	add
754	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    parent.removeChild(fromNode);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);	  	compilable	  [FE]  RuntimeException  	139	6	add
755	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  NodeUtil.removeChild(node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  NodeUtil.removeChild(node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    parent.removeChild(fromNode);    NodeUtil.removeChild(node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	139	None	add
756	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  NodeUtil.removeChild(node);  NodeUtil.removeChild(parent,  node);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  NodeUtil.removeChild(node);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    parent.removeChild(fromNode);    NodeUtil.removeChild(node);  NodeUtil.removeChild(parent,  node);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	139	None	add
757	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent);  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent);  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    parent.removeChild(fromNode);    NodeUtil.removeChild(parent);  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	139	None	add
758	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    parent.removeChild(fromNode);    NodeUtil.removeChild(parent,  node);	  	compilable	  [FE]  RuntimeException  	139	6	add
759	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  node);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    parent.removeChild(fromNode);    NodeUtil.removeChild(parent,  node);	  	compilable	  [FE]  RuntimeException  	139	6	add
760	[BUG]  [BUGGY]  return  computeFallThrough(parent.getLastChild());  Node  parent  =  node.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(parent.getLastChild());  Node  parent  =  node.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(parent.getLastChild());    Node  parent  =  node.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	38	None	add
761	[BUG]  [BUGGY]  return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(parent.getLastChild());    return  computeFallThrough(parent.getLastChild());	  	non-compiled	[CE]  unreachable  statement	38	None	add
762	[BUG]  [BUGGY]  return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(fromNode.getLastChild());  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(fromNode.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(parent.getLastChild());    return  computeFallThrough(fromNode.getLastChild());	  	non-compiled	[CE]  unreachable  statement	38	None	add
763	[BUG]  [BUGGY]  return  computeFallThrough(parent.getLastChild());  return  computeFollowNode(fromNode,  parent.getLastChild());  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(parent.getLastChild());  return  computeFollowNode(fromNode,  parent.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(parent.getLastChild());    return  computeFollowNode(fromNode,  parent.getLastChild());	  	non-compiled	[CE]  unreachable  statement	38	None	add
764	[BUG]  [BUGGY]  return  computeFallThrough(parent.getLastChild());  return  computeFollowNode(fromNode.getFirstChild());  [CE]  unreachable  statement  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(parent.getLastChild());  return  computeFollowNode(fromNode.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(parent.getLastChild());    return  computeFollowNode(fromNode.getFirstChild());	  	non-compiled	[CE]  unreachable  statement	38	None	add
765	[BUG]  [BUGGY]  return  computeFallThrough(parent.getLastChild());  Node  parent  =  node.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(parent.getLastChild());  Node  parent  =  node.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(parent.getLastChild());    Node  parent  =  node.getFirstChild();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	38	None	add
766	[BUG]  [BUGGY]  Node  node  =  parent.getLastChild();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  node  =  parent.getLastChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  node  =  parent.getLastChild();	  return    computeFollowNode(fromNode,    node);    Node    node    =    parent.getLastChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	204	None	replace
767	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  node  =  parent.getLastChild();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  node  =  parent.getLastChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent);  Node  node  =  parent.getLastChild();	  return    computeFollowNode(fromNode,    node);    Node    node    =    parent.getLastChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	204	None	replace
768	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  node,  lastJump);  [CE]  cannot  find  symbol  lastJump  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  node,  lastJump);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent.getFirstChild(),  node,  lastJump);	  return    computeFollowNode(fromNode,    parent.getFirstChild(),    node);    	non-compiled	[CE]  cannot  find  symbol  lastJump	87	None	replace
769	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  node,  firstSibling);  [CE]  cannot  find  symbol  firstSibling  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  node,  firstSibling);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent.getFirstChild(),  node,  firstSibling);	  return    computeFollowNode(fromNode,    parent.getFirstChild(),    node);    	non-compiled	[CE]  cannot  find  symbol  firstSibling	87	None	replace
770	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  node,  finallyMap);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>)  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  node,  finallyMap);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent.getFirstChild(),  node,  finallyMap);	  return    computeFollowNode(fromNode,    parent.getFirstChild(),    node);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>)	87	None	replace
771	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  node,  value);  [CE]  cannot  find  symbol  value  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  node,  value);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent.getFirstChild(),  node,  value);	  return    computeFollowNode(fromNode,    parent.getFirstChild(),    node);    	non-compiled	[CE]  cannot  find  symbol  value	87	None	replace
772	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  parent  =  node.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	parent  =  node.getParent();	  return    computeFallThrough(node.getLastChild());    Node    parent    =    node.getParent();    	compilable	  [FE]  AssertionFailedError  	115	5	replace
773	[BUG]  [BUGGY]  parent  =  node.getParent();  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  parent  =  node.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	parent  =  node.getParent();	  return    computeFallThrough(node.getLastChild());    Node    parent    =    node.getParent();    	compilable	  [FE]  AssertionFailedError  	115	5	replace
774	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getFirstChild();    Node  firstSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();  Node  firstSibling  =  parent.getFirstChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getFirstChild();    Node  firstSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();  Node  firstSibling  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getFirstChild();        Node    firstSibling    =    parent.getFirstChild();    Node  nextSibling  =  parent.getFirstChild();  Node  firstSibling  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	268	None	add
775	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getFirstChild();    Node  firstSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getLastChild();  Node  firstSibling  =  parent.getFirstChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getFirstChild();    Node  firstSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getLastChild();  Node  firstSibling  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getFirstChild();        Node    firstSibling    =    parent.getFirstChild();    Node  nextSibling  =  parent.getLastChild();  Node  firstSibling  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	268	None	add
776	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getFirstChild();    Node  firstSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();  Node  firstSibling  =  parent.getLastChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getFirstChild();    Node  firstSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();  Node  firstSibling  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getFirstChild();        Node    firstSibling    =    parent.getFirstChild();    Node  nextSibling  =  parent.getFirstChild();  Node  firstSibling  =  parent.getLastChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	268	None	add
777	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getFirstChild();    Node  firstSibling  =  parent.getFirstChild();  Node  nextSibling  =  firstSibling.getLastChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getFirstChild();    Node  firstSibling  =  parent.getFirstChild();  Node  nextSibling  =  firstSibling.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getFirstChild();        Node    firstSibling    =    parent.getFirstChild();    Node  nextSibling  =  firstSibling.getLastChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	268	None	add
778	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getFirstChild();    Node  firstSibling  =  parent.getFirstChild();  Node  nextSibling  =  firstSibling.getFirstChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getFirstChild();    Node  firstSibling  =  parent.getFirstChild();  Node  nextSibling  =  firstSibling.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getFirstChild();        Node    firstSibling    =    parent.getFirstChild();    Node  nextSibling  =  firstSibling.getFirstChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	268	None	add
779	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getFirstChild();    Node  firstSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getFirstChild();    Node  firstSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getFirstChild();        Node    firstSibling    =    parent.getFirstChild();    Node  nextSibling  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	268	None	add
780	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  node,  parent.cloneTree());  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  node,  parent.cloneTree());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  node,  parent.cloneTree());	  return    computeFallThrough(fromNode,    node,    parent);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	127	None	replace
781	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  node,  parent,  astPositionCounter);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  node,  parent,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  node,  parent,  astPositionCounter);	  return    computeFallThrough(fromNode,    node,    parent);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	127	None	replace
782	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getFirstChild());  Node  fromNode  =  parent.getFirstChild();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode.getFirstChild());  Node  fromNode  =  parent.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode.getFirstChild());    Node  fromNode  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	36	None	add
783	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getFirstChild());  Node  fromNode  =  node.getFirstChild();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode.getFirstChild());  Node  fromNode  =  node.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode.getFirstChild());    Node  fromNode  =  node.getFirstChild();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	36	None	add
784	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getFirstChild());  Node  fromNode  =  parent.getParent();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode.getFirstChild());  Node  fromNode  =  parent.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode.getFirstChild());    Node  fromNode  =  parent.getParent();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	36	None	add
785	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getFirstChild());  return  computeFallThrough(fromNode.getFirstChild());  [CE]  unreachable  statement  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode.getFirstChild());  return  computeFallThrough(fromNode.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode.getFirstChild());    return  computeFallThrough(fromNode.getFirstChild());	  	non-compiled	[CE]  unreachable  statement	36	None	add
786	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getFirstChild());  return  computeFallThrough(fromNode.getLastChild());  [CE]  unreachable  statement  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode.getFirstChild());  return  computeFallThrough(fromNode.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode.getFirstChild());    return  computeFallThrough(fromNode.getLastChild());	  	non-compiled	[CE]  unreachable  statement	36	None	add
787	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getFirstChild());  Node  toNode  =  parent.getFirstChild();  [CE]  unreachable  statement  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode.getFirstChild());  Node  toNode  =  parent.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode.getFirstChild());    Node  toNode  =  parent.getFirstChild();	  	non-compiled	[CE]  unreachable  statement	36	None	add
788	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getNext();  AssertionFailedError  <  Node>  parentSibling  =  parent.getNext();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getNext();  AssertionFailedError  <  Node>  parentSibling  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getNext();  AssertionFailedError  <  Node>  parentSibling  =  parent.getNext();	          Node    nextSibling    =    parent.getNext();    AssertionFailedError    <    Node>    nextSibling    =    parent.getNext();    	non-compiled	[CE]  cannot  find  symbol	165	None	replace
789	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  AssertionFailedError  <  Node>  parentSibling  =  parent.getNext();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getNext();  AssertionFailedError  <  Node>  parentSibling  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  node.getNext();  AssertionFailedError  <  Node>  parentSibling  =  parent.getNext();	          Node    nextSibling    =    parent.getNext();    AssertionFailedError    <    Node>    nextSibling    =    parent.getNext();    	non-compiled	[CE]  cannot  find  symbol	165	None	replace
790	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  AssertionFailedError  <  Node>  parent  =  parent.getNext();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getNext();  AssertionFailedError  <  Node>  parent  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  node.getNext();  AssertionFailedError  <  Node>  parent  =  parent.getNext();	          Node    nextSibling    =    parent.getNext();    AssertionFailedError    <    Node>    nextSibling    =    parent.getNext();    	non-compiled	[CE]  cannot  find  symbol	165	None	replace
791	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getNext();  AssertionFailedError  <  Node>  parentSibling  =  parent.getParent();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getNext();  AssertionFailedError  <  Node>  parentSibling  =  parent.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getNext();  AssertionFailedError  <  Node>  parentSibling  =  parent.getParent();	          Node    nextSibling    =    parent.getNext();    AssertionFailedError    <    Node>    nextSibling    =    parent.getNext();    	non-compiled	[CE]  cannot  find  symbol	165	None	replace
792	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  null);	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=    null);    	compilable	  [FE]  AssertionFailedError  	168	5	replace
793	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  null);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  null);	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=    null);    	compilable	  [FE]  AssertionFailedError  	168	5	replace
794	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Preconditions.checkState(nextSibling!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  parent.getFirstChild();  Preconditions.checkState(nextSibling!=  null);	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=    null);    	compilable	  [FE]  AssertionFailedError  	168	5	replace
795	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Preconditions.checkState(nextSibling!=  null);  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Preconditions.checkState(nextSibling!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getFirstChild();  Preconditions.checkState(nextSibling!=  null);	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=    null);    	compilable	  [FE]  AssertionFailedError  	168	5	replace
796	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling!=  null);	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=    null);    	compilable	  [FE]  AssertionFailedError  	168	5	replace
797	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling!=  null);  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling!=  null);	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=    null);    	compilable	  [FE]  AssertionFailedError  	168	5	replace
798	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling!=  null);	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=    null);    	compilable	  [FE]  AssertionFailedError  	168	5	replace
799	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling!=  null);  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling!=  null);	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=    null);    	compilable	  [FE]  AssertionFailedError  	168	5	replace
800	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(fromNode);  NodeUtil.redeclareVarsInsideBranch(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.redeclareVarsInsideBranch(fromNode);    NodeUtil.redeclareVarsInsideBranch(fromNode);	  	compilable	  [FE]  RuntimeException  	240	4	add
801	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(fromNode);  NodeUtil.redeclareVarsInsideBranch(fromNode);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(fromNode);  NodeUtil.redeclareVarsInsideBranch(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.redeclareVarsInsideBranch(fromNode);    NodeUtil.redeclareVarsInsideBranch(fromNode);	  	compilable	  [FE]  RuntimeException  	240	4	add
802	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(fromNode);  NodeUtil.redeclareVarsInsideBranch(parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.redeclareVarsInsideBranch(fromNode);    NodeUtil.redeclareVarsInsideBranch(parent);	  	compilable	  [FE]  RuntimeException  	240	4	add
803	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(fromNode);  NodeUtil.redeclareVarsInsideBranch(parent);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(fromNode);  NodeUtil.redeclareVarsInsideBranch(parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.redeclareVarsInsideBranch(fromNode);    NodeUtil.redeclareVarsInsideBranch(parent);	  	compilable	  [FE]  RuntimeException  	240	4	add
804	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(fromNode);  NodeUtil.redeclareVarsInsideBranch(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.redeclareVarsInsideBranch(fromNode);    NodeUtil.redeclareVarsInsideBranch(node);	  	compilable	  [FE]  RuntimeException  	240	4	add
805	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(fromNode);  NodeUtil.redeclareVarsInsideBranch(node);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(fromNode);  NodeUtil.redeclareVarsInsideBranch(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.redeclareVarsInsideBranch(fromNode);    NodeUtil.redeclareVarsInsideBranch(node);	  	compilable	  [FE]  RuntimeException  	240	4	add
806	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(fromNode);  NodeUtil.redeclareVarsInsideBranch(fromNode);  return  computeFollowNode(fromNode,  parent);  [CE]  unreachable  statement  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(fromNode);  NodeUtil.redeclareVarsInsideBranch(fromNode);  return  computeFollowNode(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.redeclareVarsInsideBranch(fromNode);    NodeUtil.redeclareVarsInsideBranch(fromNode);  return  computeFollowNode(fromNode,  parent);	  	non-compiled	[CE]  unreachable  statement	240	None	add
807	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(fromNode);  NodeUtil.redeclareVarsInsideBranch(fromNode);  parent.replaceChild(node,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.redeclareVarsInsideBranch(fromNode);    NodeUtil.redeclareVarsInsideBranch(fromNode);  parent.replaceChild(node,  node);	  	compilable	  [FE]  RuntimeException  	240	7	add
808	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(fromNode);  NodeUtil.redeclareVarsInsideBranch(fromNode);  parent.replaceChild(node,  node);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(fromNode);  NodeUtil.redeclareVarsInsideBranch(fromNode);  parent.replaceChild(node,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.redeclareVarsInsideBranch(fromNode);    NodeUtil.redeclareVarsInsideBranch(fromNode);  parent.replaceChild(node,  node);	  	compilable	  [FE]  RuntimeException  	240	7	add
809	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(fromNode);  NodeUtil.redeclareVarsInsideBranch(fromNode);  parent.replaceChild(lastJump,  node);  [CE]  cannot  find  symbol  lastJump  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(fromNode);  NodeUtil.redeclareVarsInsideBranch(fromNode);  parent.replaceChild(lastJump,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.redeclareVarsInsideBranch(fromNode);    NodeUtil.redeclareVarsInsideBranch(fromNode);  parent.replaceChild(lastJump,  node);	  	non-compiled	[CE]  cannot  find  symbol  lastJump	240	None	add
810	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(parent,    parent);    NodeUtil.removeChild(parent,  parent);	  	compilable	  [FE]  RuntimeException  	89	7	add
811	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  parent);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,    parent);    NodeUtil.removeChild(parent,  parent);	  	compilable	  [FE]  RuntimeException  	89	7	add
812	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(parent,    parent);    NodeUtil.removeChild(fromNode,  parent);	  	compilable	  [FE]  RuntimeException  	89	7	add
813	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(fromNode,  parent);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,    parent);    NodeUtil.removeChild(fromNode,  parent);	  	compilable	  [FE]  RuntimeException  	89	7	add
814	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  parent);  return  computeFollowNode(fromNode,  parent);  [CE]  unreachable  statement  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  parent);  return  computeFollowNode(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,    parent);    NodeUtil.removeChild(parent,  parent);  return  computeFollowNode(fromNode,  parent);	  	non-compiled	[CE]  unreachable  statement	89	None	add
815	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  parent);  this.lastJump  =  node.getLastChild();  [CE]  cannot  find  symbol  lastJump  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  parent);  this.lastJump  =  node.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,    parent);    NodeUtil.removeChild(parent,  parent);  this.lastJump  =  node.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol  lastJump	89	None	add
816	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  parent);  return  computeFallThrough(fromNode,  parent);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  parent);  return  computeFallThrough(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,    parent);    NodeUtil.removeChild(parent,  parent);  return  computeFallThrough(fromNode,  parent);	  	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	89	None	add
817	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  parent);  return  computeFallThrough(node.getLastChild());  [CE]  unreachable  statement  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  parent);  return  computeFallThrough(node.getLastChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,    parent);    NodeUtil.removeChild(parent,  parent);  return  computeFallThrough(node.getLastChild());	  	non-compiled	[CE]  unreachable  statement	89	None	add
818	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [CE]  cannot  find  symbol  NeighborTraversal  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NeighborTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NeighborTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    }    else    if(parent.getType()    ==    Token.FUNCTION)    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  cannot  find  symbol  NeighborTraversal	147	None	replace
819	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  node,  this);  [CE]  cannot  find  symbol  NeighborTraversal  [FE]                  StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NeighborTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NeighborTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  node,  this);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    }    else    if(parent.getType()    ==    Token.FUNCTION)    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  cannot  find  symbol  NeighborTraversal	147	None	replace
820	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  [CE]  cannot  find  symbol  NeighborTraversal  [FE]                    StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NeighborTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NeighborTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    }    else    if(parent.getType()    ==    Token.FUNCTION)    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  cannot  find  symbol  NeighborTraversal	147	None	replace
821	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(node,    node);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);	  	compilable	  [FE]  RuntimeException  	65	7	add
822	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(node,    node);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);	  	compilable	  [FE]  RuntimeException  	65	7	add
823	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);  NodeUtil.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);  NodeUtil.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(node,    node);    NodeUtil.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	65	None	add
824	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(node,    node);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);	  	compilable	  [FE]  RuntimeException  	65	7	add
825	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(node,    node);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);	  	compilable	  [FE]  RuntimeException  	65	7	add
826	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(node,    node);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);	  	compilable	  [FE]  RuntimeException  	65	7	add
827	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(node,    node);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);	  	compilable	  [FE]  RuntimeException  	65	7	add
828	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.replaceChild(parent,  fromNode);  parent.replaceChild(node,  node);  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.replaceChild(parent,  fromNode);  parent.replaceChild(node,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(node,    node);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.replaceChild(parent,  fromNode);  parent.replaceChild(node,  node);	  	non-compiled	[CE]  cannot  find  symbol	65	None	add
829	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);  NodeUtil.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);  NodeUtil.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(node,    node);    NodeUtil.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	65	None	add
830	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  nextSibling  =  parent.getNext();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  nextSibling  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling    ==    null)    {    return    computeFallThrough(nextSibling.getLastChild());    }    Node  nextSibling  =  parent.getNext();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	224	None	add
831	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  parent  =  nextSibling.getNext();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  parent  =  nextSibling.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling    ==    null)    {    return    computeFallThrough(nextSibling.getLastChild());    }    Node  parent  =  nextSibling.getNext();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	224	None	add
832	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  parent  =  nextSibling.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  parent  =  nextSibling.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling    ==    null)    {    return    computeFallThrough(nextSibling.getLastChild());    }    Node  parent  =  nextSibling.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	224	None	add
833	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  parent  =  node.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  parent  =  node.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling    ==    null)    {    return    computeFallThrough(nextSibling.getLastChild());    }    Node  parent  =  node.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	224	None	add
834	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  nextSibling  =  parent.getFirstChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  nextSibling  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling    ==    null)    {    return    computeFallThrough(nextSibling.getLastChild());    }    Node  nextSibling  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	224	None	add
835	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  fromNode  =  parent.getParent();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  fromNode  =  parent.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling    ==    null)    {    return    computeFallThrough(nextSibling.getLastChild());    }    Node  fromNode  =  parent.getParent();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	224	None	add
836	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  body  =  node.getFirstChild();  [CE]  unreachable  statement  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  body  =  node.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent);  Node  body  =  node.getFirstChild();	  return    computeFollowNode(fromNode,    node);    Node    body    =    node.getFirstChild();    	non-compiled	[CE]  unreachable  statement	219	None	replace
837	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Preconditions.checkState(parent.getType()  ==  Token.GETPROP);	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    parent    =    node.getParent();    if(parent!=    null)    {    return    computeFollowNode(fromNode,    parent.getLastChild());    }    	compilable	  [FE]  RuntimeException  	75	7	replace
838	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Preconditions.checkState(parent.getType()  ==  Token.GETPROP);	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    parent    =    node.getParent();    if(parent!=    null)    {    return    computeFollowNode(fromNode,    parent.getLastChild());    }    	compilable	  [FE]  RuntimeException  	75	7	replace
839	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this,  astPositionCounter);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,int)  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this,  astPositionCounter);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  fromNode,  this,  astPositionCounter);	  NodeTraversal.traverse(compiler,    fromNode,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,int)	72	None	replace
840	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node)  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  fromNode,  this,  parent);	  NodeTraversal.traverse(compiler,    fromNode,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node)	72	None	replace
841	[BUG]  [BUGGY]  Node  body  =  parent.getParent();  Node  body  =  parent.getParent();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getParent();  Node  body  =  parent.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    parent.getParent();    Node  body  =  parent.getParent();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	251	None	add
842	[BUG]  [BUGGY]  Node  body  =  parent.getParent();  Node  parent  =  parent.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getParent();  Node  parent  =  parent.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    parent.getParent();    Node  parent  =  parent.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	251	None	add
843	[BUG]  [BUGGY]  Node  body  =  parent.getParent();  Node  body  =  parent.getLastChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getParent();  Node  body  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    parent.getParent();    Node  body  =  parent.getLastChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	251	None	add
844	[BUG]  [BUGGY]  Node  body  =  parent.getParent();  Node  parent  =  body.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getParent();  Node  parent  =  body.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    parent.getParent();    Node  parent  =  body.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	251	None	add
845	[BUG]  [BUGGY]  Node  body  =  parent.getParent();  Node  body  =  parent.getNext();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getParent();  Node  body  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    parent.getParent();    Node  body  =  parent.getNext();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	251	None	add
846	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getParent();  Node  head  =  parent.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node    body    =    parent.getParent();    Node  head  =  parent.getParent();	  	compilable	  [FE]  AssertionFailedError  	251	3	add
847	[BUG]  [BUGGY]  Node  body  =  parent.getParent();  Node  head  =  parent.getParent();  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getParent();  Node  head  =  parent.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    parent.getParent();    Node  head  =  parent.getParent();	  	compilable	  [FE]  AssertionFailedError  	251	3	add
848	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  node.removeFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  body  =  node.removeFirstChild();	  Node    body    =    parent.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	250	6	replace
849	[BUG]  [BUGGY]  Node  body  =  node.removeFirstChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  node.removeFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  node.removeFirstChild();	  Node    body    =    parent.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	250	6	replace
850	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  fromNode.removeFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  body  =  fromNode.removeFirstChild();	  Node    body    =    parent.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	250	6	replace
851	[BUG]  [BUGGY]  Node  body  =  fromNode.removeFirstChild();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  fromNode.removeFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  fromNode.removeFirstChild();	  Node    body    =    parent.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	250	6	replace
852	[BUG]  [BUGGY]  Node  parent  =  getParentNode(node.getFirstChild());  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getParentNode(node.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParentNode(node.getFirstChild());	  Node    parent    =    getParentNode(parent.getFirstChild());    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	152	None	replace
853	[BUG]  [BUGGY]  Node  parent  =  getParentNode(parent.getFirstChild(),  node);  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getParentNode(parent.getFirstChild(),  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParentNode(parent.getFirstChild(),  node);	  Node    parent    =    getParentNode(parent.getFirstChild());    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	152	None	replace
854	[BUG]  [BUGGY]  Node  parent  =  getParentNode(fromNode.getFirstChild());  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getParentNode(fromNode.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParentNode(fromNode.getFirstChild());	  Node    parent    =    getParentNode(parent.getFirstChild());    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	152	None	replace
855	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getFirstChild());  Node  body  =  node.getFirstChild();  [CE]  unreachable  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getFirstChild());  Node  body  =  node.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode.getFirstChild());  Node  body  =  node.getFirstChild();	  return    computeFallThrough(node.getFirstChild());    Node    body    =    node.getFirstChild();    	non-compiled	[CE]  unreachable  statement	277	None	replace
856	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getFirstChild());  Node  body  =  node.getLastChild();  [CE]  unreachable  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getFirstChild());  Node  body  =  node.getLastChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode.getFirstChild());  Node  body  =  node.getLastChild();	  return    computeFallThrough(node.getFirstChild());    Node    body    =    node.getFirstChild();    	non-compiled	[CE]  unreachable  statement	277	None	replace
857	[BUG]  [BUGGY]  Node  node  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  parent);  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  node  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  node  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  parent);	  return    computeFallThrough(node.getLastChild());    Node    node    =    parent.getFirstChild();    return    computeFollowNode(fromNode,    parent);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	203	None	replace
858	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  node  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	node  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  parent);	  return    computeFallThrough(node.getLastChild());    Node    node    =    parent.getFirstChild();    return    computeFollowNode(fromNode,    parent);    	compilable	  [FE]  AssertionFailedError  	203	3	replace
859	[BUG]  [BUGGY]  node  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  parent);  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  node  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	node  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  parent);	  return    computeFallThrough(node.getLastChild());    Node    node    =    parent.getFirstChild();    return    computeFollowNode(fromNode,    parent);    	compilable	  [FE]  AssertionFailedError  	203	3	replace
860	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(fromNode,    node);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);	  	compilable	  [FE]  RuntimeException  	62	7	add
861	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(fromNode,    node);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);	  	compilable	  [FE]  RuntimeException  	62	7	add
862	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(fromNode,    node);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);	  	compilable	  [FE]  RuntimeException  	62	7	add
863	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(fromNode,    node);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);	  	compilable	  [FE]  RuntimeException  	62	7	add
864	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(fromNode,    node);    NodeUtil.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	62	None	add
865	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(fromNode,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);	  	compilable	  [FE]  RuntimeException  	62	7	add
866	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(fromNode,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);	  	compilable	  [FE]  RuntimeException  	62	7	add
867	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.replaceChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.replaceChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(fromNode,    node);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.replaceChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);	  	non-compiled	[CE]  cannot  find  symbol	62	None	add
868	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(fromNode,    node);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);	  	compilable	  [FE]  RuntimeException  	62	7	add
869	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(fromNode,    node);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);	  	compilable	  [FE]  RuntimeException  	62	7	add
870	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.removeChild(parent,  node);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node);  parent.removeChild(parent,  node);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.removeChild(parent,    node);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	137	None	replace
871	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.removeChild(node,  parent);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.removeChild(node,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node);  parent.removeChild(node,  parent);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.removeChild(parent,    node);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	137	None	replace
872	[BUG]  [BUGGY]  NodeUtil.removeChild(node,  parent);  parent.removeChild(parent,  node);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(node,  parent);  parent.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(node,  parent);  parent.removeChild(parent,  node);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.removeChild(parent,    node);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	137	None	replace
873	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  parent);  parent.removeChild(parent,  node);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  parent);  parent.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  parent);  parent.removeChild(parent,  node);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.removeChild(parent,    node);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	137	None	replace
874	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  null);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling!=    null);    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  null);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	167	None	add
875	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getLastChild();  Preconditions.checkState(nextSibling!=  null);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getLastChild();  Preconditions.checkState(nextSibling!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling!=    null);    Node  nextSibling  =  parent.getLastChild();  Preconditions.checkState(nextSibling!=  null);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	167	None	add
876	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  null);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling!=    null);    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  null);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	167	None	add
877	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getFirstChild();  Preconditions.checkState(nextSibling!=  null);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getFirstChild();  Preconditions.checkState(nextSibling!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling!=    null);    Node  nextSibling  =  parent.getFirstChild();  Preconditions.checkState(nextSibling!=  null);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	167	None	add
878	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getNext();  preconditions.checkState(nextSibling!=  null);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getNext();  preconditions.checkState(nextSibling!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling!=    null);    Node  nextSibling  =  parent.getNext();  preconditions.checkState(nextSibling!=  null);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	167	None	add
879	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  fromNode,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    fromNode,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  fromNode,  this);	  	compilable	  [FE]  StackOverflowError  	179	7	add
880	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  fromNode,  this);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  fromNode,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    fromNode,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  fromNode,  this);	  	compilable	  [FE]  StackOverflowError  	179	7	add
881	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    fromNode,    this);    NodeTraversal.traverse(compiler,  node,  this);	  	compilable	  [FE]  StackOverflowError  	179	7	add
882	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  node,  this);  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    fromNode,    this);    NodeTraversal.traverse(compiler,  node,  this);	  	compilable	  [FE]  StackOverflowError  	179	7	add
883	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    fromNode,    this);    NodeTraversal.traverse(compiler,  parent,  this);	  	compilable	  [FE]  StackOverflowError  	179	7	add
884	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    fromNode,    this);    NodeTraversal.traverse(compiler,  parent,  this);	  	compilable	  [FE]  StackOverflowError  	179	7	add
885	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  fromNode,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    fromNode,    this);    NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  fromNode,  this);	  	compilable	  [FE]  StackOverflowError  	179	7	add
886	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  fromNode,  this);  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  fromNode,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    fromNode,    this);    NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  fromNode,  this);	  	compilable	  [FE]  StackOverflowError  	179	7	add
887	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getFirstChild();    Node  lastJump  =  parent.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();  Node  lastJump  =  parent.getLastChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getFirstChild();    Node  lastJump  =  parent.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();  Node  lastJump  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getFirstChild();        Node    lastJump    =    parent.getFirstChild();    Node  nextSibling  =  parent.getFirstChild();  Node  lastJump  =  parent.getLastChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	266	None	add
888	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getFirstChild();    Node  lastJump  =  parent.getFirstChild();  Node  nextSibling  =  parent.getLastChild();  Node  lastJump  =  parent.getLastChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getFirstChild();    Node  lastJump  =  parent.getFirstChild();  Node  nextSibling  =  parent.getLastChild();  Node  lastJump  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getFirstChild();        Node    lastJump    =    parent.getFirstChild();    Node  nextSibling  =  parent.getLastChild();  Node  lastJump  =  parent.getLastChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	266	None	add
889	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getFirstChild();    Node  lastJump  =  parent.getFirstChild();  Node  nextSibling  =  parent.getLastChild();  Node  lastJump  =  parent.getFirstChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getFirstChild();    Node  lastJump  =  parent.getFirstChild();  Node  nextSibling  =  parent.getLastChild();  Node  lastJump  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getFirstChild();        Node    lastJump    =    parent.getFirstChild();    Node  nextSibling  =  parent.getLastChild();  Node  lastJump  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	266	None	add
890	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getFirstChild();    Node  lastJump  =  parent.getFirstChild();  Node  nextSibling  =  parent.getLastChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getFirstChild();    Node  lastJump  =  parent.getFirstChild();  Node  nextSibling  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getFirstChild();        Node    lastJump    =    parent.getFirstChild();    Node  nextSibling  =  parent.getLastChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	266	None	add
891	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getFirstChild();    Node  lastJump  =  parent.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getFirstChild();    Node  lastJump  =  parent.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getFirstChild();        Node    lastJump    =    parent.getFirstChild();    Node  nextSibling  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	266	None	add
892	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getFirstChild();    Node  lastJump  =  parent.getFirstChild();  Node  nextSibling  =  parent.getLastChild();  Node  nextSibling  =  parent.getFirstChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getFirstChild();    Node  lastJump  =  parent.getFirstChild();  Node  nextSibling  =  parent.getLastChild();  Node  nextSibling  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getFirstChild();        Node    lastJump    =    parent.getFirstChild();    Node  nextSibling  =  parent.getLastChild();  Node  nextSibling  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	266	None	add
893	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild(),  parent.getLastChild());  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild(),  parent.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent.getLastChild(),  parent.getLastChild());	  return    computeFollowNode(fromNode,    parent.getLastChild());    return    computeFallThrough(fromNode,    parent.getLastChild());    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)	76	None	replace
894	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild(),  parent.getFirstChild());  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild(),  parent.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent.getLastChild(),  parent.getFirstChild());	  return    computeFollowNode(fromNode,    parent.getLastChild());    return    computeFallThrough(fromNode,    parent.getLastChild());    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)	76	None	replace
895	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node.getFirstChild());  Node  parent  =  node.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  node.getFirstChild());  Node  parent  =  node.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    node.getFirstChild());    Node  parent  =  node.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	206	None	add
896	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node.getFirstChild());  Node  body  =  parent.getFirstChild();  [CE]  unreachable  statement  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  node.getFirstChild());  Node  body  =  parent.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    node.getFirstChild());    Node  body  =  parent.getFirstChild();	  	non-compiled	[CE]  unreachable  statement	206	None	add
897	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node.getFirstChild());  Node  body  =  node.getLastChild();  [CE]  unreachable  statement  [FE]        StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  node.getFirstChild());  Node  body  =  node.getLastChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    node.getFirstChild());    Node  body  =  node.getLastChild();	  	non-compiled	[CE]  unreachable  statement	206	None	add
898	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node.getFirstChild());  Node  node  =  parent.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  node.getFirstChild());  Node  node  =  parent.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    node.getFirstChild());    Node  node  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	206	None	add
899	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node.getFirstChild());  NodeTraversal.traverse(compiler,  node,  this);  [CE]  unreachable  statement  [FE]            StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  node.getFirstChild());  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    node.getFirstChild());    NodeTraversal.traverse(compiler,  node,  this);	  	non-compiled	[CE]  unreachable  statement	206	None	add
900	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node.getFirstChild());  Node  body  =  node.getFirstChild();  [CE]  unreachable  statement  [FE]              StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  node.getFirstChild());  Node  body  =  node.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    node.getFirstChild());    Node  body  =  node.getFirstChild();	  	non-compiled	[CE]  unreachable  statement	206	None	add
901	[BUG]  [BUGGY]  NodeUtil.addChildToBack(parent,  node);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.addChildToBack(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.addChildToBack(parent,  node);	  NodeUtil.removeChild(node,    parent);    	non-compiled	[CE]  cannot  find  symbol	171	None	replace
902	[BUG]  [BUGGY]  NodeUtil.clearChild(parent,  node);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.clearChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.clearChild(parent,  node);	  NodeUtil.removeChild(node,    parent);    	non-compiled	[CE]  cannot  find  symbol	171	None	replace
903	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    NodeUtil.removeChild(parent,  node);	  	compilable	  [FE]  RuntimeException  	272	7	add
904	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.removeChild(parent,  node);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    NodeUtil.removeChild(parent,  node);	  	compilable	  [FE]  RuntimeException  	272	7	add
905	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	272	7	add
906	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	272	7	add
907	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	272	7	add
908	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	272	7	add
909	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	272	7	add
910	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	272	7	add
911	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FOR);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FOR);	  	compilable	  [FE]  RuntimeException  	272	7	add
912	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FOR);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FOR);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FOR);	  	compilable	  [FE]  RuntimeException  	272	7	add
913	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	272	7	add
914	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	272	7	add
915	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  return  computeFollowNode(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeTraversal.traverse(compiler,  parent,  this);  return  computeFollowNode(fromNode,  parent);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    return    computeFollowNode(fromNode,    parent);    	compilable	  [FE]  StackOverflowError  	146	7	replace
916	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  return  computeFollowNode(fromNode,  parent);  [FE]  StackOverflowError  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  return  computeFollowNode(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  parent,  this);  return  computeFollowNode(fromNode,  parent);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    return    computeFollowNode(fromNode,    parent);    	compilable	  [FE]  StackOverflowError  	146	7	replace
917	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(fromNode);    	compilable	  [FE]  RuntimeException  	61	6	replace
918	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(fromNode);    	compilable	  [FE]  RuntimeException  	61	6	replace
919	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  ParentUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  [CE]  cannot  find  symbol  ParentUtil  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  ParentUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  fromNode);  ParentUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(fromNode);    	non-compiled	[CE]  cannot  find  symbol  ParentUtil	61	None	replace
920	[BUG]  [BUGGY]  Node  body  =  parent.getLastChild();  Node  body  =  parent.getLastChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getLastChild();  Node  body  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    parent.getLastChild();    Node  body  =  parent.getLastChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	93	None	add
921	[BUG]  [BUGGY]  Node  body  =  parent.getLastChild();  Node  parent  =  parent.getLastChild();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getLastChild();  Node  parent  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    parent.getLastChild();    Node  parent  =  parent.getLastChild();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	93	None	add
922	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getLastChild();  Node  head  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node    body    =    parent.getLastChild();    Node  head  =  parent.getLastChild();	  	compilable	  [FE]  AssertionFailedError  	93	3	add
923	[BUG]  [BUGGY]  Node  body  =  parent.getLastChild();  Node  head  =  parent.getLastChild();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getLastChild();  Node  head  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    parent.getLastChild();    Node  head  =  parent.getLastChild();	  	compilable	  [FE]  AssertionFailedError  	93	3	add
924	[BUG]  [BUGGY]  Node  body  =  parent.getLastChild();  Node  body  =  parent.getFirstChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getLastChild();  Node  body  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    parent.getLastChild();    Node  body  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	93	None	add
925	[BUG]  [BUGGY]  Node  body  =  parent.getLastChild();  Node  body  =  node.getLastChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getLastChild();  Node  body  =  node.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    parent.getLastChild();    Node  body  =  node.getLastChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	93	None	add
926	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  nextSibling  =  parent.getNext();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  nextSibling  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling    ==    null)    {    return    computeFallThrough(parent.getLastChild());    }    Node  nextSibling  =  parent.getNext();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	226	None	add
927	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  parent  =  nextSibling.getNext();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  parent  =  nextSibling.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling    ==    null)    {    return    computeFallThrough(parent.getLastChild());    }    Node  parent  =  nextSibling.getNext();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	226	None	add
928	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  nextSibling  =  parent.getFirstChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  nextSibling  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling    ==    null)    {    return    computeFallThrough(parent.getLastChild());    }    Node  nextSibling  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	226	None	add
929	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  parent  =  nextSibling.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  parent  =  nextSibling.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling    ==    null)    {    return    computeFallThrough(parent.getLastChild());    }    Node  parent  =  nextSibling.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	226	None	add
930	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  parent  =  node.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  parent  =  node.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling    ==    null)    {    return    computeFallThrough(parent.getLastChild());    }    Node  parent  =  node.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	226	None	add
931	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  nextSibling  =  parent.getParent();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  nextSibling  =  parent.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling    ==    null)    {    return    computeFallThrough(parent.getLastChild());    }    Node  nextSibling  =  parent.getParent();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	226	None	add
932	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  astPositionCounter,  priorityCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,int,int)  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  astPositionCounter,  priorityCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent.getFirstChild(),  astPositionCounter,  priorityCounter);	  return    computeFollowNode(fromNode,    parent.getFirstChild(),    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,int,int)	88	None	replace
933	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  astPositionCounter,  priorityComparator);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,int,Comparator<DiGraphNode<Node,Branch>>)  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  astPositionCounter,  priorityComparator);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent.getFirstChild(),  astPositionCounter,  priorityComparator);	  return    computeFollowNode(fromNode,    parent.getFirstChild(),    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,int,Comparator<DiGraphNode<Node,Branch>>)	88	None	replace
934	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild(),  astPositionCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,int)  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild(),  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent.getLastChild(),  astPositionCounter);	  return    computeFollowNode(fromNode,    parent.getFirstChild(),    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,int)	88	None	replace
935	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  exceptionHandler,  astPositionCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Deque<Node>,int)  [FE]                  StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  exceptionHandler,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent.getFirstChild(),  exceptionHandler,  astPositionCounter);	  return    computeFollowNode(fromNode,    parent.getFirstChild(),    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Deque<Node>,int)	88	None	replace
936	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  astPositionCounter,  exceptionHandler);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,int,Deque<Node>)  [FE]                    StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  astPositionCounter,  exceptionHandler);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent.getFirstChild(),  astPositionCounter,  exceptionHandler);	  return    computeFollowNode(fromNode,    parent.getFirstChild(),    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,int,Deque<Node>)	88	None	replace
937	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(parent,  node,  FINALLY);  [CE]  cannot  find  symbol  FINALLY  [FE]        RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(parent,  node,  FINALLY);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.redeclareVarsInsideBranch(parent,  node,  FINALLY);	  NodeUtil.redeclareVarsInsideBranch(parent,    node);    	non-compiled	[CE]  cannot  find  symbol  FINALLY	238	None	replace
938	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(fromNode,  node);  [CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.redeclareVarsInsideBranch(fromNode,  node);	  NodeUtil.redeclareVarsInsideBranch(parent,    node);    	non-compiled	[CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;	238	None	replace
939	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(parent,  node,  firstChild);  [CE]  cannot  find  symbol  firstChild  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(parent,  node,  firstChild);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.redeclareVarsInsideBranch(parent,  node,  firstChild);	  NodeUtil.redeclareVarsInsideBranch(parent,    node);    	non-compiled	[CE]  cannot  find  symbol  firstChild	238	None	replace
940	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  NodeUtil.removeChild(node);  NodeUtil.removeChild(parent,  node);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  NodeUtil.removeChild(node);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    parent.removeChild(node);    NodeUtil.removeChild(node);  NodeUtil.removeChild(parent,  node);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	135	None	add
941	[BUG]  [BUGGY]  Node  parent  =  getParentNode(parent,  toNode);  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getParentNode(parent,  toNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParentNode(parent,  toNode);	  Node    parent    =    getParentNode(parent,    node);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	151	None	replace
942	[BUG]  [BUGGY]  Node  parent  =  getParentNode(toNode);  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getParentNode(toNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParentNode(toNode);	  Node    parent    =    getParentNode(node);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	149	None	replace
943	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  body  =  node.getLastChild();  [CE]  unreachable  statement  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  body  =  node.getLastChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent);  Node  body  =  node.getLastChild();	  return    computeFollowNode(fromNode,    node);    Node    body    =    node.getLastChild();    	non-compiled	[CE]  unreachable  statement	215	None	replace
944	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent);  Node  body  =  node.getLastChild();  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  parent);  Node  body  =  node.getLastChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  parent);  Node  body  =  node.getLastChild();	  return    computeFollowNode(fromNode,    node);    Node    body    =    node.getLastChild();    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	215	None	replace
945	[BUG]  [BUGGY]  TraverseFactory.traverse(compiler,  node,  this);  [CE]  cannot  find  symbol  TraverseFactory  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  TraverseFactory.traverse(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	TraverseFactory.traverse(compiler,  node,  this);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  cannot  find  symbol  TraverseFactory	142	None	replace
946	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parents,  this);  [CE]  cannot  find  symbol  parents  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  parents,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  parents,  this);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  cannot  find  symbol  parents	142	None	replace
947	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    parent.removeChild(fromNode);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(node);	  	compilable	  [FE]  RuntimeException  	139	7	add
948	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    parent.removeChild(fromNode);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(node);	  	compilable	  [FE]  RuntimeException  	139	7	add
949	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  thenBlock);  [CE]  cannot  find  symbol  thenBlock  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  thenBlock);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  thenBlock);	          NodeTraversal.traverse(compiler,    node,    this);    Preconditions.checkState(parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  thenBlock	184	None	replace
950	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.removeFirstChild();  Node  child  =  parent.removeFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node    body    =    parent.removeFirstChild();    Node  child  =  parent.removeFirstChild();	  	compilable	  [FE]  RuntimeException  	249	7	add
951	[BUG]  [BUGGY]  Node  body  =  parent.removeFirstChild();  Node  child  =  parent.removeFirstChild();  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.removeFirstChild();  Node  child  =  parent.removeFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    parent.removeFirstChild();    Node  child  =  parent.removeFirstChild();	  	compilable	  [FE]  RuntimeException  	249	7	add
952	[BUG]  [BUGGY]  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(child,  parent);  [CE]  cannot  find  symbol  child  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(child,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(node,    parent);    NodeUtil.removeChild(child,  parent);	  	non-compiled	[CE]  cannot  find  symbol  child	170	None	add
953	[BUG]  [BUGGY]  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(node,    parent);    NodeUtil.removeChild(parent);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	170	None	add
954	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getLastChild());  return  computeFollowNode(fromNode.getFirstChild());  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode.getLastChild());  return  computeFollowNode(fromNode.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode.getLastChild());    return  computeFollowNode(fromNode.getFirstChild());	  	non-compiled	[CE]  unreachable  statement	34	None	add
955	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getLastChild());  Node  fromNode  =  node.getFirstChild();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode.getLastChild());  Node  fromNode  =  node.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode.getLastChild());    Node  fromNode  =  node.getFirstChild();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	34	None	add
956	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getLastChild());  return  computeFallThrough(fromNode.getFirstChild());  [CE]  unreachable  statement  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode.getLastChild());  return  computeFallThrough(fromNode.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode.getLastChild());    return  computeFallThrough(fromNode.getFirstChild());	  	non-compiled	[CE]  unreachable  statement	34	None	add
957	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getLastChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getLastChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFollowNode(fromNode,    parent);    }    	compilable	  [FE]  RuntimeException  	229	7	replace
958	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getLastChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getLastChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getLastChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFollowNode(fromNode,    parent);    }    	compilable	  [FE]  RuntimeException  	229	7	replace
959	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFollowNode(fromNode,    parent);    }    	compilable	  [FE]  AssertionFailedError  	229	5	replace
960	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFollowNode(fromNode,    parent);    }    	compilable	  [FE]  AssertionFailedError  	229	5	replace
961	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  cfg,  toNode);  [CE]  cannot  find  symbol  toNode  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  cfg,  toNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  cfg,  toNode);	  NodeUtil.removeChild(parent,    cfg);    	non-compiled	[CE]  cannot  find  symbol  toNode	113	None	replace
962	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  cfg,  first);  [CE]  cannot  find  symbol  first  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  cfg,  first);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  cfg,  first);	  NodeUtil.removeChild(parent,    cfg);    	non-compiled	[CE]  cannot  find  symbol  first	113	None	replace
963	[BUG]  [BUGGY]  Node  body  =  child.getFirstChild();  Node  parent  =  body.getFirstChild();  [CE]  cannot  find  symbol  child  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  child.getFirstChild();  Node  parent  =  body.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  child.getFirstChild();  Node  parent  =  body.getFirstChild();	          Node    body    =    parent.getFirstChild();    Node    parent    =    body.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  child	185	None	replace
964	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  node);  Node  body  =  parent.getFirstChild();  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  node);  Node  body  =  parent.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  node);  Node  body  =  parent.getFirstChild();	  return    computeFollowNode(fromNode,    node);    Node    body    =    parent.getFirstChild();    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	108	None	replace
965	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  priorityCounter,  node,  astPositionCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,int,Node,int)  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  priorityCounter,  node,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  priorityCounter,  node,  astPositionCounter);	  return    computeFollowNode(fromNode,    parent,    node,    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,int,Node,int)	154	None	replace
966	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  priorityComparator,  astPositionCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Comparator<DiGraphNode<Node,Branch>>,int)  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  priorityComparator,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  node,  priorityComparator,  astPositionCounter);	  return    computeFollowNode(fromNode,    parent,    node,    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Comparator<DiGraphNode<Node,Branch>>,int)	154	None	replace
967	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  finallyMap,  iter);  [CE]  cannot  find  symbol  iter  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  finallyMap,  iter);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  finallyMap,  iter);	  NodeTraversal.traverse(compiler,    node,    this,    finallyMap);    	non-compiled	[CE]  cannot  find  symbol  iter	237	None	replace
968	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  FINALLY);  NodeUtil.addChildToFront(parent,  node);  [CE]  cannot  find  symbol  FINALLY  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  FINALLY);  NodeUtil.addChildToFront(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  FINALLY);  NodeUtil.addChildToFront(parent,  node);	          NodeUtil.removeChild(parent,    node);    NodeUtil.addChildToFront(parent,    node);    	non-compiled	[CE]  cannot  find  symbol  FINALLY	196	None	replace
969	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  this);  [CE]  cannot  find  symbol  child  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  child,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  child,  this);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    child,    this);    	non-compiled	[CE]  cannot  find  symbol  child	182	None	replace
970	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  fromNode  =  parent.getFirstChild();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  fromNode  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling    ==    null)    {    return    computeFallThrough(nextSibling.getLastChild());    }    Node  fromNode  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	224	None	add
971	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  parent  =  fromNode.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  parent  =  fromNode.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling    ==    null)    {    return    computeFallThrough(nextSibling.getLastChild());    }    Node  parent  =  fromNode.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	224	None	add
972	[BUG]  [BUGGY]  Node  parent  =  fromNode.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  fromNode.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  fromNode.getFirstChild();	  return    computeFallThrough(node.getLastChild());    Node    node    =    parent.getFirstChild();    if(node    ==    null)    {    return    computeFallThrough(node.getLastChild());    }    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	119	None	replace
973	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  Node  parent  =  nextSibling.getNext();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getNext();  Node  parent  =  nextSibling.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  node.getNext();  Node  parent  =  nextSibling.getNext();	          Node    nextSibling    =    parent.getNext();    Node    parent    =    nextSibling.getNext();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	27	None	replace
974	[BUG]  [BUGGY]  Node  nextSibling  =  fromNode.getNext();  Node  parent  =  nextSibling.getNext();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  fromNode.getNext();  Node  parent  =  nextSibling.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  fromNode.getNext();  Node  parent  =  nextSibling.getNext();	          Node    nextSibling    =    parent.getNext();    Node    parent    =    nextSibling.getNext();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	27	None	replace
975	[BUG]  [BUGGY]  Node  nextSibling  =  toNode.getNext();  Node  parent  =  nextSibling.getNext();  [CE]  cannot  find  symbol  toNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  toNode.getNext();  Node  parent  =  nextSibling.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  toNode.getNext();  Node  parent  =  nextSibling.getNext();	          Node    nextSibling    =    parent.getNext();    Node    parent    =    nextSibling.getNext();    	non-compiled	[CE]  cannot  find  symbol  toNode	27	None	replace
976	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(fromNode);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);	  	compilable	  [FE]  RuntimeException  	60	7	add
977	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(fromNode);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);	  	compilable	  [FE]  RuntimeException  	60	7	add
978	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getLastChild());  Node  body  =  node.getFirstChild();  [CE]  unreachable  statement  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode.getLastChild());  Node  body  =  node.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode.getLastChild());  Node  body  =  node.getFirstChild();	  return    computeFallThrough(node.getLastChild());    Node    body    =    node.getFirstChild();    	non-compiled	[CE]  unreachable  statement	255	None	replace
979	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getFirstChild());  Node  body  =  node.getFirstChild();  [CE]  unreachable  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode.getFirstChild());  Node  body  =  node.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode.getFirstChild());  Node  body  =  node.getFirstChild();	  return    computeFallThrough(node.getLastChild());    Node    body    =    node.getFirstChild();    	non-compiled	[CE]  unreachable  statement	255	None	replace
980	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(node,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(node,  parent);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,    parent);    	compilable	  [FE]  RuntimeException  	195	7	replace
981	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(node,  parent);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(node,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(node,  parent);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,    parent);    	compilable	  [FE]  RuntimeException  	195	7	replace
982	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  fromNode.getLastChild();  Node  toNode  =  fromNode.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node    body    =    fromNode.getLastChild();    Node  toNode  =  fromNode.getLastChild();	  	compilable	  [FE]  AssertionFailedError  	99	3	add
983	[BUG]  [BUGGY]  Node  body  =  fromNode.getLastChild();  Node  toNode  =  fromNode.getLastChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  fromNode.getLastChild();  Node  toNode  =  fromNode.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    fromNode.getLastChild();    Node  toNode  =  fromNode.getLastChild();	  	compilable	  [FE]  AssertionFailedError  	99	3	add
984	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  fromNode.getLastChild();  Node  head  =  fromNode.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node    body    =    fromNode.getLastChild();    Node  head  =  fromNode.getLastChild();	  	compilable	  [FE]  AssertionFailedError  	99	3	add
985	[BUG]  [BUGGY]  Node  body  =  fromNode.getLastChild();  Node  head  =  fromNode.getLastChild();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  fromNode.getLastChild();  Node  head  =  fromNode.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    fromNode.getLastChild();    Node  head  =  fromNode.getLastChild();	  	compilable	  [FE]  AssertionFailedError  	99	3	add
986	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  priorityComparator,  nodePriorities,  astPositionCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Comparator<DiGraphNode<Node,Branch>>,Map<DiGraphNode<Node,Branch>,Integer>,int)  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  priorityComparator,  nodePriorities,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  priorityComparator,  nodePriorities,  astPositionCounter);	  return    computeFollowNode(fromNode,    parent,    nodePriorities,    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Comparator<DiGraphNode<Node,Branch>>,Map<DiGraphNode<Node,Branch>,Integer>,int)	30	None	replace
987	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  priorityCounters,  nodePriorities,  astPositionCounter);  [CE]  cannot  find  symbol  priorityCounters  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  priorityCounters,  nodePriorities,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  priorityCounters,  nodePriorities,  astPositionCounter);	  return    computeFollowNode(fromNode,    parent,    nodePriorities,    astPositionCounter);    	non-compiled	[CE]  cannot  find  symbol  priorityCounters	30	None	replace
988	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(parent);	          NodeUtil.removeChild(parent,    fromNode);    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(fromNode);    	compilable	  [FE]  RuntimeException  	191	7	replace
989	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(parent);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(parent);	          NodeUtil.removeChild(parent,    fromNode);    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(fromNode);    	compilable	  [FE]  RuntimeException  	191	7	replace
990	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  fromNode,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,  fromNode,  parent);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	183	None	add
991	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  node,  this);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeTraversal.traverse(compiler,        node,        this);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,  node,  this);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  StackOverflowError  	183	7	add
992	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  node,  this);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  node,  this);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,  node,  this);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  StackOverflowError  	183	7	add
993	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  node  =  node.getParent();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  node  =  node.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent);  Node  node  =  node.getParent();	  return    computeFollowNode(fromNode,    node);    Node    parent    =    node.getParent();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	106	None	replace
994	[BUG]  [BUGGY]          Node    body    =    parent.getFirstChild();    Node  head  =  parent.getFirstChild();  Node  body  =  parent.getFirstChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    body    =    parent.getFirstChild();    Node  head  =  parent.getFirstChild();  Node  body  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        body        =        parent.getFirstChild();        Node    head    =    parent.getFirstChild();    Node  body  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	17	None	add
995	[BUG]  [BUGGY]          Node    body    =    parent.getFirstChild();    Node  head  =  parent.getFirstChild();  Node  body  =  parent.getFirstChild();  Node  head  =  node.getFirstChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    body    =    parent.getFirstChild();    Node  head  =  parent.getFirstChild();  Node  body  =  parent.getFirstChild();  Node  head  =  node.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        body        =        parent.getFirstChild();        Node    head    =    parent.getFirstChild();    Node  body  =  parent.getFirstChild();  Node  head  =  node.getFirstChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	17	None	add
996	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(parent);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(parent);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(fromNode,    node);    NodeUtil.removeChild(parent);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	62	None	add
997	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getFirstChild());  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode.getFirstChild());  Node  node  =  node.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode.getFirstChild());  Node  node  =  node.getFirstChild();	  return    computeFallThrough(node.getFirstChild());    Node    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	164	None	replace
998	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getFirstChild();    Node  firstSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();  Node  secondSibling  =  parent.getFirstChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getFirstChild();    Node  firstSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();  Node  secondSibling  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getFirstChild();        Node    firstSibling    =    parent.getFirstChild();    Node  nextSibling  =  parent.getFirstChild();  Node  secondSibling  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	268	None	add
999	[BUG]  [BUGGY]  NodeUtil.removeChild(child,  node);  [CE]  cannot  find  symbol  child  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(child,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(child,  node);	  NodeUtil.removeChild(node);    	non-compiled	[CE]  cannot  find  symbol  child	231	None	replace
1000	[BUG]  [BUGGY]  Node  parent  =  getNextSibling(fromNode);  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getNextSibling(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getNextSibling(fromNode);	  Node    parent    =    getNextSibling();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	129	None	replace
1001	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  fromNode  =  parent.getFirstChild();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  fromNode  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFallThrough(parent.getLastChild());    }    Node  fromNode  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	222	None	add
1002	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  fromNode  =  parent.getParent();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  fromNode  =  parent.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFallThrough(parent.getLastChild());    }    Node  fromNode  =  parent.getParent();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	222	None	add
1003	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  priorities,  finallyMap);  [CE]  cannot  find  symbol  priorities  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  priorities,  finallyMap);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  nodePriorities,  priorities,  finallyMap);	  return    computeFollowNode(fromNode,    parent,    nodePriorities,    finallyMap);    	non-compiled	[CE]  cannot  find  symbol  priorities	174	None	replace
1004	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  finallyMap,  exceptionHandler);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Map<DiGraphNode<Node,Branch>,Integer>,Multimap<Node,Node>,Deque<Node>)  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  finallyMap,  exceptionHandler);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  nodePriorities,  finallyMap,  exceptionHandler);	  return    computeFollowNode(fromNode,    parent,    nodePriorities,    finallyMap);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Map<DiGraphNode<Node,Branch>,Integer>,Multimap<Node,Node>,Deque<Node>)	174	None	replace
1005	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node.getFirstChild());  return  computeFollowNode(fromNode,  node.getFirstChild());  [CE]  unreachable  statement  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  node.getFirstChild());  return  computeFollowNode(fromNode,  node.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    node.getFirstChild());    return  computeFollowNode(fromNode,  node.getFirstChild());	  	non-compiled	[CE]  unreachable  statement	206	None	add
1006	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node.getFirstChild());  return  computeFollowNode(fromNode,  node.getLastChild());  [CE]  unreachable  statement  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  node.getFirstChild());  return  computeFollowNode(fromNode,  node.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    node.getFirstChild());    return  computeFollowNode(fromNode,  node.getLastChild());	  	non-compiled	[CE]  unreachable  statement	206	None	add
1007	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node.getFirstChild());  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  node.getFirstChild());  Node  node  =  node.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    node.getFirstChild());    Node  node  =  node.getFirstChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	206	None	add
1008	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  FINALLY);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  FINALLY  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  FINALLY);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  FINALLY);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol  FINALLY	271	None	replace
1009	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(node,  parent);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(node,  parent);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	271	7	replace
1010	[BUG]  [BUGGY]  NodeUtil.removeChild(node,  parent);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(node,  parent);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(node,  parent);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	271	7	replace
1011	[BUG]  [BUGGY]  NodeUtil.removeChild(node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	271	None	replace
1012	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getCfg();  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getCfg();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  fromNode,  this);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getCfg();	          NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph    <    Node>    cfg    =    compiler.getCfg();    	non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	257	None	replace
1013	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(fromNode,  parent);  NodeUtil.removeChild(parent);  NodeUtil.removeChild(fromNode,  parent);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(fromNode,  parent);  NodeUtil.removeChild(parent);  NodeUtil.removeChild(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(fromNode,    parent);    NodeUtil.removeChild(parent);  NodeUtil.removeChild(fromNode,  parent);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	58	None	add
1014	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(fromNode,  parent);  NodeUtil.replaceChild(parent,  fromNode);  NodeUtil.removeChild(fromNode,  parent);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(fromNode,  parent);  NodeUtil.replaceChild(parent,  fromNode);  NodeUtil.removeChild(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(fromNode,    parent);    NodeUtil.replaceChild(parent,  fromNode);  NodeUtil.removeChild(fromNode,  parent);	  	non-compiled	[CE]  cannot  find  symbol	58	None	add
1015	[BUG]  [BUGGY]  return  computeFallThrough(parent,  fromNode.getLastChild());  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(parent,  fromNode.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(parent,  fromNode.getLastChild());	  return    computeFallThrough(fromNode,    parent.getLastChild());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	82	None	replace
1016	[BUG]  [BUGGY]  Node  body  =  n.getLastChild();  [CE]  cannot  find  symbol  n  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  n.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  n.getLastChild();	  Node    body    =    parent.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  n	94	None	replace
1017	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  node.getFirstChild();  Node  head  =  node.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  body  =  node.getFirstChild();  Node  head  =  node.getLastChild();	          Node    body    =    node.getFirstChild();    Node    head    =    node.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	178	5	replace
1018	[BUG]  [BUGGY]  Node  body  =  node.getFirstChild();  Node  head  =  node.getLastChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  node.getFirstChild();  Node  head  =  node.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  node.getFirstChild();  Node  head  =  node.getLastChild();	          Node    body    =    node.getFirstChild();    Node    head    =    node.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	178	5	replace
1019	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getParent();  Node  nextSibling  =  node.getParent();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getParent();  Node  nextSibling  =  node.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    parent.getParent();    Node  nextSibling  =  node.getParent();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	48	None	add
1020	[BUG]  [BUGGY]  Node  node  =  parent.getFirstChild();  return  computeFollowNode(node.getLastChild());  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  node  =  parent.getFirstChild();  return  computeFollowNode(node.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  node  =  parent.getFirstChild();  return  computeFollowNode(node.getLastChild());	  return    computeFallThrough(node.getFirstChild());    Node    node    =    parent.getFirstChild();    return    computeFollowNode(node.getFirstChild());    	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	12	None	replace
1021	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(parent.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(parent.getFirstChild());	  return    computeFallThrough(node.getFirstChild());    Node    node    =    parent.getFirstChild();    return    computeFollowNode(node.getFirstChild());    	compilable	  [FE]  StackOverflowError  	12	7	replace
1022	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(parent.getFirstChild());  [FE]  StackOverflowError  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(parent.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(parent.getFirstChild());	  return    computeFallThrough(node.getFirstChild());    Node    node    =    parent.getFirstChild();    return    computeFollowNode(node.getFirstChild());    	compilable	  [FE]  StackOverflowError  	12	7	replace
1023	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling    ==    null)    {    return    computeFallThrough(parent.getLastChild());    }    	compilable	  [FE]  RuntimeException  	227	7	replace
1024	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling    ==    null)    {    return    computeFallThrough(parent.getLastChild());    }    	compilable	  [FE]  RuntimeException  	227	7	replace
1025	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling    ==    null)    {    return    computeFallThrough(parent.getLastChild());    }    	compilable	  [FE]  RuntimeException  	227	7	replace
1026	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling    ==    null)    {    return    computeFallThrough(parent.getLastChild());    }    	compilable	  [FE]  RuntimeException  	227	7	replace
1027	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling!=  null);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling!=    null);    Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling!=  null);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	167	None	add
1028	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild(),  node,  finallyMap);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>)  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild(),  node,  finallyMap);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent.getLastChild(),  node,  finallyMap);	  return    computeFollowNode(fromNode,    parent.getLastChild(),    node);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>)	85	None	replace
1029	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild(),  node,  thenBlock);  [CE]  cannot  find  symbol  thenBlock  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild(),  node,  thenBlock);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent.getLastChild(),  node,  thenBlock);	  return    computeFollowNode(fromNode,    parent.getLastChild(),    node);    	non-compiled	[CE]  cannot  find  symbol  thenBlock	85	None	replace
1030	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild(),  node,  body);  [CE]  cannot  find  symbol  body  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild(),  node,  body);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent.getLastChild(),  node,  body);	  return    computeFollowNode(fromNode,    parent.getLastChild(),    node);    	non-compiled	[CE]  cannot  find  symbol  body	85	None	replace
1031	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  nodeUtil.removeChild(fromNode,  parent);  [CE]  cannot  find  symbol  nodeUtil  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  nodeUtil.removeChild(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  fromNode);  nodeUtil.removeChild(fromNode,  parent);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(fromNode,    parent);    	non-compiled	[CE]  cannot  find  symbol  nodeUtil	59	None	replace
1032	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getFirstChild());  return  computeFollowNode(fromNode.getFirstChild());  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getFirstChild());  return  computeFollowNode(fromNode.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(fromNode.getFirstChild());    return  computeFollowNode(fromNode.getFirstChild());	  	non-compiled	[CE]  unreachable  statement	21	None	add
1033	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getFirstChild());  Node  fromNode  =  node.getLastChild();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getFirstChild());  Node  fromNode  =  node.getLastChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(fromNode.getFirstChild());    Node  fromNode  =  node.getLastChild();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	21	None	add
1034	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  child,  this);  [CE]  cannot  find  symbol  child  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  child,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  child,  this);	  	non-compiled	[CE]  cannot  find  symbol  child	144	None	add
1035	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node.getLastChild());  return  computeFollowNode(fromNode,  node.getLastChild());  [CE]  unreachable  statement  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  node.getLastChild());  return  computeFollowNode(fromNode,  node.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    node.getLastChild());    return  computeFollowNode(fromNode,  node.getLastChild());	  	non-compiled	[CE]  unreachable  statement	83	None	add
1036	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node.getLastChild());  return  computeFollowNode(fromNode,  node.getFirstChild());  [CE]  unreachable  statement  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  node.getLastChild());  return  computeFollowNode(fromNode,  node.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    node.getLastChild());    return  computeFollowNode(fromNode,  node.getFirstChild());	  	non-compiled	[CE]  unreachable  statement	83	None	add
1037	[BUG]  [BUGGY]          Node    body    =    node.getFirstChild();    Preconditions.checkState(body!=  null);  Node  node  =  node.getFirstChild();  Preconditions.checkState(body!=  null);  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    body    =    node.getFirstChild();    Preconditions.checkState(body!=  null);  Node  node  =  node.getFirstChild();  Preconditions.checkState(body!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        body        =        node.getFirstChild();        Preconditions.checkState(body!=    null);    Node  node  =  node.getFirstChild();  Preconditions.checkState(body!=  null);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	259	None	add
1038	[BUG]  [BUGGY]          Node    body    =    node.getFirstChild();    Preconditions.checkState(body!=  null);  Node  parent  =  node.getFirstChild();  Preconditions.checkState(body!=  null);  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    body    =    node.getFirstChild();    Preconditions.checkState(body!=  null);  Node  parent  =  node.getFirstChild();  Preconditions.checkState(body!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        body        =        node.getFirstChild();        Preconditions.checkState(body!=    null);    Node  parent  =  node.getFirstChild();  Preconditions.checkState(body!=  null);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	259	None	add
1039	[BUG]  [BUGGY]          Node    body    =    node.getFirstChild();    Preconditions.checkState(body!=  null);  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    body    =    node.getFirstChild();    Preconditions.checkState(body!=  null);  Node  node  =  node.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        body        =        node.getFirstChild();        Preconditions.checkState(body!=    null);    Node  node  =  node.getFirstChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	259	None	add
1040	[BUG]  [BUGGY]  NodeUtil.removeChild(fromNode);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(fromNode);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    }    else    {    NodeUtil.removeChild(parent,    node);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	134	None	replace
1041	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  node);  NodeUtil.removeChild(node);  NodeUtil.removeChild(node,  parent);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  node);  NodeUtil.removeChild(node);  NodeUtil.removeChild(node,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(node,    node);    NodeUtil.removeChild(node);  NodeUtil.removeChild(node,  parent);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	198	None	add
1042	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  node);  NodeUtil.removeChild(node);  NodeUtil.removeChild(node,  node);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  node);  NodeUtil.removeChild(node);  NodeUtil.removeChild(node,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(node,    node);    NodeUtil.removeChild(node);  NodeUtil.removeChild(node,  node);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	198	None	add
1043	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  FINALLY);  [CE]  cannot  find  symbol  FINALLY  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  FINALLY);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  FINALLY);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(node,    node);    	non-compiled	[CE]  cannot  find  symbol  FINALLY	66	None	replace
1044	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  toNode);  [CE]  cannot  find  symbol  toNode  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  toNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  toNode);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(node,    node);    	non-compiled	[CE]  cannot  find  symbol  toNode	66	None	replace
1045	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent.getFirstChild());  Node  body  =  parent.getFirstChild();  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  parent.getFirstChild());  Node  body  =  parent.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  parent.getFirstChild());  Node  body  =  parent.getFirstChild();	  return    computeFollowNode(fromNode,    parent.getFirstChild());    Node    body    =    parent.getFirstChild();    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	244	None	replace
1046	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  body);  [CE]  cannot  find  symbol  body  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  body);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent.getFirstChild(),  body);	  return    computeFollowNode(fromNode,    parent.getFirstChild());    Node    body    =    parent.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  body	244	None	replace
1047	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  fromNode.getFirstChild();  Node  firstSibling  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  fromNode.getFirstChild();  Node  firstSibling  =  parent.getFirstChild();	          Node    nextSibling    =    parent.getFirstChild();    Node    firstSibling    =    parent.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	269	5	replace
1048	[BUG]  [BUGGY]  Node  nextSibling  =  fromNode.getFirstChild();  Node  firstSibling  =  parent.getFirstChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  fromNode.getFirstChild();  Node  firstSibling  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  fromNode.getFirstChild();  Node  firstSibling  =  parent.getFirstChild();	          Node    nextSibling    =    parent.getFirstChild();    Node    firstSibling    =    parent.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	269	5	replace
1049	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent.getFirstChild(),  finallyMap);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  parent.getFirstChild(),  finallyMap);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  parent.getFirstChild(),  finallyMap);	  return    computeFallThrough(fromNode,    parent.getFirstChild());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	86	None	replace
1050	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent);  Node  node  =  parent.getLastChild();  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  parent);  Node  node  =  parent.getLastChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  parent);  Node  node  =  parent.getLastChild();	  return    computeFollowNode(fromNode,    node);    Node    node    =    parent.getLastChild();    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	204	None	replace
1051	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent);  node  =  parent.getLastChild();  [CE]  unreachable  statement  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent);  node  =  parent.getLastChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent);  node  =  parent.getLastChild();	  return    computeFollowNode(fromNode,    node);    Node    node    =    parent.getLastChild();    	non-compiled	[CE]  unreachable  statement	204	None	replace
1052	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  fromNode,  this);  parent.replaceChild(fromNode,  body);  [CE]  cannot  find  symbol  body  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  fromNode,  this);  parent.replaceChild(fromNode,  body);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,    fromNode,    this);    NodeTraversal.traverse(compiler,  fromNode,  this);  parent.replaceChild(fromNode,  body);	  	non-compiled	[CE]  cannot  find  symbol  body	71	None	add
1053	[BUG]  [BUGGY]  Node  parent  =  node.getFirstChild();  return  computeFollowNode(fromNode,  parent);  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  node.getFirstChild();  return  computeFollowNode(fromNode,  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  node.getFirstChild();  return  computeFollowNode(fromNode,  parent);	  return    computeFallThrough(node.getLastChild());    Node    node    =    parent.getFirstChild();    return    computeFollowNode(fromNode,    parent);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	203	None	replace
1054	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getLastChild());  Node  parent  =  node.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode.getLastChild());  Node  parent  =  node.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode.getLastChild());  Node  parent  =  node.getParent();	  return    computeFallThrough(node.getLastChild());    Node    parent    =    node.getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	115	None	replace
1055	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  finallyMap,  edge);  [CE]  cannot  find  symbol  edge  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  finallyMap,  edge);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  node,  finallyMap,  edge);	  return    computeFollowNode(fromNode,    parent,    node,    finallyMap);    	non-compiled	[CE]  cannot  find  symbol  edge	209	None	replace
1056	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  Node  nextSibling  =  node.getNext();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  Node  nextSibling  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFollowNode(fromNode,    parent);    }    Node  nextSibling  =  node.getNext();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	228	None	add
1057	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  Node  parent  =  node.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  Node  parent  =  node.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFollowNode(fromNode,    parent);    }    Node  parent  =  node.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	228	None	add
1058	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  parent.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  parent.getLastChild());	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    nextSibling    =    parent.getFirstChild();    return    computeFallThrough(nextSibling.getLastChild());    	compilable	  [FE]  AssertionFailedError  	263	3	replace
1059	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  parent.getLastChild());  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  parent.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  parent.getLastChild());	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    nextSibling    =    parent.getFirstChild();    return    computeFallThrough(nextSibling.getLastChild());    	compilable	  [FE]  AssertionFailedError  	263	3	replace
1060	[BUG]  [BUGGY]  Node  nextSibling  =  nextSibling.getFirstChild();  return  computeFallThrough(nextSibling.getLastChild());  [CE]  variable  nextSibling  might  not  have  been  initialized  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  nextSibling.getFirstChild();  return  computeFallThrough(nextSibling.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  nextSibling.getFirstChild();  return  computeFallThrough(nextSibling.getLastChild());	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    nextSibling    =    parent.getFirstChild();    return    computeFallThrough(nextSibling.getLastChild());    	non-compiled	[CE]  variable  nextSibling  might  not  have  been  initialized	263	None	replace
1061	[BUG]  [BUGGY]  Node  nextSibling  =  toNode.getNext();  [CE]  cannot  find  symbol  toNode  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  toNode.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  toNode.getNext();	  Node    nextSibling    =    node.getNext();    	non-compiled	[CE]  cannot  find  symbol  toNode	47	None	replace
1062	[BUG]  [BUGGY]  Node  parent  =  node.getParent(),  node);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  node.getParent(),  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  node.getParent(),  node);	  Node    parent    =    getParent(),    node);    	non-compiled	[CE]  ';'  expected	130	None	replace
1063	[BUG]  [BUGGY]  Node  parent  =  getParent(),  node,  finallyMap);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getParent(),  node,  finallyMap);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParent(),  node,  finallyMap);	  Node    parent    =    getParent(),    node);    	non-compiled	[CE]  ';'  expected	130	None	replace
1064	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getFirstChild().getString());  [CE]  no  suitable  method  found  for  computeFollowNode(String)  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode.getFirstChild().getString());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode.getFirstChild().getString());	  return    computeFallThrough(fromNode.getFirstChild().getString());    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(String)	23	None	replace
1065	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  node,  parent.getFirstChild());  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  node,  parent.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  node,  parent.getFirstChild());	  return    computeFallThrough(fromNode,    node,    parent);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	127	None	replace
1066	[BUG]  [BUGGY]  return  computeFallThrough(parent,  node,  fromNode);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(parent,  node,  fromNode);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(parent,  node,  fromNode);	  return    computeFallThrough(fromNode,    node,    parent);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	127	None	replace
1067	[BUG]  [BUGGY]  nodeTraversal.traverse(compiler,  parent,  this);  [CE]  cannot  find  symbol  nodeTraversal  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  nodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	nodeTraversal.traverse(compiler,  parent,  this);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    parent,    this);    	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	145	None	replace
1068	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  finallyNode);  [CE]  cannot  find  symbol  finallyNode  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  finallyNode);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  nodePriorities,  finallyNode);	  return    computeFollowNode(fromNode,    parent,    nodePriorities,    thenBlock);    	non-compiled	[CE]  cannot  find  symbol  finallyNode	173	None	replace
1069	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  fromNode.getNext();  Preconditions.checkState(parent.getFirstChild()  ==  parent);  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  fromNode.getNext();  Preconditions.checkState(parent.getFirstChild()  ==  parent);  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFallThrough(nextSibling.getLastChild());    }    	compilable	  [FE]  RuntimeException  	221	7	replace
1070	[BUG]  [BUGGY]  Node  nextSibling  =  fromNode.getNext();  Preconditions.checkState(parent.getFirstChild()  ==  parent);  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  fromNode.getNext();  Preconditions.checkState(parent.getFirstChild()  ==  parent);  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  fromNode.getNext();  Preconditions.checkState(parent.getFirstChild()  ==  parent);  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFallThrough(nextSibling.getLastChild());    }    	compilable	  [FE]  RuntimeException  	221	7	replace
1071	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(parent.getFirstChild()  ==  parent);  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  node.getNext();  Preconditions.checkState(parent.getFirstChild()  ==  parent);  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFallThrough(nextSibling.getLastChild());    }    	compilable	  [FE]  RuntimeException  	221	7	replace
1072	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(parent.getFirstChild()  ==  parent);  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(parent.getFirstChild()  ==  parent);  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  node.getNext();  Preconditions.checkState(parent.getFirstChild()  ==  parent);  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFallThrough(nextSibling.getLastChild());    }    	compilable	  [FE]  RuntimeException  	221	7	replace
1073	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node,  thenBlock);  [CE]  cannot  find  symbol  thenBlock  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  parent,  node,  thenBlock);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  parent,  node,  thenBlock);	  return    computeFallThrough(fromNode,    parent,    node);    	non-compiled	[CE]  cannot  find  symbol  thenBlock	126	None	replace
1074	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node,  finallyMap);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  parent,  node,  finallyMap);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  parent,  node,  finallyMap);	  return    computeFallThrough(fromNode,    parent,    node);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	126	None	replace
1075	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node,  FINALLY);  [CE]  cannot  find  symbol  FINALLY  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  parent,  node,  FINALLY);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  parent,  node,  FINALLY);	  return    computeFallThrough(fromNode,    parent,    node);    	non-compiled	[CE]  cannot  find  symbol  FINALLY	126	None	replace
1076	[BUG]  [BUGGY]  Node  nextSibling  =  node.getFirstChild();  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getFirstChild();  Node  node  =  node.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    node.getFirstChild();    Node  node  =  node.getFirstChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	3	None	add
1077	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  FINALLY);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  FINALLY  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  FINALLY);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  FINALLY);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  FINALLY	273	None	replace
1078	[BUG]  [BUGGY]  NodeUtil.removeChild(node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	273	None	replace
1079	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  parent.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  body  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  parent.getFirstChild());	  return    computeFollowNode(fromNode,    parent.getFirstChild());    Node    body    =    parent.getFirstChild();    return    computeFallThrough(body.getLastChild());    	compilable	  [FE]  StackOverflowError  	245	7	replace
1080	[BUG]  [BUGGY]  Node  body  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  parent.getFirstChild());  [FE]  StackOverflowError  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  parent.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  parent.getFirstChild());	  return    computeFollowNode(fromNode,    parent.getFirstChild());    Node    body    =    parent.getFirstChild();    return    computeFallThrough(body.getLastChild());    	compilable	  [FE]  StackOverflowError  	245	7	replace
1081	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node,  block);  [CE]  cannot  find  symbol  block  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node,  block);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node,  block);	  NodeUtil.removeChild(parent,    node,    FINALLY);    	non-compiled	[CE]  cannot  find  symbol  block	92	None	replace
1082	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node,  toNode);  [CE]  cannot  find  symbol  toNode  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node,  toNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node,  toNode);	  NodeUtil.removeChild(parent,    node,    FINALLY);    	non-compiled	[CE]  cannot  find  symbol  toNode	92	None	replace
1083	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent.getFirstChild());  Node  parent  =  node.getParent();  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  parent.getFirstChild());  Node  parent  =  node.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  parent.getFirstChild());  Node  parent  =  node.getParent();	  return    computeFollowNode(fromNode,    parent.getFirstChild());    Node    parent    =    node.getParent();    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	50	None	replace
1084	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getFirstChild(),  node,  finallyMap);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getFirstChild(),  node,  finallyMap);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode.getFirstChild(),  node,  finallyMap);	  return    computeFallThrough(fromNode.getFirstChild(),    node);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	280	None	replace
1085	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  node);	  return    computeFallThrough(node.getLastChild());    Node    nextSibling    =    parent.getFirstChild();    return    computeFollowNode(fromNode,    parent);    	compilable	  [FE]  StackOverflowError  	256	7	replace
1086	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  node);  [FE]  StackOverflowError  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  node);	  return    computeFallThrough(node.getLastChild());    Node    nextSibling    =    parent.getFirstChild();    return    computeFollowNode(fromNode,    parent);    	compilable	  [FE]  StackOverflowError  	256	7	replace
1087	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  node,  astPositionCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int)  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  node,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent.getFirstChild(),  node,  astPositionCounter);	  return    computeFollowNode(fromNode,    parent.getFirstChild(),    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int)	88	None	replace
1088	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  priorityCounter,  astPositionCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,int,int)  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  priorityCounter,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent.getFirstChild(),  priorityCounter,  astPositionCounter);	  return    computeFollowNode(fromNode,    parent.getFirstChild(),    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,int,int)	88	None	replace
1089	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  beforeBlock);  [CE]  cannot  find  symbol  beforeBlock  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  beforeBlock);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  nodePriorities,  beforeBlock);	  return    computeFollowNode(fromNode,    parent,    nodePriorities,    predicate);    	non-compiled	[CE]  cannot  find  symbol  beforeBlock	279	None	replace
1090	[BUG]  [BUGGY]  Node  parent  =  getParentNode(fromNode,  parent);  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getParentNode(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParentNode(fromNode,  parent);	  Node    parent    =    getParentNode(fromNode);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	150	None	replace
1091	[BUG]  [BUGGY]  Node  parent  =  getParentNode(fromNode,  FINALLY);  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getParentNode(fromNode,  FINALLY);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParentNode(fromNode,  FINALLY);	  Node    parent    =    getParentNode(fromNode);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	150	None	replace
1092	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  fromNode  =  parent.getFirstChild();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  fromNode  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFallThrough(nextSibling.getLastChild());    }    Node  fromNode  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	220	None	add
1093	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  parent  =  fromNode.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  parent  =  fromNode.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFallThrough(nextSibling.getLastChild());    }    Node  parent  =  fromNode.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	220	None	add
1094	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  node,  thenBlock);  [CE]  cannot  find  symbol  thenBlock  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  node,  thenBlock);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent.getFirstChild(),  node,  thenBlock);	  return    computeFollowNode(fromNode,    parent.getFirstChild(),    node);    	non-compiled	[CE]  cannot  find  symbol  thenBlock	87	None	replace
1095	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  node,  body);  [CE]  cannot  find  symbol  body  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  node,  body);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent.getFirstChild(),  node,  body);	  return    computeFollowNode(fromNode,    parent.getFirstChild(),    node);    	non-compiled	[CE]  cannot  find  symbol  body	87	None	replace
1096	[BUG]  [BUGGY]  nodeTraversal.traverse(compiler,  fromNode,  this);  [CE]  cannot  find  symbol  nodeTraversal  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  nodeTraversal.traverse(compiler,  fromNode,  this);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	nodeTraversal.traverse(compiler,  fromNode,  this);	  return    computeFollowNode(fromNode,    node);    NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	109	None	replace
1097	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent.cloneTree());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	return  computeFollowNode(fromNode,  parent.cloneTree());	  return    computeFallThrough(fromNode,    parent.cloneTree());    	compilable	  [FE]  AssertionFailedError  	128	3	replace
1098	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.cloneTree());  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent.cloneTree());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent.cloneTree());	  return    computeFallThrough(fromNode,    parent.cloneTree());    	compilable	  [FE]  AssertionFailedError  	128	3	replace
1099	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent.getFirstChild(),  node.cloneTree());  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  parent.getFirstChild(),  node.cloneTree());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  parent.getFirstChild(),  node.cloneTree());	  return    computeFallThrough(fromNode,    parent.cloneTree());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	128	None	replace
1100	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent.cloneTree(),  finallyMap);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  parent.cloneTree(),  finallyMap);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  parent.cloneTree(),  finallyMap);	  return    computeFallThrough(fromNode,    parent.cloneTree());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	128	None	replace
1101	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(child,  node);  NodeUtil.removeChild(parent,  node);  [CE]  cannot  find  symbol  child  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(child,  node);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(child,  node);  NodeUtil.removeChild(parent,  node);	  	non-compiled	[CE]  cannot  find  symbol  child	132	None	add
1102	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	132	None	add
1103	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent);  NodeUtil.removeChild(parent,  fromNode);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent);  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent);  NodeUtil.removeChild(parent,  fromNode);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	56	None	add
1104	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(fromNode,  parent);	  	compilable	  [FE]  RuntimeException  	56	7	add
1105	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(fromNode,  parent);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(fromNode,  parent);	  	compilable	  [FE]  RuntimeException  	56	7	add
1106	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  priorityComparator,  astPositionCounter);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Comparator<DiGraphNode<Node,Branch>>,int)  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  priorityComparator,  astPositionCounter);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  this,  priorityComparator,  astPositionCounter);	  NodeTraversal.traverse(compiler,    node,    this,    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Comparator<DiGraphNode<Node,Branch>>,int)	70	None	replace
1107	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  exceptionHandler,  astPositionCounter);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Deque<Node>,int)  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  exceptionHandler,  astPositionCounter);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  this,  exceptionHandler,  astPositionCounter);	  NodeTraversal.traverse(compiler,    node,    this,    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Deque<Node>,int)	70	None	replace
1108	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  toNode  =  fromNode.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node    body    =    fromNode.getFirstChild();    Node  toNode  =  fromNode.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	97	3	add
1109	[BUG]  [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  toNode  =  fromNode.getFirstChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  toNode  =  fromNode.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    fromNode.getFirstChild();    Node  toNode  =  fromNode.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	97	3	add
1110	[BUG]  [BUGGY]  Node  node  =  parent.getFirstChild();  return  computeFallThrough(node.getFirstChild());  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  node  =  parent.getFirstChild();  return  computeFallThrough(node.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  node  =  parent.getFirstChild();  return  computeFallThrough(node.getFirstChild());	  return    computeFallThrough(node.getFirstChild());    Node    node    =    parent.getFirstChild();    return    computeFallThrough(node.getFirstChild());    	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	10	None	replace
1111	[BUG]  [BUGGY]  Node  node  =  parent.getFirstChild();  return  computeFollowNode(fromNode,node);  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  node  =  parent.getFirstChild();  return  computeFollowNode(fromNode,node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  node  =  parent.getFirstChild();  return  computeFollowNode(fromNode,node);	  return    computeFallThrough(node.getFirstChild());    Node    node    =    parent.getFirstChild();    return    computeFallThrough(node.getFirstChild());    	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	10	None	replace
1112	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  node  =  parent.getFirstChild();  return  computeFallThrough(node.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	node  =  parent.getFirstChild();  return  computeFallThrough(node.getFirstChild());	  return    computeFallThrough(node.getFirstChild());    Node    node    =    parent.getFirstChild();    return    computeFallThrough(node.getFirstChild());    	compilable	  [FE]  AssertionFailedError  	10	6	replace
1113	[BUG]  [BUGGY]  node  =  parent.getFirstChild();  return  computeFallThrough(node.getFirstChild());  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  node  =  parent.getFirstChild();  return  computeFallThrough(node.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	node  =  parent.getFirstChild();  return  computeFallThrough(node.getFirstChild());	  return    computeFallThrough(node.getFirstChild());    Node    node    =    parent.getFirstChild();    return    computeFallThrough(node.getFirstChild());    	compilable	  [FE]  AssertionFailedError  	10	6	replace
1114	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(fromNode);  NodeUtil.redeclareVarsInsideBranch(toNode);  [CE]  cannot  find  symbol  toNode  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(fromNode);  NodeUtil.redeclareVarsInsideBranch(toNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.redeclareVarsInsideBranch(fromNode);    NodeUtil.redeclareVarsInsideBranch(toNode);	  	non-compiled	[CE]  cannot  find  symbol  toNode	240	None	add
1115	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(fromNode);  NodeUtil.redeclareVarsInsideBranch(child);  [CE]  cannot  find  symbol  child  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(fromNode);  NodeUtil.redeclareVarsInsideBranch(child);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.redeclareVarsInsideBranch(fromNode);    NodeUtil.redeclareVarsInsideBranch(child);	  	non-compiled	[CE]  cannot  find  symbol  child	240	None	add
1116	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent);  Node  node  =  parent.getParent();  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                  StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  parent);  Node  node  =  parent.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  parent);  Node  node  =  parent.getParent();	  return    computeFollowNode(fromNode,    node);    Node    node    =    parent.getParent();    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	111	None	replace
1117	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getFirstChild());  Node  node  =  parent.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getFirstChild());  Node  node  =  parent.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode.getFirstChild());  Node  node  =  parent.getFirstChild();	  return    computeFallThrough(node.getFirstChild());    Node    node    =    parent.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	8	None	replace
1118	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getFirstChild());  Node  node  =  parent.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode.getFirstChild());  Node  node  =  parent.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode.getFirstChild());  Node  node  =  parent.getFirstChild();	  return    computeFallThrough(node.getFirstChild());    Node    node    =    parent.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	8	None	replace
1119	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  Node  nextSibling  =  node.getParent();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getNext();  Node  nextSibling  =  node.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    node.getNext();    Node  nextSibling  =  node.getParent();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	46	None	add
1120	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  Node  node  =  node.getNext();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getNext();  Node  node  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    node.getNext();    Node  node  =  node.getNext();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	46	None	add
1121	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  Node  parent  =  node.getNext();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getNext();  Node  parent  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    node.getNext();    Node  parent  =  node.getNext();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	46	None	add
1122	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  toNode);  [CE]  cannot  find  symbol  toNode  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  toNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  toNode);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node);    	non-compiled	[CE]  cannot  find  symbol  toNode	197	None	replace
1123	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.removeChild(node,  fromNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.removeChild(node,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node);  parent.removeChild(node,  fromNode);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.removeChild(parent,    node);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	137	None	replace
1124	[BUG]  [BUGGY]  Node  nextSibling  =  toNode.getFirstChild();  Node  parent  =  parent.getFirstChild();  [CE]  cannot  find  symbol  toNode  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  toNode.getFirstChild();  Node  parent  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  toNode.getFirstChild();  Node  parent  =  parent.getFirstChild();	          Node    nextSibling    =    parent.getFirstChild();    Node    parent    =    parent.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  toNode	123	None	replace
1125	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getFirstChild());  Node  parent  =  node.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode.getFirstChild());  Node  parent  =  node.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode.getFirstChild());  Node  parent  =  node.getParent();	  return    computeFallThrough(node.getFirstChild());    Node    parent    =    node.getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	7	None	replace
1126	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getFirstChild(),  parent);  Node  parent  =  node.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode.getFirstChild(),  parent);  Node  parent  =  node.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode.getFirstChild(),  parent);  Node  parent  =  node.getParent();	  return    computeFallThrough(node.getFirstChild());    Node    parent    =    node.getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	7	None	replace
1127	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  node,  this);  Preconditions.traverse(compiler,  fromNode,  this);  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  node,  this);  Preconditions.traverse(compiler,  fromNode,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    fromNode,    this);    NodeTraversal.traverse(compiler,  node,  this);  Preconditions.traverse(compiler,  fromNode,  this);	  	non-compiled	[CE]  cannot  find  symbol	179	None	add
1128	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.removeChild(parent,  fromNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node);  parent.removeChild(parent,  fromNode);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(parent,    fromNode);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	233	None	replace
1129	[BUG]  [BUGGY]  ParentUtil.removeChild(parent,  fromNode);  parent.removeChild(parent,  fromNode);  [CE]  cannot  find  symbol  ParentUtil  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  ParentUtil.removeChild(parent,  fromNode);  parent.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	ParentUtil.removeChild(parent,  fromNode);  parent.removeChild(parent,  fromNode);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(parent,    fromNode);    	non-compiled	[CE]  cannot  find  symbol  ParentUtil	233	None	replace
1130	[BUG]  [BUGGY]  Node  parent  =  getParent(parent.getParent());  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getParent(parent.getParent());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParent(parent.getParent());	  Node    parent    =    getParent(parent);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	192	None	replace
1131	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  NodeUtil.removeChild(parent,  node);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    	compilable	  [FE]  RuntimeException  	133	7	replace
1132	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  NodeUtil.removeChild(parent,  node);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  NodeUtil.removeChild(parent,  node);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    	compilable	  [FE]  RuntimeException  	133	7	replace
1133	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  node,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,ControlFlowAnalysis)  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  fromNode,  node,  this);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    }    else    {    NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,ControlFlowAnalysis)	143	None	replace
1134	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(parent,    parent);    NodeUtil.removeChild(parent,  node);	  	compilable	  [FE]  RuntimeException  	89	7	add
1135	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  node);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,    parent);    NodeUtil.removeChild(parent,  node);	  	compilable	  [FE]  RuntimeException  	89	7	add
1136	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,    parent);    NodeUtil.removeChild(parent);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	89	None	add
1137	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.addChildToFront(parent,  parent);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.addChildToFront(parent,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,    parent);    NodeUtil.addChildToFront(parent,  parent);	  	non-compiled	[CE]  cannot  find  symbol	89	None	add
1138	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent);  node  =  parent.getFirstChild();  [CE]  unreachable  statement  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent);  node  =  parent.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent);  node  =  parent.getFirstChild();	  return    computeFollowNode(fromNode,    node);    Node    node    =    parent.getFirstChild();    	non-compiled	[CE]  unreachable  statement	107	None	replace
1139	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                  StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  return  computeFollowNode(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeTraversal.traverse(compiler,  node,  this);  return  computeFollowNode(fromNode,  parent);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    return    computeFallThrough(fromNode,    parent);    	compilable	  [FE]  StackOverflowError  	148	7	replace
1140	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  return  computeFollowNode(fromNode,  parent);  [FE]  StackOverflowError  [FE]                  StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  return  computeFollowNode(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  this);  return  computeFollowNode(fromNode,  parent);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    return    computeFallThrough(fromNode,    parent);    	compilable	  [FE]  StackOverflowError  	148	7	replace
1141	[BUG]  [BUGGY]  nodeTraversal.traverse(compiler,  node,  this);  return  computeFallThrough(fromNode,  parent);  [CE]  cannot  find  symbol  nodeTraversal  [FE]                    StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  nodeTraversal.traverse(compiler,  node,  this);  return  computeFallThrough(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	nodeTraversal.traverse(compiler,  node,  this);  return  computeFallThrough(fromNode,  parent);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    return    computeFallThrough(fromNode,    parent);    	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	148	None	replace
1142	[BUG]  [BUGGY]  Node  body  =  parent.getLastChild();  AssertionFailedError  <  Node>  body  =  parent.getLastChild();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getLastChild();  AssertionFailedError  <  Node>  body  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    parent.getLastChild();    AssertionFailedError  <  Node>  body  =  parent.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	93	None	add
1143	[BUG]  [BUGGY]  Node  body  =  parent.getLastChild();  Node  body  =  parent.getLastChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  node);  }  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getLastChild();  Node  body  =  parent.getLastChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  node);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    parent.getLastChild();    Node  body  =  parent.getLastChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  node);  }	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	93	None	add
1144	[BUG]  [BUGGY]  Node  body  =  parent.getLastChild();  Node  body  =  parent.getLastChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  body);  }  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getLastChild();  Node  body  =  parent.getLastChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  body);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    parent.getLastChild();    Node  body  =  parent.getLastChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  body);  }	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	93	None	add
1145	[BUG]  [BUGGY]  Node  body  =  parent.getLastChild();  Node  body  =  parent.getLastChild();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  node);  }  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getLastChild();  Node  body  =  parent.getLastChild();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  node);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    parent.getLastChild();    Node  body  =  parent.getLastChild();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  node);  }	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	93	None	add
1146	[BUG]  [BUGGY]  Node  body  =  parent.getLastChild();  Node  body  =  parent.getLastChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getLastChild();  Node  body  =  parent.getLastChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    parent.getLastChild();    Node  body  =  parent.getLastChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	93	None	add
1147	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  if(shouldTraverseFunctions)  {  StackOverflowError  <  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(fromNode.getLastChild());  }  [CE]  >  expected  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  if(shouldTraverseFunctions)  {  StackOverflowError  <  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(fromNode.getLastChild());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,    parent,    this);    if(shouldTraverseFunctions)  {  StackOverflowError  <  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(fromNode.getLastChild());  }	  	non-compiled	[CE]  >  expected	67	None	add
1148	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  if(shouldTraverseFunctions)  {  StackOverflowError  <  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(fromNode.getFirstChild());  }  [CE]  >  expected  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  if(shouldTraverseFunctions)  {  StackOverflowError  <  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(fromNode.getFirstChild());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,    parent,    this);    if(shouldTraverseFunctions)  {  StackOverflowError  <  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(fromNode.getFirstChild());  }	  	non-compiled	[CE]  >  expected	67	None	add
1149	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  if(shouldTraverseFunctions)  {  StackOverflowError  <  NodeUtil.mayHaveSideEffects(parent))  {  return  computeFallThrough(fromNode.getFirstChild());  }  [CE]  >  expected  [FE]        StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  if(shouldTraverseFunctions)  {  StackOverflowError  <  NodeUtil.mayHaveSideEffects(parent))  {  return  computeFallThrough(fromNode.getFirstChild());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,    parent,    this);    if(shouldTraverseFunctions)  {  StackOverflowError  <  NodeUtil.mayHaveSideEffects(parent))  {  return  computeFallThrough(fromNode.getFirstChild());  }	  	non-compiled	[CE]  >  expected	67	None	add
1150	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  if(shouldTraverseFunctions)  {  StackOverflowError  <  NodeUtil.mayHaveSideEffects(parent))  {  return  computeFallThrough(fromNode.getLastChild());  }  [CE]  >  expected  [FE]          StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  if(shouldTraverseFunctions)  {  StackOverflowError  <  NodeUtil.mayHaveSideEffects(parent))  {  return  computeFallThrough(fromNode.getLastChild());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,    parent,    this);    if(shouldTraverseFunctions)  {  StackOverflowError  <  NodeUtil.mayHaveSideEffects(parent))  {  return  computeFallThrough(fromNode.getLastChild());  }	  	non-compiled	[CE]  >  expected	67	None	add
1151	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  if(shouldTraverseFunctions)  {  StackOverflowError  <  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  >  expected  [FE]            StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  if(shouldTraverseFunctions)  {  StackOverflowError  <  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,    parent,    this);    if(shouldTraverseFunctions)  {  StackOverflowError  <  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }	  	non-compiled	[CE]  >  expected	67	None	add
1152	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent);  NodeTraversal.traverse(compiler,  node,  thenBlock);  [CE]  cannot  find  symbol  thenBlock  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent);  NodeTraversal.traverse(compiler,  node,  thenBlock);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent);  NodeTraversal.traverse(compiler,  node,  thenBlock);	  return    computeFollowNode(fromNode,    node);    NodeTraversal.traverse(compiler,    node,    thenBlock);    	non-compiled	[CE]  cannot  find  symbol  thenBlock	205	None	replace
1153	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  finallyMap);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Multimap<Node,Node>)  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  finallyMap);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  finallyMap);	  return    computeFollowNode(fromNode,    node);    NodeTraversal.traverse(compiler,    node,    thenBlock);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Multimap<Node,Node>)	205	None	replace
1154	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  fromNode  =  parent.getFirstChild();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  fromNode  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling    ==    null)    {    return    computeFallThrough(parent.getLastChild());    }    Node  fromNode  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	226	None	add
1155	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  fromNode  =  parent.getParent();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  fromNode  =  parent.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling    ==    null)    {    return    computeFallThrough(parent.getLastChild());    }    Node  fromNode  =  parent.getParent();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	226	None	add
1156	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  priorityCounter,  parent,  nodePriorities);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,int,Node,Map<DiGraphNode<Node,Branch>,Integer>)  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  priorityCounter,  parent,  nodePriorities);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  priorityCounter,  parent,  nodePriorities);	  return    computeFollowNode(fromNode,    parent,    nodePriorities,    priorityCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,int,Node,Map<DiGraphNode<Node,Branch>,Integer>)	31	None	replace
1157	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  parent,  nodePriorities,  priorityCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Map<DiGraphNode<Node,Branch>,Integer>,int)  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  node,  parent,  nodePriorities,  priorityCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  node,  parent,  nodePriorities,  priorityCounter);	  return    computeFollowNode(fromNode,    parent,    nodePriorities,    priorityCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Map<DiGraphNode<Node,Branch>,Integer>,int)	31	None	replace
1158	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  parent.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  body  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  parent.getLastChild());	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    body    =    parent.getFirstChild();    return    computeFallThrough(body.getLastChild());    	compilable	  [FE]  AssertionFailedError  	262	3	replace
1159	[BUG]  [BUGGY]  Node  body  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  parent.getLastChild());  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  parent.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  parent.getLastChild());	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    body    =    parent.getFirstChild();    return    computeFallThrough(body.getLastChild());    	compilable	  [FE]  AssertionFailedError  	262	3	replace
1160	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode.getLastChild(),  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	return  computeFollowNode(fromNode.getLastChild(),  node);	  return    computeFallThrough(node.getLastChild());    Node    node    =    parent.getFirstChild();    	compilable	  [FE]  RuntimeException  	116	7	replace
1161	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getLastChild(),  node);  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode.getLastChild(),  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode.getLastChild(),  node);	  return    computeFallThrough(node.getLastChild());    Node    node    =    parent.getFirstChild();    	compilable	  [FE]  RuntimeException  	116	7	replace
1162	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  fromNode,  astPosition);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node,Map<Node,Integer>)  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  fromNode,  astPosition);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  this,  fromNode,  astPosition);	  NodeTraversal.traverse(compiler,    node,    this,    astPosition);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node,Map<Node,Integer>)	69	None	replace
1163	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  astPosition,  cfg);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Map<Node,Integer>,ControlFlowGraph<Node>)  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  astPosition,  cfg);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  this,  astPosition,  cfg);	  NodeTraversal.traverse(compiler,    node,    this,    astPosition);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Map<Node,Integer>,ControlFlowGraph<Node>)	69	None	replace
1164	[BUG]  [BUGGY]  Node  body  =  parent.getNext();  Node  parent  =  node.getNext();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getNext();  Node  parent  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    parent.getNext();    Node  parent  =  node.getNext();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	213	None	add
1165	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getNext();  Node  child  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node    body    =    parent.getNext();    Node  child  =  parent.getNext();	  	compilable	  [FE]  AssertionFailedError  	213	3	add
1166	[BUG]  [BUGGY]  Node  body  =  parent.getNext();  Node  child  =  parent.getNext();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getNext();  Node  child  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    parent.getNext();    Node  child  =  parent.getNext();	  	compilable	  [FE]  AssertionFailedError  	213	3	add
1167	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(node);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    NodeUtil.removeChild(node);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	270	None	add
1168	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  return  computeFollowNode(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(parent,  fromNode);  return  computeFollowNode(fromNode,  parent);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    return    computeFollowNode(fromNode,    parent);    	compilable	  [FE]  RuntimeException  	64	6	replace
1169	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  return  computeFollowNode(fromNode,  parent);  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  return  computeFollowNode(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  fromNode);  return  computeFollowNode(fromNode,  parent);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    return    computeFollowNode(fromNode,    parent);    	compilable	  [FE]  RuntimeException  	64	6	replace
1170	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  return  computeFallThrough(node.getLastChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(parent,  node);  return  computeFallThrough(node.getLastChild());	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    return    computeFollowNode(fromNode,    parent);    	compilable	  [FE]  RuntimeException  	64	7	replace
1171	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  return  computeFallThrough(node.getLastChild());  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  return  computeFallThrough(node.getLastChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node);  return  computeFallThrough(node.getLastChild());	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    return    computeFollowNode(fromNode,    parent);    	compilable	  [FE]  RuntimeException  	64	7	replace
1172	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  node,  this);  [CE]  cannot  find  symbol  NeighborTraversal  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NeighborTraversal.traverse(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NeighborTraversal.traverse(compiler,  node,  this);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    }    else    if(parent.getType()    ==    Token.FUNCTION)    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  cannot  find  symbol  NeighborTraversal	147	None	replace
1173	[BUG]  [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  node  =  node.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  fromNode.getFirstChild();  Node  node  =  node.getFirstChild();	          Node    body    =    node.getFirstChild();    Node    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	175	None	replace
1174	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getFirstChild());  return  computeFollowNode(fromNode.getFirstChild());  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode.getFirstChild());  return  computeFollowNode(fromNode.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode.getFirstChild());    return  computeFollowNode(fromNode.getFirstChild());	  	non-compiled	[CE]  unreachable  statement	36	None	add
1175	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getFirstChild());  Node  fromNode  =  node.getLastChild();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode.getFirstChild());  Node  fromNode  =  node.getLastChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode.getFirstChild());    Node  fromNode  =  node.getLastChild();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	36	None	add
1176	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(parent,  node,  toNode);  [CE]  cannot  find  symbol  toNode  [FE]        RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(parent,  node,  toNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.redeclareVarsInsideBranch(parent,  node,  toNode);	  NodeUtil.redeclareVarsInsideBranch(parent,    node);    	non-compiled	[CE]  cannot  find  symbol  toNode	238	None	replace
1177	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(parent,  node,  firstSibling);  [CE]  cannot  find  symbol  firstSibling  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(parent,  node,  firstSibling);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.redeclareVarsInsideBranch(parent,  node,  firstSibling);	  NodeUtil.redeclareVarsInsideBranch(parent,    node);    	non-compiled	[CE]  cannot  find  symbol  firstSibling	238	None	replace
1178	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getFirstChild();    Node  lastJump  =  parent.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getFirstChild();    Node  lastJump  =  parent.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getFirstChild();        Node    lastJump    =    parent.getFirstChild();    Node  nextSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	266	None	add
1179	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getFirstChild();    Node  lastJump  =  parent.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();  Node  lastJump  =  parent.getFirstChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getFirstChild();    Node  lastJump  =  parent.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();  Node  lastJump  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getFirstChild();        Node    lastJump    =    parent.getFirstChild();    Node  nextSibling  =  parent.getFirstChild();  Node  lastJump  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	266	None	add
1180	[BUG]  [BUGGY]  Node  nextSibling  =  toNode.getFirstChild();  [CE]  cannot  find  symbol  toNode  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  toNode.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  toNode.getFirstChild();	  Node    nextSibling    =    node.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  toNode	4	None	replace
1181	[BUG]  [BUGGY]          Node    body    =    node.getFirstChild();    Node  head  =  node.getFirstChild();  Node  body  =  node.getFirstChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    body    =    node.getFirstChild();    Node  head  =  node.getFirstChild();  Node  body  =  node.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        body        =        node.getFirstChild();        Node    head    =    node.getFirstChild();    Node  body  =  node.getFirstChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	177	None	add
1182	[BUG]  [BUGGY]          Node    body    =    node.getFirstChild();    Node  head  =  node.getFirstChild();  Node  body  =  node.getFirstChild();  Node  header  =  node.getFirstChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    body    =    node.getFirstChild();    Node  head  =  node.getFirstChild();  Node  body  =  node.getFirstChild();  Node  header  =  node.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        body        =        node.getFirstChild();        Node    head    =    node.getFirstChild();    Node  body  =  node.getFirstChild();  Node  header  =  node.getFirstChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	177	None	add
1183	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  node,  finallyMap);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  node,  finallyMap);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  node,  finallyMap);	  return    computeFallThrough(fromNode,    node);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	80	None	replace
1184	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  cfg,  astPositionCounter);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowGraph<Node>,int)  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  cfg,  astPositionCounter);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  cfg,  astPositionCounter);	  NodeTraversal.traverse(compiler,    node,    this,    cfg);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowGraph<Node>,int)	73	None	replace
1185	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  toNode,  cfg);  [CE]  cannot  find  symbol  toNode  [FE]                  StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  toNode,  cfg);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  this,  toNode,  cfg);	  NodeTraversal.traverse(compiler,    node,    this,    cfg);    	non-compiled	[CE]  cannot  find  symbol  toNode	73	None	replace
1186	[BUG]  [BUGGY]  NodeUtil.replaceChild(parent,  node);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.replaceChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.replaceChild(parent,  node);	  NodeUtil.removeChild(node,    parent);    	non-compiled	[CE]  cannot  find  symbol	171	None	replace
1187	[BUG]  [BUGGY]  NodeUtil.redeclareVars(parent,  node);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.redeclareVars(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.redeclareVars(parent,  node);	  NodeUtil.removeChild(node,    parent);    	non-compiled	[CE]  cannot  find  symbol	171	None	replace
1188	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(parent,  node);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(parent,  node);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(node);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	236	None	replace
1189	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  fromNode.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  fromNode.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFallThrough(parent.getLastChild());    }    	compilable	  [FE]  RuntimeException  	223	7	replace
1190	[BUG]  [BUGGY]  Node  nextSibling  =  fromNode.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  fromNode.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  fromNode.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFallThrough(parent.getLastChild());    }    	compilable	  [FE]  RuntimeException  	223	7	replace
1191	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getLastChild();  Node  lastJump  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node    nextSibling    =    parent.getLastChild();    Node  lastJump  =  parent.getLastChild();	  	compilable	  [FE]  AssertionFailedError  	1	3	add
1192	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getLastChild();  Node  lastJump  =  parent.getLastChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getLastChild();  Node  lastJump  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    parent.getLastChild();    Node  lastJump  =  parent.getLastChild();	  	compilable	  [FE]  AssertionFailedError  	1	3	add
1193	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getLastChild();  Node  parent  =  parent.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getLastChild();  Node  parent  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    parent.getLastChild();    Node  parent  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	1	None	add
1194	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getLastChild());  return  computeFollowNode(fromNode.getLastChild());  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getLastChild());  return  computeFollowNode(fromNode.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(fromNode.getLastChild());    return  computeFollowNode(fromNode.getLastChild());	  	non-compiled	[CE]  unreachable  statement	19	None	add
1195	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getLastChild());  return  computeFollowNode(fromNode.getFirstChild());  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getLastChild());  return  computeFollowNode(fromNode.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(fromNode.getLastChild());    return  computeFollowNode(fromNode.getFirstChild());	  	non-compiled	[CE]  unreachable  statement	19	None	add
1196	[BUG]  [BUGGY]  Preconditions.checkState(nextSibling!=  null);  [CE]  cannot  find  symbol  nextSibling  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Preconditions.checkState(nextSibling!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Preconditions.checkState(nextSibling!=  null);	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=    null);    Node    nextSibling    =    parent.getNext();    	non-compiled	[CE]  cannot  find  symbol  nextSibling	166	None	replace
1197	[BUG]  [BUGGY]  Node  body  =  parent.getParent();  Node  parent  =  node.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getParent();  Node  parent  =  node.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    parent.getParent();    Node  parent  =  node.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	251	None	add
1198	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(node);  NodeUtil.removeChild(node,  parent);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(node);  NodeUtil.removeChild(node,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(node,    parent);    NodeUtil.removeChild(node);  NodeUtil.removeChild(node,  parent);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	194	None	add
1199	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(lastJump,  node);  NodeUtil.removeChild(node,  parent);  [CE]  cannot  find  symbol  lastJump  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(lastJump,  node);  NodeUtil.removeChild(node,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(node,    parent);    NodeUtil.removeChild(lastJump,  node);  NodeUtil.removeChild(node,  parent);	  	non-compiled	[CE]  cannot  find  symbol  lastJump	194	None	add
1200	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(node,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(node,    parent);    NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(node,  parent);	  	compilable	  [FE]  RuntimeException  	194	7	add
1201	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(node,  parent);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(node,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(node,    parent);    NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(node,  parent);	  	compilable	  [FE]  RuntimeException  	194	7	add
1202	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent);  NodeUtil.removeChild(node,  parent);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent);  NodeUtil.removeChild(node,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(node,    parent);    NodeUtil.removeChild(parent);  NodeUtil.removeChild(node,  parent);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	194	None	add
1203	[BUG]  [BUGGY]  Node  nextSibling  =  node.getFirstChild();  Node  parent  =  nextSibling.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getFirstChild();  Node  parent  =  nextSibling.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  node.getFirstChild();  Node  parent  =  nextSibling.getFirstChild();	          Node    nextSibling    =    parent.getFirstChild();    Node    parent    =    nextSibling.getFirstChild();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	122	None	replace
1204	[BUG]  [BUGGY]  Node  nextSibling  =  fromNode.getFirstChild();  Node  parent  =  nextSibling.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  fromNode.getFirstChild();  Node  parent  =  nextSibling.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  fromNode.getFirstChild();  Node  parent  =  nextSibling.getFirstChild();	          Node    nextSibling    =    parent.getFirstChild();    Node    parent    =    nextSibling.getFirstChild();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	122	None	replace
1205	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  if(nextSibling!=  null)  {  parent  =  nextSibling.getFirstChild();  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  parent.getFirstChild();  if(nextSibling!=  null)  {  parent  =  nextSibling.getFirstChild();  }	          Node    nextSibling    =    parent.getFirstChild();    Node    parent    =    nextSibling.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	122	5	replace
1206	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  if(nextSibling!=  null)  {  parent  =  nextSibling.getFirstChild();  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  if(nextSibling!=  null)  {  parent  =  nextSibling.getFirstChild();  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getFirstChild();  if(nextSibling!=  null)  {  parent  =  nextSibling.getFirstChild();  }	          Node    nextSibling    =    parent.getFirstChild();    Node    parent    =    nextSibling.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	122	5	replace
1207	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(parent.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(parent.getLastChild());	  return    computeFallThrough(node.getFirstChild());    Node    nextSibling    =    parent.getFirstChild();    return    computeFallThrough(node.getFirstChild());    	compilable	  [FE]  AssertionFailedError  	274	3	replace
1208	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(parent.getLastChild());  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(parent.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(parent.getLastChild());	  return    computeFallThrough(node.getFirstChild());    Node    nextSibling    =    parent.getFirstChild();    return    computeFallThrough(node.getFirstChild());    	compilable	  [FE]  AssertionFailedError  	274	3	replace
1209	[BUG]  [BUGGY]  Node  nextSibling  =  fromNode.getFirstChild();  Node  fromNode  =  fromNode.getFirstChild();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  fromNode.getFirstChild();  Node  fromNode  =  fromNode.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    fromNode.getFirstChild();    Node  fromNode  =  fromNode.getFirstChild();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	5	None	add
1210	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  fromNode.getFirstChild();  Node  toNode  =  fromNode.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node    nextSibling    =    fromNode.getFirstChild();    Node  toNode  =  fromNode.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	5	3	add
1211	[BUG]  [BUGGY]  Node  nextSibling  =  fromNode.getFirstChild();  Node  toNode  =  fromNode.getFirstChild();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  fromNode.getFirstChild();  Node  toNode  =  fromNode.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    fromNode.getFirstChild();    Node  toNode  =  fromNode.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	5	3	add
1212	[BUG]  [BUGGY]  Node  nextSibling  =  fromNode.getFirstChild();  Node  parent  =  fromNode.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  fromNode.getFirstChild();  Node  parent  =  fromNode.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    fromNode.getFirstChild();    Node  parent  =  fromNode.getFirstChild();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	5	None	add
1213	[BUG]  [BUGGY]  return  computeFollowNode(toNode,  fromNode,  parent);  [CE]  cannot  find  symbol  toNode  [FE]                          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(toNode,  fromNode,  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(toNode,  fromNode,  parent);	  return    computeFollowNode(fromNode,    node,    parent);    	non-compiled	[CE]  cannot  find  symbol  toNode	158	None	replace
1214	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  parent,  exceptionHandler);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Deque<Node>)  [FE]                            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  node,  parent,  exceptionHandler);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  node,  parent,  exceptionHandler);	  return    computeFollowNode(fromNode,    node,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Deque<Node>)	158	None	replace
1215	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  fromNode.getNext();  Preconditions.checkState(nextSibling!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  fromNode.getNext();  Preconditions.checkState(nextSibling!=  null);	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=    null);    	compilable	  [FE]  RuntimeException  	168	6	replace
1216	[BUG]  [BUGGY]  Node  nextSibling  =  fromNode.getNext();  Preconditions.checkState(nextSibling!=  null);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  fromNode.getNext();  Preconditions.checkState(nextSibling!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  fromNode.getNext();  Preconditions.checkState(nextSibling!=  null);	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=    null);    	compilable	  [FE]  RuntimeException  	168	6	replace
1217	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  AssertionFailedError  <  Node>  nextSibling  =  parent.getNext();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getNext();  AssertionFailedError  <  Node>  nextSibling  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  node.getNext();  AssertionFailedError  <  Node>  nextSibling  =  parent.getNext();	          Node    nextSibling    =    parent.getNext();    AssertionFailedError    <    Node>    nextSibling    =    parent.getNext();    	non-compiled	[CE]  cannot  find  symbol	165	None	replace
1218	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent);  Node  body  =  node.getFirstChild();  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  parent);  Node  body  =  node.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  parent);  Node  body  =  node.getFirstChild();	  return    computeFollowNode(fromNode,    node);    Node    body    =    node.getFirstChild();    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	219	None	replace
1219	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  node);  Node  body  =  node.getFirstChild();  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                  StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  node);  Node  body  =  node.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  node);  Node  body  =  node.getFirstChild();	  return    computeFollowNode(fromNode,    node);    Node    body    =    node.getFirstChild();    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	219	None	replace
1220	[BUG]  [BUGGY]  return  computeFallThrough(parent.getFirstChild());  return  computeFollowNode(fromNode,  parent.getFirstChild());  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(parent.getFirstChild());  return  computeFollowNode(fromNode,  parent.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(parent.getFirstChild());    return  computeFollowNode(fromNode,  parent.getFirstChild());	  	non-compiled	[CE]  unreachable  statement	44	None	add
1221	[BUG]  [BUGGY]  return  computeFallThrough(parent.getFirstChild());  return  computeFollowNode(fromNode,  parent.getLastChild());  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(parent.getFirstChild());  return  computeFollowNode(fromNode,  parent.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(parent.getFirstChild());    return  computeFollowNode(fromNode,  parent.getLastChild());	  	non-compiled	[CE]  unreachable  statement	44	None	add
1222	[BUG]  [BUGGY]  return  computeFallThrough(parent.getFirstChild());  return  computeFollowNode(fromNode.getFirstChild());  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(parent.getFirstChild());  return  computeFollowNode(fromNode.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(parent.getFirstChild());    return  computeFollowNode(fromNode.getFirstChild());	  	non-compiled	[CE]  unreachable  statement	44	None	add
1223	[BUG]  [BUGGY]  TraverseFactory.traverse(compiler,  fromNode,  this);  [CE]  cannot  find  symbol  TraverseFactory  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  TraverseFactory.traverse(compiler,  fromNode,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	TraverseFactory.traverse(compiler,  fromNode,  this);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    fromNode,    this);    	non-compiled	[CE]  cannot  find  symbol  TraverseFactory	180	None	replace
1224	[BUG]  [BUGGY]  return  computeFallThrough(parent.getLastChild());  return  computeFollowNode(fromNode,  parent.getFirstChild());  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(parent.getLastChild());  return  computeFollowNode(fromNode,  parent.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(parent.getLastChild());    return  computeFollowNode(fromNode,  parent.getFirstChild());	  	non-compiled	[CE]  unreachable  statement	38	None	add
1225	[BUG]  [BUGGY]  return  computeFallThrough(parent.getLastChild());  return  computeFollowNode(fromNode,  parent);  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(parent.getLastChild());  return  computeFollowNode(fromNode,  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(parent.getLastChild());    return  computeFollowNode(fromNode,  parent);	  	non-compiled	[CE]  unreachable  statement	38	None	add
1226	[BUG]  [BUGGY]  Node  body  =  node.getLastChild();  Node  parent  =  parent.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  node.getLastChild();  Node  parent  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  node.getLastChild();  Node  parent  =  parent.getFirstChild();	          Node    body    =    parent.getFirstChild();    Node    parent    =    parent.getFirstChild();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	15	None	replace
1227	[BUG]  [BUGGY]  Node  nextSibling  =  toNode.getFirstChild();  Node  parent  =  parent.getLastChild();  [CE]  cannot  find  symbol  toNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  toNode.getFirstChild();  Node  parent  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  toNode.getFirstChild();  Node  parent  =  parent.getLastChild();	          Node    nextSibling    =    parent.getFirstChild();    Node    parent    =    parent.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  toNode	125	None	replace
1228	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent.getFirstChild(),  node,  thenBlock);  [CE]  cannot  find  symbol  thenBlock  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  parent.getFirstChild(),  node,  thenBlock);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  parent.getFirstChild(),  node,  thenBlock);	  return    computeFallThrough(fromNode,    parent.getFirstChild(),    node);    	non-compiled	[CE]  cannot  find  symbol  thenBlock	265	None	replace
1229	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent.getFirstChild(),  node,  body);  [CE]  cannot  find  symbol  body  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  parent.getFirstChild(),  node,  body);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  parent.getFirstChild(),  node,  body);	  return    computeFallThrough(fromNode,    parent.getFirstChild(),    node);    	non-compiled	[CE]  cannot  find  symbol  body	265	None	replace
1230	[BUG]  [BUGGY]  return  computeFallThrough(toNode,  fromNode);  [CE]  cannot  find  symbol  toNode  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(toNode,  fromNode);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(toNode,  fromNode);	  return    computeFallThrough(node,    fromNode);    	non-compiled	[CE]  cannot  find  symbol  toNode	81	None	replace
1231	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  fromNode);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  fromNode);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  fromNode);	  return    computeFallThrough(node,    fromNode);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	81	None	replace
1232	[BUG]  [BUGGY]  return  computeFowThrough(fromNode,  node);  [CE]  cannot  find  symbol  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFowThrough(fromNode,  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFowThrough(fromNode,  node);	  return    computeFallThrough(node,    fromNode);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
1233	[BUG]  [BUGGY]  Node  body  =  node.getLastChild();  Node  node  =  node.getLastChild();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  node.getLastChild();  Node  node  =  node.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    node.getLastChild();    Node  node  =  node.getLastChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	95	None	add
1234	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode.getFirstChild(),  fromNode.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	return  computeFollowNode(fromNode.getFirstChild(),  fromNode.getLastChild());	  return    computeFallThrough(node.getFirstChild());    return    computeFallThrough(node.getLastChild());    	compilable	  [FE]  RuntimeException  	11	6	replace
1235	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getFirstChild(),  fromNode.getLastChild());  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode.getFirstChild(),  fromNode.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode.getFirstChild(),  fromNode.getLastChild());	  return    computeFallThrough(node.getFirstChild());    return    computeFallThrough(node.getLastChild());    	compilable	  [FE]  RuntimeException  	11	6	replace
1236	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode.getFirstChild(),  node.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	return  computeFollowNode(fromNode.getFirstChild(),  node.getLastChild());	  return    computeFallThrough(node.getFirstChild());    return    computeFallThrough(node.getLastChild());    	compilable	  [FE]  RuntimeException  	11	7	replace
1237	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getFirstChild(),  node.getLastChild());  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode.getFirstChild(),  node.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode.getFirstChild(),  node.getLastChild());	  return    computeFallThrough(node.getFirstChild());    return    computeFallThrough(node.getLastChild());    	compilable	  [FE]  RuntimeException  	11	7	replace
1238	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.removeChild(node);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    NodeUtil.removeChild(node);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	272	None	add
1239	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.removeChild(node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.removeChild(node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    NodeUtil.removeChild(node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	272	None	add
1240	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent.getLastChild());  Node  body  =  parent.getFirstChild();  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  parent.getLastChild());  Node  body  =  parent.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  parent.getLastChild());  Node  body  =  parent.getFirstChild();	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    body    =    parent.getFirstChild();    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	261	None	replace
1241	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  body);  [CE]  cannot  find  symbol  body  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  body);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  this,  body);	  NodeTraversal.traverse(compiler,    node,    this,    toNode);    	non-compiled	[CE]  cannot  find  symbol  body	172	None	replace
1242	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  initPriorities);  [CE]  cannot  find  symbol  initPriorities  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  initPriorities);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  nodePriorities,  initPriorities);	  return    computeFollowNode(fromNode,    parent,    nodePriorities,    priorities);    	non-compiled	[CE]  cannot  find  symbol  initPriorities	29	None	replace
1243	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling    ==    null)    {    return    computeFallThrough(nextSibling.getLastChild());    }    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	224	None	add
1244	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling    ==    null)    {    return    computeFallThrough(nextSibling.getLastChild());    }    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	224	None	add
1245	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling    ==    null)    {    return    computeFallThrough(nextSibling.getLastChild());    }    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	224	None	add
1246	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling    ==    null)    {    return    computeFallThrough(nextSibling.getLastChild());    }    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	224	None	add
1247	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.CATCH);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.CATCH);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling    ==    null)    {    return    computeFallThrough(nextSibling.getLastChild());    }    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.CATCH);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	224	None	add
1248	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  body,  cfg);  [CE]  cannot  find  symbol  body  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  body,  cfg);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  this,  body,  cfg);	  NodeTraversal.traverse(compiler,    node,    this,    cfg);    	non-compiled	[CE]  cannot  find  symbol  body	73	None	replace
1249	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  fromNode,  cfg);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node,ControlFlowGraph<Node>)  [FE]                  StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  fromNode,  cfg);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  this,  fromNode,  cfg);	  NodeTraversal.traverse(compiler,    node,    this,    cfg);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node,ControlFlowGraph<Node>)	73	None	replace
1250	[BUG]  [BUGGY]  Node  nextSibling  =  child.getFirstChild();  [CE]  cannot  find  symbol  child  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  child.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  child.getFirstChild();	          Node    nextSibling    =    parent.getFirstChild();    Node    nextSibling    =    node.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  child	124	None	replace
1251	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFallThrough(nextSibling.getLastChild());    }    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	220	None	add
1252	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFallThrough(nextSibling.getLastChild());    }    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	220	None	add
1253	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFallThrough(nextSibling.getLastChild());    }    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	220	None	add
1254	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.CATCH);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.CATCH);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFallThrough(nextSibling.getLastChild());    }    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.CATCH);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	220	None	add
1255	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  parent.getFirstChild();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling    ==    null)    {    return    computeFallThrough(nextSibling.getLastChild());    }    	compilable	  [FE]  AssertionFailedError  	225	3	replace
1256	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getFirstChild();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling    ==    null)    {    return    computeFallThrough(nextSibling.getLastChild());    }    	compilable	  [FE]  AssertionFailedError  	225	3	replace
1257	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        fromNode);        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(fromNode);    NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(parent);	  	compilable	  [FE]  RuntimeException  	190	7	add
1258	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(parent);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(fromNode);    NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(parent);	  	compilable	  [FE]  RuntimeException  	190	7	add
1259	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        fromNode);        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(fromNode);    NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);	  	compilable	  [FE]  RuntimeException  	190	7	add
1260	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(fromNode);    NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);	  	compilable	  [FE]  RuntimeException  	190	7	add
1261	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    NodeUtil.removeChild(node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	270	None	add
1262	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.CATCH);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.CATCH);	  	compilable	  [FE]  RuntimeException  	270	7	add
1263	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.CATCH);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.CATCH);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.CATCH);	  	compilable	  [FE]  RuntimeException  	270	7	add
1264	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(parent,  node);  preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  preconditions  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(parent,  node);  preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    NodeUtil.removeChild(parent,  node);  preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	270	None	add
1265	[BUG]  [BUGGY]  Node  body  =  node.getLastChild();  Node  body  =  node.getLastChild());  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  node.getLastChild();  Node  body  =  node.getLastChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    node.getLastChild();    Node  body  =  node.getLastChild());	  	non-compiled	[CE]  ';'  expected	95	None	add
1266	[BUG]  [BUGGY]  Node  parent  =  getParent().getParent(parent);  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getParent().getParent(parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParent().getParent(parent);	  Node    parent    =    getParent().getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	131	None	replace
1267	[BUG]  [BUGGY]  return  computeFallThrough(parent.getLastChild(),  fromNode,  parent);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(parent.getLastChild(),  fromNode,  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(parent.getLastChild(),  fromNode,  parent);	  return    computeFallThrough(parent.getLastChild(),    node);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	211	None	replace
1268	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  parent);  NodeUtil.addChildToFront(parent,  node);  NodeUtil.removeChild(node,  parent);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  parent);  NodeUtil.addChildToFront(parent,  node);  NodeUtil.removeChild(node,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(node,    parent);    NodeUtil.addChildToFront(parent,  node);  NodeUtil.removeChild(node,  parent);	  	non-compiled	[CE]  cannot  find  symbol	194	None	add
1269	[BUG]  [BUGGY]  Node  parent  =  parent.getNext();  AssertionFailedError  <  Node>  parent  =  nextSibling.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  parent.getNext();  AssertionFailedError  <  Node>  parent  =  nextSibling.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  parent.getNext();  AssertionFailedError  <  Node>  parent  =  nextSibling.getParent();	          Node    nextSibling    =    parent.getNext();    AssertionFailedError    <    Node>    parent    =    nextSibling.getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	169	None	replace
1270	[BUG]  [BUGGY]  AssertionFailedError  <  Node>  parent  =  parent.getParent();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  AssertionFailedError  <  Node>  parent  =  parent.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	AssertionFailedError  <  Node>  parent  =  parent.getParent();	          Node    nextSibling    =    parent.getNext();    AssertionFailedError    <    Node>    parent    =    nextSibling.getParent();    	non-compiled	[CE]  cannot  find  symbol	169	None	replace
1271	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(fromNode);    NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);	  	compilable	  [FE]  RuntimeException  	60	7	add
1272	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(fromNode);    NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);	  	compilable	  [FE]  RuntimeException  	60	7	add
1273	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(fromNode);    NodeUtil.removeChild(parent,  fromNode);	  	compilable	  [FE]  RuntimeException  	60	6	add
1274	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(fromNode);    NodeUtil.removeChild(parent,  fromNode);	  	compilable	  [FE]  RuntimeException  	60	6	add
1275	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling    ==    null)    {    return    computeFallThrough(parent.getLastChild());    }    	compilable	  [FE]  RuntimeException  	227	7	replace
1276	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling    ==    null)    {    return    computeFallThrough(parent.getLastChild());    }    	compilable	  [FE]  RuntimeException  	227	7	replace
1277	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  parent.getFirstChild();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling    ==    null)    {    return    computeFallThrough(parent.getLastChild());    }    	compilable	  [FE]  AssertionFailedError  	227	5	replace
1278	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getFirstChild();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling    ==    null)    {    return    computeFallThrough(parent.getLastChild());    }    	compilable	  [FE]  AssertionFailedError  	227	5	replace
1279	[BUG]  [BUGGY]  NodeUtil.removeChild(lastJump,  parent);  [CE]  cannot  find  symbol  lastJump  [FE]        RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(lastJump,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(lastJump,  parent);	  NodeUtil.removeChild(parent,    child);    	non-compiled	[CE]  cannot  find  symbol  lastJump	153	None	replace
1280	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  return  computeFallThrough(node.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(parent,  node);  return  computeFallThrough(node.getFirstChild());	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    return    computeFollowNode(fromNode,    parent);    	compilable	  [FE]  RuntimeException  	64	7	replace
1281	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  return  computeFallThrough(node.getFirstChild());  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  return  computeFallThrough(node.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node);  return  computeFallThrough(node.getFirstChild());	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    return    computeFollowNode(fromNode,    parent);    	compilable	  [FE]  RuntimeException  	64	7	replace
1282	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  return  computeFallThrough(parent.getLastChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(parent,  node);  return  computeFallThrough(parent.getLastChild());	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    return    computeFollowNode(fromNode,    parent);    	compilable	  [FE]  AssertionFailedError  	64	6	replace
1283	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  return  computeFallThrough(parent.getLastChild());  [FE]  AssertionFailedError  [FE]                  RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  return  computeFallThrough(parent.getLastChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node);  return  computeFallThrough(parent.getLastChild());	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    return    computeFollowNode(fromNode,    parent);    	compilable	  [FE]  AssertionFailedError  	64	6	replace
1284	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.replaceChild(node,  body);  [CE]  cannot  find  symbol  body  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.replaceChild(node,  body);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node);  parent.replaceChild(node,  body);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.removeChild(node);    	non-compiled	[CE]  cannot  find  symbol  body	136	None	replace
1285	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.replaceChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(parent,  node);  parent.replaceChild(parent,  node);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.removeChild(node);    	compilable	  [FE]  RuntimeException  	136	7	replace
1286	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.replaceChild(parent,  node);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.replaceChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node);  parent.replaceChild(parent,  node);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.removeChild(node);    	compilable	  [FE]  RuntimeException  	136	7	replace
1287	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  return    computeFallThrough(node.getFirstChild());    Node    parent    =    node.getParent();    	compilable	  [FE]  RuntimeException  	7	7	replace
1288	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  return    computeFallThrough(node.getFirstChild());    Node    parent    =    node.getParent();    	compilable	  [FE]  RuntimeException  	7	7	replace
1289	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent  =  node.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent  =  node.getParent();	  return    computeFallThrough(node.getFirstChild());    Node    parent    =    node.getParent();    	compilable	  [FE]  RuntimeException  	7	7	replace
1290	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent  =  node.getParent();  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent  =  node.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent  =  node.getParent();	  return    computeFallThrough(node.getFirstChild());    Node    parent    =    node.getParent();    	compilable	  [FE]  RuntimeException  	7	7	replace
1291	[BUG]  [BUGGY]          Node    body    =    node.getFirstChild();    Node  head  =  node.getFirstChild();  Node  body  =  child.getFirstChild();  Node  head  =  node.getFirstChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    body    =    node.getFirstChild();    Node  head  =  node.getFirstChild();  Node  body  =  child.getFirstChild();  Node  head  =  node.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        body        =        node.getFirstChild();        Node    head    =    node.getFirstChild();    Node  body  =  child.getFirstChild();  Node  head  =  node.getFirstChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	177	None	add
1292	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(parent,  node);  NodeUtil.replaceChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(parent,  node);  NodeUtil.replaceChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(fromNode,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.replaceChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);	  	non-compiled	[CE]  cannot  find  symbol	62	None	add
1293	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(fromNode,    node);    NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);	  	compilable	  [FE]  RuntimeException  	62	7	add
1294	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(fromNode,    node);    NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);	  	compilable	  [FE]  RuntimeException  	62	7	add
1295	[BUG]  [BUGGY]  AssertionFailedError  <  Node>  nextSibling  =  parent.getNext();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  AssertionFailedError  <  Node>  nextSibling  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	AssertionFailedError  <  Node>  nextSibling  =  parent.getNext();	          Node    nextSibling    =    parent.getNext();    AssertionFailedError    <    Node>    nextSibling    =    parent.getNext();    	non-compiled	[CE]  cannot  find  symbol	165	None	replace
1296	[BUG]  [BUGGY]  Node  parent  =  node.getNext();  AssertionFailedError  <  Node>  nextSibling  =  parent.getNext();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  node.getNext();  AssertionFailedError  <  Node>  nextSibling  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  node.getNext();  AssertionFailedError  <  Node>  nextSibling  =  parent.getNext();	          Node    nextSibling    =    parent.getNext();    AssertionFailedError    <    Node>    nextSibling    =    parent.getNext();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	165	None	replace
1297	[BUG]  [BUGGY]  Node  body  =  child.getLastChild();  [CE]  cannot  find  symbol  child  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  child.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  child.getLastChild();	          Node    body    =    parent.getFirstChild();    Node    body    =    parent.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  child	14	None	replace
1298	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  collection);  [CE]  cannot  find  symbol  collection  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  collection);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  node,  collection);	  return    computeFollowNode(fromNode,    parent,    node,    body);    	non-compiled	[CE]  cannot  find  symbol  collection	278	None	replace
1299	[BUG]  [BUGGY]  Node  body  =  toNode(parent.getFirstChild());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  toNode(parent.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  toNode(parent.getFirstChild());	          Node    body    =    parent.getFirstChild();    Node    body    =    parent.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
1300	[BUG]  [BUGGY]  return  computeFallThrough(node,  parent.getFirstChild());  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(node,  parent.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(node,  parent.getFirstChild());	  return    computeFallThrough(fromNode,    parent.getFirstChild());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	86	None	replace
1301	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent.getFirstChild(),  body);  [CE]  cannot  find  symbol  body  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  parent.getFirstChild(),  body);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  parent.getFirstChild(),  body);	  return    computeFallThrough(fromNode,    parent.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol  body	86	None	replace
1302	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  null);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling    ==    null)    {    return    computeFallThrough(parent.getLastChild());    }    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  null);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	226	None	add
1303	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling    ==    null)    {    return    computeFallThrough(parent.getLastChild());    }    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	226	None	add
1304	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling    ==    null)    {    return    computeFallThrough(parent.getLastChild());    }    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	226	None	add
1305	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling    ==    null)    {    return    computeFallThrough(parent.getLastChild());    }    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	226	None	add
1306	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling    ==    null)    {    return    computeFallThrough(parent.getLastChild());    }    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	226	None	add
1307	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);	  	compilable	  [FE]  RuntimeException  	235	7	add
1308	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);	  	compilable	  [FE]  RuntimeException  	235	7	add
1309	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(node);    NodeUtil.removeChild(parent,  fromNode);	  	compilable	  [FE]  RuntimeException  	235	6	add
1310	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  NodeUtil.removeChild(parent,  fromNode);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(node);    NodeUtil.removeChild(parent,  fromNode);	  	compilable	  [FE]  RuntimeException  	235	6	add
1311	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.replaceChild(parent,  fromNode);  parent.removeChild(node);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.replaceChild(parent,  fromNode);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(node);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.replaceChild(parent,  fromNode);  parent.removeChild(node);	  	non-compiled	[CE]  cannot  find  symbol	235	None	add
1312	[BUG]  [BUGGY]  Node  parent  =  getParentNode(fromNode,  parent.getParent());  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getParentNode(fromNode,  parent.getParent());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParentNode(fromNode,  parent.getParent());	  Node    parent    =    getParentNode(parent.getParent());    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	258	None	replace
1313	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  firstJump);  [CE]  cannot  find  symbol  firstJump  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  firstJump);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  nodePriorities,  firstJump);	  return    computeFollowNode(fromNode,    parent,    nodePriorities,    firstSibling);    	non-compiled	[CE]  cannot  find  symbol  firstJump	33	None	replace
1314	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this,  finallyMap);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Multimap<Node,Node>)  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this,  finallyMap);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  fromNode,  this,  finallyMap);	  NodeTraversal.traverse(compiler,    fromNode,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Multimap<Node,Node>)	72	None	replace
1315	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this,  node);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node)  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  fromNode,  this,  node);	  NodeTraversal.traverse(compiler,    fromNode,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node)	72	None	replace
1316	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent);  node  =  node.getParent();  [CE]  unreachable  statement  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent);  node  =  node.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent);  node  =  node.getParent();	  return    computeFollowNode(fromNode,    node);    Node    parent    =    node.getParent();    	non-compiled	[CE]  unreachable  statement	106	None	replace
1317	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPosition,  body);  [CE]  cannot  find  symbol  body  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPosition,  body);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  astPosition,  body);	  NodeTraversal.traverse(compiler,    node,    this,    astPosition);    	non-compiled	[CE]  cannot  find  symbol  body	69	None	replace
1318	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this,  astPosition);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Map<Node,Integer>)  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this,  astPosition);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  fromNode,  this,  astPosition);	  NodeTraversal.traverse(compiler,    node,    this,    astPosition);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Map<Node,Integer>)	69	None	replace
1319	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  astPosition,  finallyMap);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Map<Node,Integer>,Multimap<Node,Node>)  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  astPosition,  finallyMap);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  this,  astPosition,  finallyMap);	  NodeTraversal.traverse(compiler,    node,    this,    astPosition);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Map<Node,Integer>,Multimap<Node,Node>)	69	None	replace
1320	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFallThrough(parent.getLastChild());    }    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	222	None	add
1321	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFallThrough(parent.getLastChild());    }    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	222	None	add
1322	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFallThrough(parent.getLastChild());    }    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	222	None	add
1323	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  null);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFallThrough(parent.getLastChild());    }    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  null);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	222	None	add
1324	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFallThrough(parent.getLastChild());    }    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	222	None	add
1325	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  cfg,  body);  [CE]  cannot  find  symbol  body  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  cfg,  body);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  cfg,  body);	  NodeUtil.removeChild(parent,    cfg);    	non-compiled	[CE]  cannot  find  symbol  body	113	None	replace
1326	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  fromNode);	  	compilable	  [FE]  RuntimeException  	56	6	add
1327	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  fromNode);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  fromNode);	  	compilable	  [FE]  RuntimeException  	56	6	add
1328	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  fromNode);	  	compilable	  [FE]  RuntimeException  	56	7	add
1329	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  fromNode);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  fromNode);	  	compilable	  [FE]  RuntimeException  	56	7	add
1330	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.replaceChild(parent,  fromNode);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.replaceChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.replaceChild(parent,  fromNode);	  	non-compiled	[CE]  cannot  find  symbol	56	None	add
1331	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  NodeUtil.removeChild(lastJump,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  [CE]  cannot  find  symbol  lastJump  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  NodeUtil.removeChild(lastJump,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    parent.removeChild(fromNode);    NodeUtil.removeChild(lastJump,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);	  	non-compiled	[CE]  cannot  find  symbol  lastJump	139	None	add
1332	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    parent.removeChild(fromNode);    NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);	  	compilable	  [FE]  RuntimeException  	139	7	add
1333	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    parent.removeChild(fromNode);    NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);	  	compilable	  [FE]  RuntimeException  	139	7	add
1334	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getFirstChild();    Node  lastJump  =  parent.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();  Node  firstJump  =  parent.getFirstChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getFirstChild();    Node  lastJump  =  parent.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();  Node  firstJump  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getFirstChild();        Node    lastJump    =    parent.getFirstChild();    Node  nextSibling  =  parent.getFirstChild();  Node  firstJump  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	266	None	add
1335	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getFirstChild();    Node  lastJump  =  parent.getFirstChild();  Node  nextSibling  =  node.getFirstChild();  Node  lastJump  =  parent.getFirstChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getFirstChild();    Node  lastJump  =  parent.getFirstChild();  Node  nextSibling  =  node.getFirstChild();  Node  lastJump  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getFirstChild();        Node    lastJump    =    parent.getFirstChild();    Node  nextSibling  =  node.getFirstChild();  Node  lastJump  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	266	None	add
1336	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getFirstChild();    Node  lastJump  =  parent.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();  Node  previousJump  =  parent.getFirstChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getFirstChild();    Node  lastJump  =  parent.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();  Node  previousJump  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getFirstChild();        Node    lastJump    =    parent.getFirstChild();    Node  nextSibling  =  parent.getFirstChild();  Node  previousJump  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	266	None	add
1337	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(node,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(node,  parent);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,    node);    	compilable	  [FE]  RuntimeException  	199	7	replace
1338	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(node,  parent);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(node,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(node,  parent);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,    node);    	compilable	  [FE]  RuntimeException  	199	7	replace
1339	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(parent,  node);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,    parent);    	compilable	  [FE]  RuntimeException  	195	7	replace
1340	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(parent,  node);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(parent,  node);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,    parent);    	compilable	  [FE]  RuntimeException  	195	7	replace
1341	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  body  =  parent.getLastChild();  [CE]  unreachable  statement  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  body  =  parent.getLastChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent);  Node  body  =  parent.getLastChild();	  return    computeFollowNode(fromNode,    node);    Node    body    =    parent.getFirstChild();    	non-compiled	[CE]  unreachable  statement	108	None	replace
1342	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  return  computeFallThrough(node.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  parent.getFirstChild();  return  computeFallThrough(node.getFirstChild());	  return    computeFallThrough(node.getFirstChild());    Node    nextSibling    =    parent.getFirstChild();    return    computeFallThrough(node.getFirstChild());    	compilable	  [FE]  AssertionFailedError  	274	6	replace
1343	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  return  computeFallThrough(node.getFirstChild());  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  return  computeFallThrough(node.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getFirstChild();  return  computeFallThrough(node.getFirstChild());	  return    computeFallThrough(node.getFirstChild());    Node    nextSibling    =    parent.getFirstChild();    return    computeFallThrough(node.getFirstChild());    	compilable	  [FE]  AssertionFailedError  	274	6	replace
1344	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(node,    node);    NodeUtil.removeChild(parent,  fromNode);	  	compilable	  [FE]  RuntimeException  	65	7	add
1345	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);  NodeUtil.removeChild(parent,  fromNode);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(node,    node);    NodeUtil.removeChild(parent,  fromNode);	  	compilable	  [FE]  RuntimeException  	65	7	add
1346	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(node,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);	  	compilable	  [FE]  RuntimeException  	65	7	add
1347	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(node,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);	  	compilable	  [FE]  RuntimeException  	65	7	add
1348	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(parent,  fromNode);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    	compilable	  [FE]  RuntimeException  	57	7	replace
1349	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(parent,  fromNode);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(parent,  fromNode);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    	compilable	  [FE]  RuntimeException  	57	7	replace
1350	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.removeChild(parent,  fromNode);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    	compilable	  [FE]  RuntimeException  	57	7	replace
1351	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.removeChild(parent,  fromNode);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.removeChild(parent,  fromNode);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    	compilable	  [FE]  RuntimeException  	57	7	replace
1352	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  exceptionHandler,  astPositionCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Deque<Node>,int)  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  exceptionHandler,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  node,  exceptionHandler,  astPositionCounter);	  return    computeFollowNode(fromNode,    parent,    node,    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Deque<Node>,int)	154	None	replace
1353	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  finallyMap);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Multimap<Node,Node>)  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  finallyMap);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  this,  finallyMap);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	          NodeTraversal.traverse(compiler,    node,    this);    Preconditions.checkState(parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Multimap<Node,Node>)	184	None	replace
1354	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  priorityCounter,  exceptionHandler);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Map<DiGraphNode<Node,Branch>,Integer>,int,Deque<Node>)  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  priorityCounter,  exceptionHandler);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  nodePriorities,  priorityCounter,  exceptionHandler);	  return    computeFollowNode(fromNode,    parent,    nodePriorities,    priorityCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Map<DiGraphNode<Node,Branch>,Integer>,int,Deque<Node>)	31	None	replace
1355	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  priorities,  firstJump,  priorityCounter);  [CE]  cannot  find  symbol  priorities  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  priorities,  firstJump,  priorityCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  priorities,  firstJump,  priorityCounter);	  return    computeFollowNode(fromNode,    parent,    nodePriorities,    priorityCounter);    	non-compiled	[CE]  cannot  find  symbol  priorities	31	None	replace
1356	[BUG]  [BUGGY]  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	273	None	replace
1357	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  body  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  parent);	  return    computeFollowNode(fromNode,    parent.getFirstChild());    Node    body    =    parent.getFirstChild();    return    computeFallThrough(body.getLastChild());    	compilable	  [FE]  AssertionFailedError  	245	3	replace
1358	[BUG]  [BUGGY]  Node  body  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  parent);  [FE]  AssertionFailedError  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  parent);	  return    computeFollowNode(fromNode,    parent.getFirstChild());    Node    body    =    parent.getFirstChild();    return    computeFallThrough(body.getLastChild());    	compilable	  [FE]  AssertionFailedError  	245	3	replace
1359	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(node,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(parent,    parent);    NodeUtil.removeChild(node,  parent);	  	compilable	  [FE]  RuntimeException  	89	7	add
1360	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(node,  parent);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(node,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,    parent);    NodeUtil.removeChild(node,  parent);	  	compilable	  [FE]  RuntimeException  	89	7	add
1361	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Preconditions.checkState(lastJump  ==  parent.getLastChild());  [CE]  cannot  find  symbol  lastJump  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Preconditions.checkState(lastJump  ==  parent.getLastChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getFirstChild();  Preconditions.checkState(lastJump  ==  parent.getLastChild());	          Node    nextSibling    =    parent.getFirstChild();    Node    lastJump    =    parent.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  lastJump	267	None	replace
1362	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  return  computeFallThrough(fromNode,  nextSibling);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  return  computeFallThrough(fromNode,  nextSibling);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getFirstChild();  return  computeFallThrough(fromNode,  nextSibling);	  return    computeFallThrough(node.getLastChild());    Node    nextSibling    =    parent.getFirstChild();    return    computeFollowNode(fromNode,    parent);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	256	None	replace
1363	[BUG]  [BUGGY]  Node  parent  =  getParent(),  node,  this.lastJump);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getParent(),  node,  this.lastJump);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParent(),  node,  this.lastJump);	  Node    parent    =    getParent(),    node);    	non-compiled	[CE]  <identifier>  expected	130	None	replace
1364	[BUG]  [BUGGY]  Node  parent  =  getParent(),  node,  thenBlock);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getParent(),  node,  thenBlock);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParent(),  node,  thenBlock);	  Node    parent    =    getParent(),    node);    	non-compiled	[CE]  ';'  expected	130	None	replace
1365	[BUG]  [BUGGY]  node.removeChild(parent,  node);  parent.removeChild(parent,  node);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  node.removeChild(parent,  node);  parent.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	node.removeChild(parent,  node);  parent.removeChild(parent,  node);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.removeChild(parent,    node);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	137	None	replace
1366	[BUG]  [BUGGY]  ParentUtil.removeChild(parent,  node);  parent.removeChild(parent,  node);  [CE]  cannot  find  symbol  ParentUtil  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  ParentUtil.removeChild(parent,  node);  parent.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	ParentUtil.removeChild(parent,  node);  parent.removeChild(parent,  node);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.removeChild(parent,    node);    	non-compiled	[CE]  cannot  find  symbol  ParentUtil	137	None	replace
1367	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getFirstChild());  Node  body  =  parent.getFirstChild();  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode.getFirstChild());  Node  body  =  parent.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode.getFirstChild());    Node  body  =  parent.getFirstChild();	  	non-compiled	[CE]  unreachable  statement	36	None	add
1368	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node,  body);  [CE]  cannot  find  symbol  body  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  parent,  node,  body);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  parent,  node,  body);	  return    computeFallThrough(fromNode,    parent,    node);    	non-compiled	[CE]  cannot  find  symbol  body	126	None	replace
1369	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node,  firstJump);  [CE]  cannot  find  symbol  firstJump  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  parent,  node,  firstJump);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  parent,  node,  firstJump);	  return    computeFallThrough(fromNode,    parent,    node);    	non-compiled	[CE]  cannot  find  symbol  firstJump	126	None	replace
1370	[BUG]  [BUGGY]  ParentUtil.removeChild(parent,  node);  parent.replaceChild(node,  this);  [CE]  cannot  find  symbol  ParentUtil  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  ParentUtil.removeChild(parent,  node);  parent.replaceChild(node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	ParentUtil.removeChild(parent,  node);  parent.replaceChild(node,  this);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.replaceChild(node,    this);    	non-compiled	[CE]  cannot  find  symbol  ParentUtil	138	None	replace
1371	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  return  computeFallThrough(parent.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeTraversal.traverse(compiler,  node,  this);  return  computeFallThrough(parent.getFirstChild());	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    return    computeFollowNode(fromNode,    parent);    	compilable	  [FE]  StackOverflowError  	146	7	replace
1372	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  return  computeFallThrough(parent.getFirstChild());  [FE]  StackOverflowError  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  return  computeFallThrough(parent.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  this);  return  computeFallThrough(parent.getFirstChild());	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    return    computeFollowNode(fromNode,    parent);    	compilable	  [FE]  StackOverflowError  	146	7	replace
1373	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  return  computeFallThrough(parent.getLastChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeTraversal.traverse(compiler,  node,  this);  return  computeFallThrough(parent.getLastChild());	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    return    computeFollowNode(fromNode,    parent);    	compilable	  [FE]  StackOverflowError  	146	7	replace
1374	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  return  computeFallThrough(parent.getLastChild());  [FE]  StackOverflowError  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  return  computeFallThrough(parent.getLastChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  this);  return  computeFallThrough(parent.getLastChild());	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    return    computeFollowNode(fromNode,    parent);    	compilable	  [FE]  StackOverflowError  	146	7	replace
1375	[BUG]  [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  node  =  parent.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  node  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  fromNode.getFirstChild();  Node  node  =  parent.getFirstChild();	          Node    body    =    node.getFirstChild();    Node    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	175	None	replace
1376	[BUG]  [BUGGY]  return  calculateFollowNode(fromNode,  parent,  node);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  calculateFollowNode(fromNode,  parent,  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  calculateFollowNode(fromNode,  parent,  node);	  return    computeFollowNode(fromNode,    node,    parent);    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
1377	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  finallyMap);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Multimap<Node,Node>)  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  finallyMap);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  parent,  this,  finallyMap);	  NodeTraversal.traverse(compiler,    parent,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Multimap<Node,Node>)	68	None	replace
1378	[BUG]  [BUGGY]  TraverseTraversal.traverse(compiler,  node,  this);  [CE]  cannot  find  symbol  TraverseTraversal  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  TraverseTraversal.traverse(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	TraverseTraversal.traverse(compiler,  node,  this);	          NodeTraversal.traverse(compiler,    node,    this);    nodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  cannot  find  symbol  TraverseTraversal	181	None	replace
1379	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getFirstChild());  Node  fromNode  =  parent.getFirstChild();  return  computeFallThrough(fromNode.getFirstChild());  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getFirstChild());  Node  fromNode  =  parent.getFirstChild();  return  computeFallThrough(fromNode.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(fromNode.getFirstChild());    Node  fromNode  =  parent.getFirstChild();  return  computeFallThrough(fromNode.getFirstChild());	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	21	None	add
1380	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getFirstChild());  Node  fromNode  =  node.getFirstChild();  return  computeFallThrough(fromNode.getFirstChild());  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getFirstChild());  Node  fromNode  =  node.getFirstChild();  return  computeFallThrough(fromNode.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(fromNode.getFirstChild());    Node  fromNode  =  node.getFirstChild();  return  computeFallThrough(fromNode.getFirstChild());	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	21	None	add
1381	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getFirstChild();    Node  firstSibling  =  parent.getFirstChild();  Node  nextSibling  =  firstSibling.getFirstChild();  Node  firstSibling  =  parent.getFirstChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getFirstChild();    Node  firstSibling  =  parent.getFirstChild();  Node  nextSibling  =  firstSibling.getFirstChild();  Node  firstSibling  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getFirstChild();        Node    firstSibling    =    parent.getFirstChild();    Node  nextSibling  =  firstSibling.getFirstChild();  Node  firstSibling  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	268	None	add
1382	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getFirstChild();    Node  firstSibling  =  parent.getFirstChild();  Node  nextSibling  =  node.getFirstChild();  Node  firstSibling  =  parent.getFirstChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getFirstChild();    Node  firstSibling  =  parent.getFirstChild();  Node  nextSibling  =  node.getFirstChild();  Node  firstSibling  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getFirstChild();        Node    firstSibling    =    parent.getFirstChild();    Node  nextSibling  =  node.getFirstChild();  Node  firstSibling  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	268	None	add
1383	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.replaceChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(parent,  node);  parent.replaceChild(parent,  fromNode);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(fromNode);    	compilable	  [FE]  RuntimeException  	61	7	replace
1384	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.replaceChild(parent,  fromNode);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.replaceChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node);  parent.replaceChild(parent,  fromNode);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    parent.removeChild(fromNode);    	compilable	  [FE]  RuntimeException  	61	7	replace
1385	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getfirstChild();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getfirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getfirstChild();	  Node    nextSibling    =    parent.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
1386	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getFirstChild());  }  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getFirstChild());  }	  return    computeFollowNode(fromNode,    parent.getFirstChild());    Node    parent    =    node.getParent();    if(parent!=    null)    {    return    computeFollowNode(fromNode,    parent.getFirstChild());    }    	compilable	  [FE]  StackOverflowError  	51	7	replace
1387	[BUG]  [BUGGY]  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getFirstChild());  }  [FE]  StackOverflowError  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getFirstChild());  }  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getFirstChild());  }	  return    computeFollowNode(fromNode,    parent.getFirstChild());    Node    parent    =    node.getParent();    if(parent!=    null)    {    return    computeFollowNode(fromNode,    parent.getFirstChild());    }    	compilable	  [FE]  StackOverflowError  	51	7	replace
1388	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  if(parent!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	if(parent!=  null)  {  return  computeFallThrough(parent.getLastChild());  }	  return    computeFollowNode(fromNode,    parent.getFirstChild());    Node    parent    =    node.getParent();    if(parent!=    null)    {    return    computeFollowNode(fromNode,    parent.getFirstChild());    }    	compilable	  [FE]  AssertionFailedError  	51	5	replace
1389	[BUG]  [BUGGY]  if(parent!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  [FE]  AssertionFailedError  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  if(parent!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	if(parent!=  null)  {  return  computeFallThrough(parent.getLastChild());  }	  return    computeFollowNode(fromNode,    parent.getFirstChild());    Node    parent    =    node.getParent();    if(parent!=    null)    {    return    computeFollowNode(fromNode,    parent.getFirstChild());    }    	compilable	  [FE]  AssertionFailedError  	51	5	replace
1390	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(this.node);  [CE]  cannot  find  symbol  node  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(this.node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.redeclareVarsInsideBranch(this.node);	  NodeUtil.redeclareVarsInsideBranch(fromNode);    	non-compiled	[CE]  cannot  find  symbol  node	241	None	replace
1391	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.addChildToFront(node);  NodeUtil.removeChild(parent,  node);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.addChildToFront(node);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    NodeUtil.addChildToFront(node);  NodeUtil.removeChild(parent,  node);	  	non-compiled	[CE]  cannot  find  symbol	132	None	add
1392	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.clearChild(parent,  node);  NodeUtil.removeChild(parent,  node);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.clearChild(parent,  node);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    NodeUtil.clearChild(parent,  node);  NodeUtil.removeChild(parent,  node);	  	non-compiled	[CE]  cannot  find  symbol	132	None	add
1393	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  NodeUtil.replaceChild(parent,  node);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  NodeUtil.replaceChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.replaceChild(parent,  node);	  	non-compiled	[CE]  cannot  find  symbol	132	None	add
1394	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getLastChild();  Node  firstSibling  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node    nextSibling    =    parent.getLastChild();    Node  firstSibling  =  parent.getLastChild();	  	compilable	  [FE]  AssertionFailedError  	1	3	add
1395	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getLastChild();  Node  firstSibling  =  parent.getLastChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getLastChild();  Node  firstSibling  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    parent.getLastChild();    Node  firstSibling  =  parent.getLastChild();	  	compilable	  [FE]  AssertionFailedError  	1	3	add
1396	[BUG]  [BUGGY]  Node  nextSibling  =  node.getFirstChild();  Node  nextSibling  =  node.getFirstChild());  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getFirstChild();  Node  nextSibling  =  node.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    node.getFirstChild();    Node  nextSibling  =  node.getFirstChild());	  	non-compiled	[CE]  ';'  expected	3	None	add
1397	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  nodeTraversal.traverse(compiler,  fromNode,  this);  [CE]  cannot  find  symbol  nodeTraversal  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  nodeTraversal.traverse(compiler,  fromNode,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,    fromNode,    this);    nodeTraversal.traverse(compiler,  fromNode,  this);	  	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	71	None	add
1398	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  Preconditions.checkArgument(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeTraversal.traverse(compiler,    fromNode,    this);    Preconditions.checkArgument(parent.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  StackOverflowError  	71	7	add
1399	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  Preconditions.checkArgument(parent.getType()  ==  Token.BLOCK);  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  Preconditions.checkArgument(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,    fromNode,    this);    Preconditions.checkArgument(parent.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  StackOverflowError  	71	7	add
1400	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  fromNode,  that);  [CE]  cannot  find  symbol  that  [FE]        StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  fromNode,  that);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,    fromNode,    this);    NodeTraversal.traverse(compiler,  fromNode,  that);	  	non-compiled	[CE]  cannot  find  symbol  that	71	None	add
1401	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Preconditions.checkState(node.getType()  ==  Token.NAME);	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    parent    =    node.getParent();    if(parent!=    null)    {    return    computeFollowNode(fromNode,    parent.getLastChild());    }    	compilable	  [FE]  RuntimeException  	75	7	replace
1402	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    parent    =    node.getParent();    if(parent!=    null)    {    return    computeFollowNode(fromNode,    parent.getLastChild());    }    	compilable	  [FE]  RuntimeException  	75	7	replace
1403	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Preconditions.checkState(node.getType()  ==  Token.BLOCK);	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    parent    =    node.getParent();    if(parent!=    null)    {    return    computeFollowNode(fromNode,    parent.getLastChild());    }    	compilable	  [FE]  AssertionFailedError  	75	5	replace
1404	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Preconditions.checkState(node.getType()  ==  Token.BLOCK);	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    parent    =    node.getParent();    if(parent!=    null)    {    return    computeFollowNode(fromNode,    parent.getLastChild());    }    	compilable	  [FE]  AssertionFailedError  	75	5	replace
1405	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getFirstChild());  }  else  {  return  computeFallThrough(node.getLastChild());  }  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getFirstChild());  }  else  {  return  computeFallThrough(node.getLastChild());  }	  return    computeFollowNode(fromNode,    parent.getFirstChild());    Node    parent    =    node.getParent();    if(parent!=    null)    {    return    computeFollowNode(fromNode,    parent.getLastChild());    }    	compilable	  [FE]  StackOverflowError  	53	7	replace
1406	[BUG]  [BUGGY]  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getFirstChild());  }  else  {  return  computeFallThrough(node.getLastChild());  }  [FE]  StackOverflowError  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getFirstChild());  }  else  {  return  computeFallThrough(node.getLastChild());  }  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getFirstChild());  }  else  {  return  computeFallThrough(node.getLastChild());  }	  return    computeFollowNode(fromNode,    parent.getFirstChild());    Node    parent    =    node.getParent();    if(parent!=    null)    {    return    computeFollowNode(fromNode,    parent.getLastChild());    }    	compilable	  [FE]  StackOverflowError  	53	7	replace
1407	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getFirstChild());  }  else  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getFirstChild());  }  else  {  return  computeFallThrough(parent.getLastChild());  }	  return    computeFollowNode(fromNode,    parent.getFirstChild());    Node    parent    =    node.getParent();    if(parent!=    null)    {    return    computeFollowNode(fromNode,    parent.getLastChild());    }    	compilable	  [FE]  StackOverflowError  	53	7	replace
1408	[BUG]  [BUGGY]  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getFirstChild());  }  else  {  return  computeFallThrough(parent.getLastChild());  }  [FE]  StackOverflowError  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getFirstChild());  }  else  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getFirstChild());  }  else  {  return  computeFallThrough(parent.getLastChild());  }	  return    computeFollowNode(fromNode,    parent.getFirstChild());    Node    parent    =    node.getParent();    if(parent!=    null)    {    return    computeFollowNode(fromNode,    parent.getLastChild());    }    	compilable	  [FE]  StackOverflowError  	53	7	replace
1409	[BUG]  [BUGGY]  Node  parent  =  getParentNode(parent,  node,  finallyMap);  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getParentNode(parent,  node,  finallyMap);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParentNode(parent,  node,  finallyMap);	  Node    parent    =    getParentNode(parent,    node);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	151	None	replace
1410	[BUG]  [BUGGY]  Node  parent  =  getParentNode(parent,  node,  cfg);  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getParentNode(parent,  node,  cfg);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParentNode(parent,  node,  cfg);	  Node    parent    =    getParentNode(parent,    node);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	151	None	replace
1411	[BUG]  [BUGGY]  TraverseTraversal.traverse(compiler,  fromNode,  this);  [CE]  cannot  find  symbol  TraverseTraversal  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  TraverseTraversal.traverse(compiler,  fromNode,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	TraverseTraversal.traverse(compiler,  fromNode,  this);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    fromNode,    this);    	non-compiled	[CE]  cannot  find  symbol  TraverseTraversal	180	None	replace
1412	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  body);  [CE]  cannot  find  symbol  body  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  body);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  body);	  return    computeFollowNode(fromNode,    node);    NodeTraversal.traverse(compiler,    node,    thenBlock);    	non-compiled	[CE]  cannot  find  symbol  body	205	None	replace
1413	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  this);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  this);	  NodeUtil.removeChild(parent,    FINALLY);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	91	None	replace
1414	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.replaceChild(node,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(parent,  node);  parent.replaceChild(node,  parent);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(node,    node);    	compilable	  [FE]  RuntimeException  	66	7	replace
1415	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.replaceChild(node,  parent);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.replaceChild(node,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node);  parent.replaceChild(node,  parent);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(node,    node);    	compilable	  [FE]  RuntimeException  	66	7	replace
1416	[BUG]  [BUGGY]  Node  parent  =  getParent(node,  firstSibling);  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getParent(node,  firstSibling);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParent(node,  firstSibling);	  Node    parent    =    getParent(node);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	248	None	replace
1417	[BUG]  [BUGGY]          Node    body    =    parent.getFirstChild();    Node  head  =  parent.getFirstChild();  Node  body  =  parent.getFirstChild();  Node  Head  =  parent.getFirstChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    body    =    parent.getFirstChild();    Node  head  =  parent.getFirstChild();  Node  body  =  parent.getFirstChild();  Node  Head  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        body        =        parent.getFirstChild();        Node    head    =    parent.getFirstChild();    Node  body  =  parent.getFirstChild();  Node  Head  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	17	None	add
1418	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  node,  this);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeTraversal.traverse(compiler,        node,        this);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,  node,  this);  Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  StackOverflowError  	183	7	add
1419	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  node,  this);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  node,  this);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    NodeTraversal.traverse(compiler,  node,  this);  Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  StackOverflowError  	183	7	add
1420	[BUG]  [BUGGY]          Node    body    =    node.getFirstChild();    Preconditions.checkState(body!=  null);  Node  body  =  node.getFirstChild();  preconditions.checkState(body!=  null);  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    body    =    node.getFirstChild();    Preconditions.checkState(body!=  null);  Node  body  =  node.getFirstChild();  preconditions.checkState(body!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        body        =        node.getFirstChild();        Preconditions.checkState(body!=    null);    Node  body  =  node.getFirstChild();  preconditions.checkState(body!=  null);	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	259	None	add
1421	[BUG]  [BUGGY]  TraverseTraversal.traverse(compiler,  parent,  this);  [CE]  cannot  find  symbol  TraverseTraversal  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  TraverseTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	TraverseTraversal.traverse(compiler,  parent,  this);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    parent,    this);    	non-compiled	[CE]  cannot  find  symbol  TraverseTraversal	145	None	replace
1422	[BUG]  [BUGGY]  TraverseFactory.traverse(compiler,  parent,  this);  [CE]  cannot  find  symbol  TraverseFactory  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  TraverseFactory.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	TraverseFactory.traverse(compiler,  parent,  this);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    parent,    this);    	non-compiled	[CE]  cannot  find  symbol  TraverseFactory	145	None	replace
1423	[BUG]  [BUGGY]  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  node.getParent();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	271	None	replace
1424	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  finallyMap,  body);  [CE]  cannot  find  symbol  body  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  finallyMap,  body);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  finallyMap,  body);	  NodeTraversal.traverse(compiler,    node,    this,    finallyMap);    	non-compiled	[CE]  cannot  find  symbol  body	237	None	replace
1425	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  finallyMap,  processFallThrough(parent));  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  finallyMap,  processFallThrough(parent));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  finallyMap,  processFallThrough(parent));	  NodeTraversal.traverse(compiler,    node,    this,    finallyMap);    	non-compiled	[CE]  cannot  find  symbol	237	None	replace
1426	[BUG]  [BUGGY]  return  computeFallThrough(parent.getFirstChild());  Node  parent  =  node.getParent();  return  computeFallThrough(parent.getFirstChild());  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(parent.getFirstChild());  Node  parent  =  node.getParent();  return  computeFallThrough(parent.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(parent.getFirstChild());    Node  parent  =  node.getParent();  return  computeFallThrough(parent.getFirstChild());	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	44	None	add
1427	[BUG]  [BUGGY]  return  computeFallThrough(parent.getFirstChild());  Node  parent  =  node.getFirstChild();  return  computeFallThrough(parent.getFirstChild());  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(parent.getFirstChild());  Node  parent  =  node.getFirstChild();  return  computeFallThrough(parent.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(parent.getFirstChild());    Node  parent  =  node.getFirstChild();  return  computeFallThrough(parent.getFirstChild());	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	44	None	add
1428	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  body);  [CE]  cannot  find  symbol  body  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  body);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  body);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node);    	non-compiled	[CE]  cannot  find  symbol  body	197	None	replace
1429	[BUG]  [BUGGY]  Node  body  =  parent.getfirstChild();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getfirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  parent.getfirstChild();	  Node    body    =    node.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
1430	[BUG]  [BUGGY]  Preconditions.checkState(nextSibling  ==  null);  Node  nextSibling  =  parent.getNext();  [CE]  cannot  find  symbol  nextSibling  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Preconditions.checkState(nextSibling  ==  null);  Node  nextSibling  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Preconditions.checkState(nextSibling  ==  null);  Node  nextSibling  =  parent.getNext();	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=    null);    Node    nextSibling    =    parent.getNext();    	non-compiled	[CE]  cannot  find  symbol  nextSibling	166	None	replace
1431	[BUG]  [BUGGY]  Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getNext();  [CE]  cannot  find  symbol  nextSibling  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getNext();	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=    null);    Node    nextSibling    =    parent.getNext();    	non-compiled	[CE]  cannot  find  symbol  nextSibling	166	None	replace
1432	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  nextSibling  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  nextSibling  =  parent.getNext();	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=    null);    Node    nextSibling    =    parent.getNext();    	compilable	  [FE]  RuntimeException  	166	7	replace
1433	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  nextSibling  =  parent.getNext();  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  nextSibling  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  nextSibling  =  parent.getNext();	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=    null);    Node    nextSibling    =    parent.getNext();    	compilable	  [FE]  RuntimeException  	166	7	replace
1434	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node.getLastChild());  Node  body  =  node.getFirstChild();  return  computeFallThrough(body.getLastChild());  [CE]  unreachable  statement  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  node.getLastChild());  Node  body  =  node.getFirstChild();  return  computeFallThrough(body.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    node.getLastChild());    Node  body  =  node.getFirstChild();  return  computeFallThrough(body.getLastChild());	  	non-compiled	[CE]  unreachable  statement	83	None	add
1435	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node.getLastChild());  Node  body  =  node.getFirstChild();  return  computeFollowNode(fromNode,  body);  [CE]  unreachable  statement  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  node.getLastChild());  Node  body  =  node.getFirstChild();  return  computeFollowNode(fromNode,  body);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    node.getLastChild());    Node  body  =  node.getFirstChild();  return  computeFollowNode(fromNode,  body);	  	non-compiled	[CE]  unreachable  statement	83	None	add
1436	[BUG]  [BUGGY]  return  computeFallThrough(node.getFirstChild(),  fromNode);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(node.getFirstChild(),  fromNode);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(node.getFirstChild(),  fromNode);	  return    computeFallThrough(fromNode.getFirstChild(),    node);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	280	None	replace
1437	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getFirstChild(),  node,  body);  [CE]  cannot  find  symbol  body  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getFirstChild(),  node,  body);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode.getFirstChild(),  node,  body);	  return    computeFallThrough(fromNode.getFirstChild(),    node);    	non-compiled	[CE]  cannot  find  symbol  body	280	None	replace
1438	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  parent.getFirstChild();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFallThrough(parent.getLastChild());    }    	compilable	  [FE]  AssertionFailedError  	223	5	replace
1439	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getFirstChild();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFallThrough(parent.getLastChild());    }    	compilable	  [FE]  AssertionFailedError  	223	5	replace
1440	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(node.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	return  computeFollowNode(node.getFirstChild());	  return    computeFallThrough(parent.getFirstChild());    	compilable	  [FE]  StackOverflowError  	45	7	replace
1441	[BUG]  [BUGGY]  return  computeFollowNode(node.getFirstChild());  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(node.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(node.getFirstChild());	  return    computeFallThrough(parent.getFirstChild());    	compilable	  [FE]  StackOverflowError  	45	7	replace
1442	[BUG]  [BUGGY]  NodeUtil.insertChild(parent,  node);  NodeUtil.addChildToFront(parent,  fromNode);  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.insertChild(parent,  node);  NodeUtil.addChildToFront(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.insertChild(parent,  node);  NodeUtil.addChildToFront(parent,  fromNode);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.addChildToFront(parent,    fromNode);    	non-compiled	[CE]  cannot  find  symbol	189	None	replace
1443	[BUG]  [BUGGY]  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getFirstChild());  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  'else'  without  'if'  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getFirstChild());  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getFirstChild());  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFallThrough(parent.getLastChild());  }	  return    computeFollowNode(fromNode,    parent.getFirstChild());    Node    parent    =    node.getParent();    if(parent!=    null)    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  'else'  without  'if'	54	None	replace
1444	[BUG]  [BUGGY]  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getFirstChild());  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFallThrough(parent.getLastChild()  [CE]  ')'  expected  [FE]                  StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getFirstChild());  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFallThrough(parent.getLastChild()  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getFirstChild());  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFallThrough(parent.getLastChild()	  return    computeFollowNode(fromNode,    parent.getFirstChild());    Node    parent    =    node.getParent();    if(parent!=    null)    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  ')'  expected	54	None	replace
1445	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	272	7	add
1446	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	272	7	add
1447	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getLastChild());  return  computeFallThrough(fromNode.getFirstChild());  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getLastChild());  return  computeFallThrough(fromNode.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(fromNode.getLastChild());    return  computeFallThrough(fromNode.getFirstChild());	  	non-compiled	[CE]  unreachable  statement	19	None	add
1448	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getLastChild());  Node  body  =  parent.getFirstChild();  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getLastChild());  Node  body  =  parent.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(fromNode.getLastChild());    Node  body  =  parent.getFirstChild();	  	non-compiled	[CE]  unreachable  statement	19	None	add
1449	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  parent,  this);  [CE]  cannot  find  symbol  NeighborTraversal  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NeighborTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NeighborTraversal.traverse(compiler,  parent,  this);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    }    else    if(parent.getType()    ==    Token.FUNCTION)    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  cannot  find  symbol  NeighborTraversal	147	None	replace
1450	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getParent();  Preconditions.checkState(body!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node    body    =    parent.getParent();    Preconditions.checkState(body!=  null);	  	compilable	  [FE]  AssertionFailedError  	251	3	add
1451	[BUG]  [BUGGY]  Node  body  =  parent.getParent();  Preconditions.checkState(body!=  null);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getParent();  Preconditions.checkState(body!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    parent.getParent();    Preconditions.checkState(body!=  null);	  	compilable	  [FE]  AssertionFailedError  	251	3	add
1452	[BUG]  [BUGGY]  return  computeFallThrough(node.getFirstChild(),  parent.getLastChild());  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(node.getFirstChild(),  parent.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(node.getFirstChild(),  parent.getLastChild());	  return    computeFollowNode(fromNode,    parent.getLastChild());    return    computeFollowNode(fromNode,    parent.getLastChild());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	159	None	replace
1453	[BUG]  [BUGGY]  return  computeFallThrough(parent.getFirstChild(),  fromNode,  parent);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(parent.getFirstChild(),  fromNode,  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(parent.getFirstChild(),  fromNode,  parent);	  return    computeFallThrough(parent.getFirstChild(),    node);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	212	None	replace
1454	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getNext();  Preconditions.checkState(body!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node    body    =    parent.getNext();    Preconditions.checkState(body!=  null);	  	compilable	  [FE]  RuntimeException  	213	7	add
1455	[BUG]  [BUGGY]  Node  body  =  parent.getNext();  Preconditions.checkState(body!=  null);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  body  =  parent.getNext();  Preconditions.checkState(body!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    body    =    parent.getNext();    Preconditions.checkState(body!=  null);	  	compilable	  [FE]  RuntimeException  	213	7	add
1456	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  finallyMap,  finallySibling);  [CE]  cannot  find  symbol  finallySibling  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  finallyMap,  finallySibling);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  node,  finallyMap,  finallySibling);	  return    computeFollowNode(fromNode,    parent,    node,    finallyMap);    	non-compiled	[CE]  cannot  find  symbol  finallySibling	209	None	replace
1457	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  finallyMap,  body);  [CE]  cannot  find  symbol  body  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  finallyMap,  body);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  node,  finallyMap,  body);	  return    computeFollowNode(fromNode,    parent,    node,    finallyMap);    	non-compiled	[CE]  cannot  find  symbol  body	209	None	replace
1458	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  finallyMap,  exceptionHandler);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>,Deque<Node>)  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  finallyMap,  exceptionHandler);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  node,  finallyMap,  exceptionHandler);	  return    computeFollowNode(fromNode,    parent,    node,    finallyMap);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>,Deque<Node>)	209	None	replace
1459	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  null);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  null);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  null);	  return    computeFallThrough(node,    fromNode);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	81	None	replace
1460	[BUG]  [BUGGY]  Node  nextSibling  =  firstSibling.getFirstChild();  [CE]  cannot  find  symbol  firstSibling  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  firstSibling.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  firstSibling.getFirstChild();	          Node    nextSibling    =    parent.getFirstChild();    Node    firstSibling    =    parent.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  firstSibling	269	None	replace
1461	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  ==  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling  ==  null);	  	compilable	  [FE]  RuntimeException  	46	7	add
1462	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  ==  null);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  ==  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling  ==  null);	  	compilable	  [FE]  RuntimeException  	46	7	add
1463	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node,  toBlock);  [CE]  cannot  find  symbol  toBlock  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node,  toBlock);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node,  toBlock);	  NodeUtil.removeChild(parent,    node,    FINALLY);    	non-compiled	[CE]  cannot  find  symbol  toBlock	92	None	replace
1464	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node,  1);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node,  1);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node,  1);	  NodeUtil.removeChild(parent,    node,    FINALLY);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	92	None	replace
1465	[BUG]  [BUGGY]  return  computeFallThrough(node,  parent.getLastChild());  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(node,  parent.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(node,  parent.getLastChild());	  return    computeFallThrough(fromNode,    parent.getLastChild());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	82	None	replace
1466	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  nodeTraversal.traverse(compiler,  parent,  this);  [CE]  cannot  find  symbol  nodeTraversal  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  nodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,    parent,    this);    nodeTraversal.traverse(compiler,  parent,  this);	  	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	67	None	add
1467	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeTraversal.traverse(compiler,    parent,    this);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  StackOverflowError  	67	7	add
1468	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,    parent,    this);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  StackOverflowError  	67	7	add
1469	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkArgument(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeTraversal.traverse(compiler,    parent,    this);    Preconditions.checkArgument(parent.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  StackOverflowError  	67	7	add
1470	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkArgument(parent.getType()  ==  Token.BLOCK);  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkArgument(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,    parent,    this);    Preconditions.checkArgument(parent.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  StackOverflowError  	67	7	add
1471	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeTraversal.traverse(compiler,    parent,    this);    Preconditions.checkArgument(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  StackOverflowError  	67	7	add
1472	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,    parent,    this);    Preconditions.checkArgument(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  StackOverflowError  	67	7	add
1473	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  priorities,  astPositionCounter);  [CE]  cannot  find  symbol  priorities  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  priorities,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  nodePriorities,  priorities,  astPositionCounter);	  return    computeFollowNode(fromNode,    parent,    nodePriorities,    astPositionCounter);    	non-compiled	[CE]  cannot  find  symbol  priorities	30	None	replace
1474	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getFirstChild().getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	return  computeFallThrough(fromNode.getFirstChild().getLastChild());	  return    computeFallThrough(fromNode.getFirstChild().getString());    	compilable	  [FE]  RuntimeException  	23	6	replace
1475	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getFirstChild().getLastChild());  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getFirstChild().getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode.getFirstChild().getLastChild());	  return    computeFallThrough(fromNode.getFirstChild().getString());    	compilable	  [FE]  RuntimeException  	23	6	replace
1476	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.replaceChild(node,  body);  [CE]  cannot  find  symbol  body  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.replaceChild(node,  body);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.replaceChild(node,  body);	  	non-compiled	[CE]  cannot  find  symbol  body	135	None	add
1477	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  NodeUtil.addChildToFront(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  NodeUtil.addChildToFront(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    parent.removeChild(node);    NodeUtil.addChildToFront(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(node);	  	non-compiled	[CE]  cannot  find  symbol	135	None	add
1478	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  node,  thenBlock);  [CE]  cannot  find  symbol  thenBlock  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode,  node,  thenBlock);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  node,  thenBlock);	  return    computeFallThrough(fromNode,    node);    	non-compiled	[CE]  cannot  find  symbol  thenBlock	80	None	replace
1479	[BUG]  [BUGGY]  return  computeFallThrough(node.getFirstChild(),  parent.getFirstChild());  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(node.getFirstChild(),  parent.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(node.getFirstChild(),  parent.getFirstChild());	  return    computeFollowNode(fromNode,    parent.getFirstChild());    return    computeFollowNode(fromNode,    parent.getLastChild());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	188	None	replace
1480	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Preconditions.checkState(nextSibling  ==  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  parent.getFirstChild();  Preconditions.checkState(nextSibling  ==  null);	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=    null);    	compilable	  [FE]  RuntimeException  	168	7	replace
1481	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Preconditions.checkState(nextSibling  ==  null);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Preconditions.checkState(nextSibling  ==  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getFirstChild();  Preconditions.checkState(nextSibling  ==  null);	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=    null);    	compilable	  [FE]  RuntimeException  	168	7	replace
1482	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  nodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  [CE]  cannot  find  symbol  nodeTraversal  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  nodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    node,    this);    nodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);	  	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	141	None	add
1483	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getLastChild());  Node  body  =  parent.getFirstChild();  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode.getLastChild());  Node  body  =  parent.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode.getLastChild());    Node  body  =  parent.getFirstChild();	  	non-compiled	[CE]  unreachable  statement	34	None	add
1484	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);	          NodeUtil.removeChild(parent,    fromNode);    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(fromNode);    	compilable	  [FE]  RuntimeException  	191	7	replace
1485	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);	          NodeUtil.removeChild(parent,    fromNode);    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(fromNode);    	compilable	  [FE]  RuntimeException  	191	7	replace
1486	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  body);  return  computeFallThrough(fromNode,  parent);  [CE]  cannot  find  symbol  body  [FE]                  StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  body);  return  computeFallThrough(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  this,  body);  return  computeFallThrough(fromNode,  parent);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    return    computeFallThrough(fromNode,    parent);    	non-compiled	[CE]  cannot  find  symbol  body	148	None	replace
1487	[BUG]  [BUGGY]  Node  parent  =  getParentNode(fromNode,  parent.getFirstChild());  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  getParentNode(fromNode,  parent.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParentNode(fromNode,  parent.getFirstChild());	  Node    parent    =    getParentNode(parent.getFirstChild());    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	152	None	replace
1488	[BUG]  [BUGGY]  return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getFirstChild());  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(parent.getLastChild());    return  computeFallThrough(parent.getFirstChild());	  	non-compiled	[CE]  unreachable  statement	38	None	add
1489	[BUG]  [BUGGY]  return  computeFallThrough(parent.getLastChild());  return  computeFollowNode(parent.getLastChild());  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(parent.getLastChild());  return  computeFollowNode(parent.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(parent.getLastChild());    return  computeFollowNode(parent.getLastChild());	  	non-compiled	[CE]  unreachable  statement	38	None	add
1490	[BUG]  [BUGGY]  return  computeFallThrough(parent.getLastChild());  return  computeFollowNode(parent.getFirstChild());  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(parent.getLastChild());  return  computeFollowNode(parent.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(parent.getLastChild());    return  computeFollowNode(parent.getFirstChild());	  	non-compiled	[CE]  unreachable  statement	38	None	add
1491	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(parent,  node,  body);  [CE]  cannot  find  symbol  body  [FE]        RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(parent,  node,  body);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.redeclareVarsInsideBranch(parent,  node,  body);	  NodeUtil.redeclareVarsInsideBranch(parent,    node);    	non-compiled	[CE]  cannot  find  symbol  body	238	None	replace
1492	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(this.node,  parent);  [CE]  cannot  find  symbol  node  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(this.node,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.redeclareVarsInsideBranch(this.node,  parent);	  NodeUtil.redeclareVarsInsideBranch(parent,    node);    	non-compiled	[CE]  cannot  find  symbol  node	238	None	replace
1493	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(parent,  node,  sourcePosition);  [CE]  cannot  find  symbol  sourcePosition  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(parent,  node,  sourcePosition);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.redeclareVarsInsideBranch(parent,  node,  sourcePosition);	  NodeUtil.redeclareVarsInsideBranch(parent,    node);    	non-compiled	[CE]  cannot  find  symbol  sourcePosition	238	None	replace
1494	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  n);  [CE]  cannot  find  symbol  n  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  n);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  n);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(fromNode,    node);    	non-compiled	[CE]  cannot  find  symbol  n	63	None	replace
1495	[BUG]  [BUGGY]  ParentUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);  [CE]  cannot  find  symbol  ParentUtil  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  ParentUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	ParentUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);	          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,    fromNode);    parent.replaceChild(fromNode,    node);    	non-compiled	[CE]  cannot  find  symbol  ParentUtil	63	None	replace
1496	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPositionCounter,  body);  [CE]  cannot  find  symbol  body  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPositionCounter,  body);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  astPositionCounter,  body);	  NodeTraversal.traverse(compiler,    node,    this,    astPositionCounter);    	non-compiled	[CE]  cannot  find  symbol  body	70	None	replace
1497	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  astPositionCounter,  int  priorityCounter);  [CE]  '.class'  expected  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  astPositionCounter,  int  priorityCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent.getFirstChild(),  astPositionCounter,  int  priorityCounter);	  return    computeFollowNode(fromNode,    parent.getFirstChild(),    astPositionCounter);    	non-compiled	[CE]  '.class'  expected	88	None	replace
1498	[BUG]  [BUGGY]  Node  parent  =  nextSibling.getFirstChild();  return  computeFallThrough(parent.getLastChild());  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  nextSibling.getFirstChild();  return  computeFallThrough(parent.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  nextSibling.getFirstChild();  return  computeFallThrough(parent.getLastChild());	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    nextSibling    =    parent.getFirstChild();    return    computeFallThrough(nextSibling.getLastChild());    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	263	None	replace
1499	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  finallyMap,  priorities);  [CE]  cannot  find  symbol  priorities  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  finallyMap,  priorities);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  nodePriorities,  finallyMap,  priorities);	  return    computeFollowNode(fromNode,    parent,    nodePriorities,    finallyMap);    	non-compiled	[CE]  cannot  find  symbol  priorities	174	None	replace
1500	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  finallyMap,  priorityCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Map<DiGraphNode<Node,Branch>,Integer>,Multimap<Node,Node>,int)  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  finallyMap,  priorityCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  nodePriorities,  finallyMap,  priorityCounter);	  return    computeFollowNode(fromNode,    parent,    nodePriorities,    finallyMap);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Map<DiGraphNode<Node,Branch>,Integer>,Multimap<Node,Node>,int)	174	None	replace
1501	[BUG]  [BUGGY]  NodeUtil.addChildToFront(node,  parent);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  NodeUtil.addChildToFront(node,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.addChildToFront(node,  parent);	          NodeUtil.removeChild(parent,    node);    NodeUtil.addChildToFront(parent,    node);    	non-compiled	[CE]  cannot  find  symbol	196	None	replace
1502	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  node);  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(node,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(node,    node);    NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(node,  node);	  	compilable	  [FE]  RuntimeException  	198	7	add
1503	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  node);  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(node,  node);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  node);  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(node,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(node,    node);    NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(node,  node);	  	compilable	  [FE]  RuntimeException  	198	7	add
1504	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  node);  NodeUtil.addChildToFront(parent,  node);  NodeUtil.removeChild(node,  node);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  node);  NodeUtil.addChildToFront(parent,  node);  NodeUtil.removeChild(node,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(node,    node);    NodeUtil.addChildToFront(parent,  node);  NodeUtil.removeChild(node,  node);	  	non-compiled	[CE]  cannot  find  symbol	198	None	add
1505	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling  ==  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node    nextSibling    =    parent.getParent();    Preconditions.checkState(nextSibling  ==  null);	  	compilable	  [FE]  RuntimeException  	48	7	add
1506	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling  ==  null);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling  ==  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node    nextSibling    =    parent.getParent();    Preconditions.checkState(nextSibling  ==  null);	  	compilable	  [FE]  RuntimeException  	48	7	add
1507	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getLastChild());  parent  =  node.getParent();  [CE]  unreachable  statement  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFallThrough(fromNode.getLastChild());  parent  =  node.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode.getLastChild());  parent  =  node.getParent();	  return    computeFallThrough(node.getLastChild());    Node    parent    =    node.getParent();    	non-compiled	[CE]  unreachable  statement	115	None	replace
1508	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node.getFirstChild());  Node  body  =  node.getFirstChild();  return  computeFollowNode(fromNode,  body);  [CE]  unreachable  statement  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  node.getFirstChild());  Node  body  =  node.getFirstChild();  return  computeFollowNode(fromNode,  body);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    node.getFirstChild());    Node  body  =  node.getFirstChild();  return  computeFollowNode(fromNode,  body);	  	non-compiled	[CE]  unreachable  statement	206	None	add
1509	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node.getFirstChild());  Node  body  =  node.getFirstChild();  return  computeFallThrough(body.getLastChild());  [CE]  unreachable  statement  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  return  computeFollowNode(fromNode,  node.getFirstChild());  Node  body  =  node.getFirstChild();  return  computeFallThrough(body.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    node.getFirstChild());    Node  body  =  node.getFirstChild();  return  computeFallThrough(body.getLastChild());	  	non-compiled	[CE]  unreachable  statement	206	None	add
1510	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFollowNode(fromNode,    parent);    }    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	228	None	add
1511	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFollowNode(fromNode,    parent);    }    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	228	None	add
1512	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFollowNode(fromNode,    parent);    }    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	228	None	add
1513	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    if(nextSibling!=    null)    {    return    computeFollowNode(fromNode,    parent);    }    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	228	None	add
1514	[BUG]  [BUGGY]  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    parent    =    node.getParent();    if(parent!=    null)    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	78	None	replace
1515	[BUG]  [BUGGY]  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFowThrough(parent.getLastChild());  }  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFowThrough(parent.getLastChild());  }  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFowThrough(parent.getLastChild());  }	  return    computeFollowNode(fromNode,    parent.getLastChild());    Node    parent    =    node.getParent();    if(parent!=    null)    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	78	None	replace
1516	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(fromNode,  parent);  NodeUtil.clearChild(parent,  fromNode);  NodeUtil.removeChild(fromNode,  parent);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(fromNode,  parent);  NodeUtil.clearChild(parent,  fromNode);  NodeUtil.removeChild(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(fromNode,    parent);    NodeUtil.clearChild(parent,  fromNode);  NodeUtil.removeChild(fromNode,  parent);	  	non-compiled	[CE]  cannot  find  symbol	58	None	add
1517	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(fromNode,  parent);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.replaceChild(fromNode,  parent);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(fromNode,  parent);  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.replaceChild(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                NodeUtil.removeChild(parent,        fromNode);        NodeUtil.removeChild(fromNode,    parent);    NodeUtil.removeChild(parent,  fromNode);  NodeUtil.replaceChild(fromNode,  parent);	  	non-compiled	[CE]  cannot  find  symbol	58	None	add
1518	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  return  computeFollowNode(fromNode,  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  return  computeFollowNode(fromNode,  parent);	  return    computeFollowNode(fromNode,    node);    Node    fromNode    =    parent.getFirstChild();    	compilable	  [FE]  RuntimeException  	110	7	replace
1519	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  return  computeFollowNode(fromNode,  parent);  [FE]  RuntimeException  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  return  computeFollowNode(fromNode,  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  return  computeFollowNode(fromNode,  parent);	  return    computeFollowNode(fromNode,    node);    Node    fromNode    =    parent.getFirstChild();    	compilable	  [FE]  RuntimeException  	110	7	replace
1520	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  return  computeFollowNode(fromNode,  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Preconditions.checkState(parent.getType()  ==  Token.NAME);  return  computeFollowNode(fromNode,  parent);	  return    computeFollowNode(fromNode,    node);    Node    fromNode    =    parent.getFirstChild();    	compilable	  [FE]  RuntimeException  	110	7	replace
1521	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  return  computeFollowNode(fromNode,  parent);  [FE]  RuntimeException  [FE]                  StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  return  computeFollowNode(fromNode,  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  return  computeFollowNode(fromNode,  parent);	  return    computeFollowNode(fromNode,    node);    Node    fromNode    =    parent.getFirstChild();    	compilable	  [FE]  RuntimeException  	110	7	replace
1522	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getParent()!=  null);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getParent()!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling!=    null);    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getParent()!=  null);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	167	None	add
1523	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling!=    null);    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	167	None	add
1524	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling!=    null);    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	167	None	add
