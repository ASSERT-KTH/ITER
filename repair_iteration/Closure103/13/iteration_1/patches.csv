bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(shouldTraverseFunctions  &&  n  ==  cfg.getEntry().getValue())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  if(shouldTraverseFunctions  &&  n  ==  cfg.getEntry().getValue())  {  return  false;  }  [BUGGY]    }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	if(shouldTraverseFunctions  &&  n  ==  cfg.getEntry().getValue())  {  return  false;  }	  if(shouldTraverseFunctions    ||    n    ==    cfg.getEntry().getValue())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
2	[BUG]  [BUGGY]  if(shouldTraverseFunctions  ||  n  ==  parent.getEntry().getValue())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  if(shouldTraverseFunctions  ||  n  ==  parent.getEntry().getValue())  {  return  false;  }  [BUGGY]    }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	if(shouldTraverseFunctions  ||  n  ==  parent.getEntry().getValue())  {  return  false;  }	  if(shouldTraverseFunctions    ||    n    ==    cfg.getEntry().getValue())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
3	[BUG]  [BUGGY]  if(n  ==  shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  if(n  ==  shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  return  false;  }  [BUGGY]    }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	if(n  ==  shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  return  false;  }	  if(shouldTraverseFunctions    ||    n    ==    cfg.getEntry().getValue())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
4	[BUG]  [BUGGY]  cfg.getEntry().getValue().addChildToBack(n);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  cfg.getEntry().getValue().addChildToBack(n);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	cfg.getEntry().getValue().addChildToBack(n);	      cfg.getEntry().getValue().addChildToBack(exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
5	[BUG]  [BUGGY]  cfg.getEntry().getValue().addChildToBack(n,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  cfg.getEntry().getValue().addChildToBack(n,  exceptionHandler);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	cfg.getEntry().getValue().addChildToBack(n,  exceptionHandler);	      cfg.getEntry().getValue().addChildToBack(exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
6	[BUG]  [BUGGY]  cfg.getEntry().getValue().removeChild(exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  cfg.getEntry().getValue().removeChild(exceptionHandler);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	cfg.getEntry().getValue().removeChild(exceptionHandler);	      cfg.getEntry().getValue().addChildToBack(exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
7	[BUG]  [BUGGY]  cfg.getEntry().getValue().addChildToBack(parent);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  cfg.getEntry().getValue().addChildToBack(parent);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	cfg.getEntry().getValue().addChildToBack(parent);	      cfg.getEntry().getValue().addChildToBack(exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
8	[BUG]  [BUGGY]  if(shouldTraverseFunctions  &&  n  ==  cfg.getEntry().getValue())  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  if(shouldTraverseFunctions  &&  n  ==  cfg.getEntry().getValue())  {  return  true;  }  [BUGGY]    }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	if(shouldTraverseFunctions  &&  n  ==  cfg.getEntry().getValue())  {  return  true;  }	  if(shouldTraverseFunctions    ||    n    ==    cfg.getEntry().getValue())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
9	[BUG]  [BUGGY]  if(shouldTraverseFunctions  ||  n  ==  parent.getEntry().getValue())  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  if(shouldTraverseFunctions  ||  n  ==  parent.getEntry().getValue())  {  return  true;  }  [BUGGY]    }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	if(shouldTraverseFunctions  ||  n  ==  parent.getEntry().getValue())  {  return  true;  }	  if(shouldTraverseFunctions    ||    n    ==    cfg.getEntry().getValue())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
10	[BUG]  [BUGGY]  if(n  ==  shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  if(n  ==  shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  return  true;  }  [BUGGY]    }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	if(n  ==  shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  return  true;  }	  if(shouldTraverseFunctions    ||    n    ==    cfg.getEntry().getValue())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
11	[BUG]  [BUGGY]  cfg.getEntry().getValue().add(n,  parent);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  cfg.getEntry().getValue().add(n,  parent);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	cfg.getEntry().getValue().add(n,  parent);	      cfg.getEntry().getValue().add(n);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
12	[BUG]  [BUGGY]  cfg.getEntry().getValue().add(n  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  cfg.getEntry().getValue().add(n  +  1);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	cfg.getEntry().getValue().add(n  +  1);	      cfg.getEntry().getValue().add(n);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
13	[BUG]  [BUGGY]  cfg.getEntry().getValue().remove(n);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  cfg.getEntry().getValue().remove(n);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	cfg.getEntry().getValue().remove(n);	      cfg.getEntry().getValue().add(n);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
14	[BUG]  [BUGGY]  if(shouldTraverseFunctions  &&  n  ==  cfg.getEntry().getValue())  {  return  true;  }  else  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  if(shouldTraverseFunctions  &&  n  ==  cfg.getEntry().getValue())  {  return  true;  }  else  {  return  false;  }  [BUGGY]    }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	if(shouldTraverseFunctions  &&  n  ==  cfg.getEntry().getValue())  {  return  true;  }  else  {  return  false;  }	  if(shouldTraverseFunctions    ||    n    ==    cfg.getEntry().getValue())    {    return    true;    }    else    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
15	[BUG]  [BUGGY]  if(n  ==  shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  return  true;  }  else  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  if(n  ==  shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  return  true;  }  else  {  return  false;  }  [BUGGY]    }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	if(n  ==  shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  return  true;  }  else  {  return  false;  }	  if(shouldTraverseFunctions    ||    n    ==    cfg.getEntry().getValue())    {    return    true;    }    else    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
16	[BUG]  [BUGGY]  if(shouldTraverseFunctions  ||  n  ==  parent.getEntry().getValue())  {  return  true;  }  else  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  if(shouldTraverseFunctions  ||  n  ==  parent.getEntry().getValue())  {  return  true;  }  else  {  return  false;  }  [BUGGY]    }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	if(shouldTraverseFunctions  ||  n  ==  parent.getEntry().getValue())  {  return  true;  }  else  {  return  false;  }	  if(shouldTraverseFunctions    ||    n    ==    cfg.getEntry().getValue())    {    return    true;    }    else    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
17	[BUG]  [BUGGY]  exceptionHandler.push(n);  return  true;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  exceptionHandler.push(n);  return  true;  [BUGGY]    }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	exceptionHandler.push(n);  return  true;	  if(shouldTraverseFunctions    ||    n    ==    cfg.getEntry().getValue())    {    exceptionHandler.push(n);    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
18	[BUG]  [BUGGY]  if(shouldTraverseFunctions  &&  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  if(shouldTraverseFunctions  &&  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  [BUGGY]    }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	if(shouldTraverseFunctions  &&  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }	  if(shouldTraverseFunctions    ||    n    ==    cfg.getEntry().getValue())    {    exceptionHandler.push(n);    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
19	[BUG]  [BUGGY]  if(shouldTraverseFunctions  ||  n  ==  parent.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  if(shouldTraverseFunctions  ||  n  ==  parent.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  [BUGGY]    }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	if(shouldTraverseFunctions  ||  n  ==  parent.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }	  if(shouldTraverseFunctions    ||    n    ==    cfg.getEntry().getValue())    {    exceptionHandler.push(n);    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
20	[BUG]  [BUGGY]  if(n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  if(n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  [BUGGY]    }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	if(n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }	  if(shouldTraverseFunctions    ||    n    ==    cfg.getEntry().getValue())    {    exceptionHandler.push(n);    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
21	[BUG]  [BUGGY]  if(shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  return  false;  }  else  {  exceptionHandler.push(n);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  if(shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  return  false;  }  else  {  exceptionHandler.push(n);  }  [BUGGY]    }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	if(shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  return  false;  }  else  {  exceptionHandler.push(n);  }	  return    false;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
22	[BUG]  [BUGGY]  if(shouldTraverseFunctions  ||  n  ==  parent.getLastChild())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  if(shouldTraverseFunctions  ||  n  ==  parent.getLastChild())  {  return  false;  }  [BUGGY]    }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	if(shouldTraverseFunctions  ||  n  ==  parent.getLastChild())  {  return  false;  }	  return    false;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
23	[BUG]  [BUGGY]  cfg.getEntry().setValue(n))  {  exceptionHandler.push(n);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  cfg.getEntry().setValue(n))  {  exceptionHandler.push(n);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	cfg.getEntry().setValue(n))  {  exceptionHandler.push(n);	      cfg.getEntry().getValue())    {    exceptionHandler.push(n);    	non-compiled	[CE]  ';'  expected	15	None	replace
24	[BUG]  [BUGGY]  cfg.getEntry().setValue(n.getType()))  {  exceptionHandler.push(n);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  cfg.getEntry().setValue(n.getType()))  {  exceptionHandler.push(n);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	cfg.getEntry().setValue(n.getType()))  {  exceptionHandler.push(n);	      cfg.getEntry().getValue())    {    exceptionHandler.push(n);    	non-compiled	[CE]  ';'  expected	15	None	replace
25	[BUG]  [BUGGY]  n.getEntry().getValue())  {  exceptionHandler.push(n);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  n.getEntry().getValue())  {  exceptionHandler.push(n);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	n.getEntry().getValue())  {  exceptionHandler.push(n);	      cfg.getEntry().getValue())    {    exceptionHandler.push(n);    	non-compiled	[CE]  ';'  expected	15	None	replace
26	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  priorityComparator);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  priorityComparator);	      NodeTraversal.traverse(compiler,    n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
27	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityCounter);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityCounter);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	NodeTraversal.traverse(compiler,  n,  priorityCounter);	      NodeTraversal.traverse(compiler,    n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
28	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	NodeTraversal.traverse(compiler,  n,  this.astPositionCounter);	      NodeTraversal.traverse(compiler,    n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
29	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	NodeTraversal.traverse(compiler,  n,  priorityComparator);	      NodeTraversal.traverse(compiler,    n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
30	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities);	      NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
31	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  value);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  value);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  value);	      NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
32	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  n);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  NodeTraversal.traverse(compiler,  parent,  n);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	NodeTraversal.traverse(compiler,  parent,  n);	      NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
33	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  root);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  root);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  root);	      NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
34	[BUG]  [BUGGY]  cfg.getEntry().setValue(n.getType()))  {  exceptionHandler.push(n);  return  true;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  cfg.getEntry().setValue(n.getType()))  {  exceptionHandler.push(n);  return  true;  }  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	cfg.getEntry().setValue(n.getType()))  {  exceptionHandler.push(n);  return  true;  }	      cfg.getEntry().getValue())    {    exceptionHandler.push(n);    return    true;    }    	non-compiled	[CE]  	18	None	replace
35	[BUG]  [BUGGY]  n.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  n.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	n.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }	      cfg.getEntry().getValue())    {    exceptionHandler.push(n);    return    true;    }    	non-compiled	[CE]  	18	None	replace
36	[BUG]  [BUGGY]  cfg.getEntry().setValue(n))  {  exceptionHandler.push(n);  return  true;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  cfg.getEntry().setValue(n))  {  exceptionHandler.push(n);  return  true;  }  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	cfg.getEntry().setValue(n))  {  exceptionHandler.push(n);  return  true;  }	      cfg.getEntry().getValue())    {    exceptionHandler.push(n);    return    true;    }    	non-compiled	[CE]  	18	None	replace
37	[BUG]  [BUGGY]  cfg.getEntry().setValue(n.getString()))  {  exceptionHandler.push(n);  return  true;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  cfg.getEntry().setValue(n.getString()))  {  exceptionHandler.push(n);  return  true;  }  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	cfg.getEntry().setValue(n.getString()))  {  exceptionHandler.push(n);  return  true;  }	      cfg.getEntry().getValue())    {    exceptionHandler.push(n);    return    true;    }    	non-compiled	[CE]  	18	None	replace
38	[BUG]  [BUGGY]  if(shouldTraverseFunctions  &&  n  ==  cfg.getEntry().getValue())  {  return  true;  }  else  {  exceptionHandler.push(n);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  if(shouldTraverseFunctions  &&  n  ==  cfg.getEntry().getValue())  {  return  true;  }  else  {  exceptionHandler.push(n);  }  [BUGGY]    }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	if(shouldTraverseFunctions  &&  n  ==  cfg.getEntry().getValue())  {  return  true;  }  else  {  exceptionHandler.push(n);  }	  if(shouldTraverseFunctions    ||    n    ==    cfg.getEntry().getValue())    {    return    true;    }    else    {    exceptionHandler.push(n);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
39	[BUG]  [BUGGY]  parent  ==  n  ||  n  ==  cfg.getEntry().getValue())  {  return  true;  }  else  {  exceptionHandler.push(n);  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  parent  ==  n  ||  n  ==  cfg.getEntry().getValue())  {  return  true;  }  else  {  exceptionHandler.push(n);  }  [BUGGY]    }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	parent  ==  n  ||  n  ==  cfg.getEntry().getValue())  {  return  true;  }  else  {  exceptionHandler.push(n);  }	  if(shouldTraverseFunctions    ||    n    ==    cfg.getEntry().getValue())    {    return    true;    }    else    {    exceptionHandler.push(n);    }    	non-compiled	[CE]  not  a  statement	10	None	replace
40	[BUG]  [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  return  true;  }  else  {  exceptionHandler.push(n);  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  return  true;  }  else  {  exceptionHandler.push(n);  }  [BUGGY]    }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	Context.checkState(shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  return  true;  }  else  {  exceptionHandler.push(n);  }	  if(shouldTraverseFunctions    ||    n    ==    cfg.getEntry().getValue())    {    return    true;    }    else    {    exceptionHandler.push(n);    }    	non-compiled	[CE]  	10	None	replace
41	[BUG]  [BUGGY]  n  =  cfg.getEntry().getValue()  +  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  n  =  cfg.getEntry().getValue()  +  1;  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	n  =  cfg.getEntry().getValue()  +  1;	      n    =    cfg.getEntry().getValue();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
42	[BUG]  [BUGGY]  n  =  cfg.getEntry().getKey();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  n  =  cfg.getEntry().getKey();  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	n  =  cfg.getEntry().getKey();	      n    =    cfg.getEntry().getValue();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
43	[BUG]  [BUGGY]  n  =  parent.getEntry().getValue();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  n  =  parent.getEntry().getValue();  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	n  =  parent.getEntry().getValue();	      n    =    cfg.getEntry().getValue();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
44	[BUG]  [BUGGY]  cfg.getEntry().getValue().addChildToFront(n,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  cfg.getEntry().getValue().addChildToFront(n,  exceptionHandler);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	cfg.getEntry().getValue().addChildToFront(n,  exceptionHandler);	      cfg.getEntry().getValue().addChildToFront(exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
45	[BUG]  [BUGGY]  cfg.getEntry().getValue().addChildToFront(parent);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  cfg.getEntry().getValue().addChildToFront(parent);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	cfg.getEntry().getValue().addChildToFront(parent);	      cfg.getEntry().getValue().addChildToFront(exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
46	[BUG]  [BUGGY]  cfg.getEntry().setValue(n);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  cfg.getEntry().setValue(n);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	cfg.getEntry().setValue(n);	      cfg.getEntry().getValue();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
47	[BUG]  [BUGGY]  cfg.getEntry().push(n);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  cfg.getEntry().push(n);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	cfg.getEntry().push(n);	      cfg.getEntry().getValue();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
48	[BUG]  [BUGGY]  cfg.getEntry().addValue(n);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  cfg.getEntry().addValue(n);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	cfg.getEntry().addValue(n);	      cfg.getEntry().getValue();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
49	[BUG]  [BUGGY]  cfg.getEntry().addChildToBack(n);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  cfg.getEntry().addChildToBack(n);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	cfg.getEntry().addChildToBack(n);	      cfg.getEntry().getValue();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
50	[BUG]  [BUGGY]  cfg.getEntry().getValue().setString(n.getString()  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  cfg.getEntry().getValue().setString(n.getString()  +  1);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	cfg.getEntry().getValue().setString(n.getString()  +  1);	      cfg.getEntry().getValue().setString(n.getString());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
51	[BUG]  [BUGGY]  cfg.getEntry().getValue().setString(n.getKey());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  cfg.getEntry().getValue().setString(n.getKey());  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	cfg.getEntry().getValue().setString(n.getKey());	      cfg.getEntry().getValue().setString(n.getString());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
52	[BUG]  [BUGGY]  if(shouldTraverseFunctions  &&  n  ==  cfg.getEntry().getValue())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  if(shouldTraverseFunctions  &&  n  ==  cfg.getEntry().getValue())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	if(shouldTraverseFunctions  &&  n  ==  cfg.getEntry().getValue())  {  throw  new  IllegalArgumentException( " ");  }	  if(shouldTraverseFunctions    ||    n    ==    cfg.getEntry().getValue())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
53	[BUG]  [BUGGY]  ||  n  ==  cfg.getEntry().getValue())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  ||  n  ==  cfg.getEntry().getValue())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	||  n  ==  cfg.getEntry().getValue())  {  throw  new  IllegalArgumentException( " ");  }	  if(shouldTraverseFunctions    ||    n    ==    cfg.getEntry().getValue())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
54	[BUG]  [BUGGY]  if(shouldTraverseFunctions  ||  n  ==  parent.getEntry().getValue())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  if(shouldTraverseFunctions  ||  n  ==  parent.getEntry().getValue())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	if(shouldTraverseFunctions  ||  n  ==  parent.getEntry().getValue())  {  throw  new  IllegalArgumentException( " ");  }	  if(shouldTraverseFunctions    ||    n    ==    cfg.getEntry().getValue())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
55	[BUG]  [BUGGY]  allowTraverseFunctions(cfg.getEntry().getValue())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  allowTraverseFunctions(cfg.getEntry().getValue())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	allowTraverseFunctions(cfg.getEntry().getValue())  {  throw  new  IllegalArgumentException( " ");  }	  if(shouldTraverseFunctions    ||    n    ==    cfg.getEntry().getValue())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	20	None	replace
56	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityCounter);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityCounter);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  priorityCounter);	      NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
57	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityComparator);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityComparator);	      NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
58	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator);	      NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
59	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent,  astPositionCounter);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	NodeTraversal.traverse(compiler,  node,  parent,  astPositionCounter);	      NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
60	[BUG]  [BUGGY]  cfg.getEntry().getValue().addChildToFront(n,  parent);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  cfg.getEntry().getValue().addChildToFront(n,  parent);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	cfg.getEntry().getValue().addChildToFront(n,  parent);	      cfg.getEntry().getValue().addChildToFront(n);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
61	[BUG]  [BUGGY]  cfg.getEntry().setValue(n.getType()))  {  exceptionHandler.push(n);  return  true;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  cfg.getEntry().setValue(n.getType()))  {  exceptionHandler.push(n);  return  true;  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	cfg.getEntry().setValue(n.getType()))  {  exceptionHandler.push(n);  return  true;	      cfg.getEntry().getValue())    {    exceptionHandler.push(n);    return    true;    	non-compiled	[CE]  ';'  expected	16	None	replace
62	[BUG]  [BUGGY]  cfg.getEntry().setValue(n.getString()))  {  exceptionHandler.push(n);  return  true;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  cfg.getEntry().setValue(n.getString()))  {  exceptionHandler.push(n);  return  true;  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	cfg.getEntry().setValue(n.getString()))  {  exceptionHandler.push(n);  return  true;	      cfg.getEntry().getValue())    {    exceptionHandler.push(n);    return    true;    	non-compiled	[CE]  ';'  expected	16	None	replace
63	[BUG]  [BUGGY]  n.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  n.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	n.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;	      cfg.getEntry().getValue())    {    exceptionHandler.push(n);    return    true;    	non-compiled	[CE]  ';'  expected	16	None	replace
64	[BUG]  [BUGGY]  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  false;  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  false;  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  false;	      cfg.getEntry().getValue())    {    exceptionHandler.push(n);    return    true;    	non-compiled	[CE]  ';'  expected	16	None	replace
65	[BUG]  [BUGGY]  cfg.getEntry().getValue().push(n);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  cfg.getEntry().getValue().push(n);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	cfg.getEntry().getValue().push(n);	      cfg.getEntry().getValue().add(n);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
66	[BUG]  [BUGGY]  parent  ==  cfg.getEntry().getValue())  {  return  true;  }  else  {  exceptionHandler.push(n);  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  parent  ==  cfg.getEntry().getValue())  {  return  true;  }  else  {  exceptionHandler.push(n);  }  [BUGGY]    }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	parent  ==  cfg.getEntry().getValue())  {  return  true;  }  else  {  exceptionHandler.push(n);  }	  if(shouldTraverseFunctions    ||    n    ==    cfg.getEntry().getValue())    {    return    true;    }    else    {    exceptionHandler.push(n);    }    	non-compiled	[CE]  not  a  statement	10	None	replace
67	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  root);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	NodeTraversal.traverse(compiler,  n,  root);	      NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
68	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  exceptionHandler);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  exceptionHandler);	      NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
69	[BUG]  [BUGGY]  cfg.getEntry().setValue(n.getString()))  {  exceptionHandler.push(n);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  cfg.getEntry().setValue(n.getString()))  {  exceptionHandler.push(n);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	cfg.getEntry().setValue(n.getString()))  {  exceptionHandler.push(n);	      cfg.getEntry().getValue())    {    exceptionHandler.push(n);    	non-compiled	[CE]  ';'  expected	15	None	replace
70	[BUG]  [BUGGY]  exceptionHandler.push(n);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  exceptionHandler.push(n);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	exceptionHandler.push(n);	      cfg.getEntry().getValue())    {    exceptionHandler.push(n);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
71	[BUG]  [BUGGY]  cfg.getEntry().getValue().add(n.getString());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  cfg.getEntry().getValue().add(n.getString());  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	cfg.getEntry().getValue().add(n.getString());	      cfg.getEntry().getValue().setString(n.getString());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
72	[BUG]  [BUGGY]  if(shouldTraverseFunctions  &&  n!=  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  if(shouldTraverseFunctions  &&  n!=  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  [BUGGY]    }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	if(shouldTraverseFunctions  &&  n!=  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }	  if(shouldTraverseFunctions    ||    n    ==    cfg.getEntry().getValue())    {    exceptionHandler.push(n);    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
73	[BUG]  [BUGGY]  if(n  ==  cfg.getEntry().getValue())  {  return  true;  }  else  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  if(n  ==  cfg.getEntry().getValue())  {  return  true;  }  else  {  return  false;  }  [BUGGY]    }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	if(n  ==  cfg.getEntry().getValue())  {  return  true;  }  else  {  return  false;  }	  if(shouldTraverseFunctions    ||    n    ==    cfg.getEntry().getValue())    {    return    true;    }    else    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
74	[BUG]  [BUGGY]  if(shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  return  false;  }  else  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  if(shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  return  false;  }  else  {  return  true;  }  [BUGGY]    }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	if(shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  return  false;  }  else  {  return  true;  }	  return    false;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
75	[BUG]  [BUGGY]  if(!shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  if(!shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  return  false;  }  [BUGGY]    }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	if(!shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  return  false;  }	  return    false;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
76	[BUG]  [BUGGY]  if(n  ==  cfg.getEntry().getValue())  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  if(n  ==  cfg.getEntry().getValue())  {  return  true;  }  [BUGGY]    }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	if(n  ==  cfg.getEntry().getValue())  {  return  true;  }	  if(shouldTraverseFunctions    ||    n    ==    cfg.getEntry().getValue())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
77	[BUG]  [BUGGY]  if(shouldTraverseFunctions  ||  n  ==  parent.getValue())  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  if(shouldTraverseFunctions  ||  n  ==  parent.getValue())  {  return  true;  }  [BUGGY]    }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	if(shouldTraverseFunctions  ||  n  ==  parent.getValue())  {  return  true;  }	  if(shouldTraverseFunctions    ||    n    ==    cfg.getEntry().getValue())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
78	[BUG]  [BUGGY]  cfg.getEntry().setValue(n.getNext()))  {  exceptionHandler.push(n);  return  true;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  cfg.getEntry().setValue(n.getNext()))  {  exceptionHandler.push(n);  return  true;  }  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	cfg.getEntry().setValue(n.getNext()))  {  exceptionHandler.push(n);  return  true;  }	      cfg.getEntry().getValue())    {    exceptionHandler.push(n);    return    true;    }    	non-compiled	[CE]  	18	None	replace
79	[BUG]  [BUGGY]  cfg.getEntry().getKey())  {  exceptionHandler.push(n);  return  true;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  cfg.getEntry().getKey())  {  exceptionHandler.push(n);  return  true;  }  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	cfg.getEntry().getKey())  {  exceptionHandler.push(n);  return  true;  }	      cfg.getEntry().getValue())    {    exceptionHandler.push(n);    return    true;    }    	non-compiled	[CE]  	18	None	replace
80	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities);	      NodeTraversal.traverse(compiler,    n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
81	[BUG]  [BUGGY]  n  =  cfg.getEntry().getNext();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  n  =  cfg.getEntry().getNext();  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	n  =  cfg.getEntry().getNext();	      n    =    cfg.getEntry().getValue();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
82	[BUG]  [BUGGY]  cfg.getEntry().getValue().addToBack(n);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  cfg.getEntry().getValue().addToBack(n);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	cfg.getEntry().getValue().addToBack(n);	      cfg.getEntry().getValue().addChildToBack(exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
83	[BUG]  [BUGGY]  if(n  ==  cfg.getEntry().getValue())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  if(n  ==  cfg.getEntry().getValue())  {  return  false;  }  [BUGGY]    }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	if(n  ==  cfg.getEntry().getValue())  {  return  false;  }	  if(shouldTraverseFunctions    ||    n    ==    cfg.getEntry().getValue())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
84	[BUG]  [BUGGY]  cfg.getEntry().addChildToBack(exceptionHandler);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  cfg.getEntry().addChildToBack(exceptionHandler);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	cfg.getEntry().addChildToBack(exceptionHandler);	      cfg.getEntry().getValue();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
85	[BUG]  [BUGGY]  cfg.getEntry().setValue(n.getString());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  cfg.getEntry().setValue(n.getString());  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	cfg.getEntry().setValue(n.getString());	      cfg.getEntry().getValue();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
86	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  astPositionCounter);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	NodeTraversal.traverse(compiler,  n,  root,  astPositionCounter);	      NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
87	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  parent,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  parent,  astPositionCounter);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities,  parent,  astPositionCounter);	      NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
88	[BUG]  [BUGGY]  parent  ==  n  ||  n  ==  cfg.getEntry().getValue())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  parent  ==  n  ||  n  ==  cfg.getEntry().getValue())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	parent  ==  n  ||  n  ==  cfg.getEntry().getValue())  {  throw  new  IllegalArgumentException( " ");  }	  if(shouldTraverseFunctions    ||    n    ==    cfg.getEntry().getValue())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	20	None	replace
89	[BUG]  [BUGGY]  if(n  ==  cfg.getEntry().getValue())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  if(n  ==  cfg.getEntry().getValue())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	if(n  ==  cfg.getEntry().getValue())  {  throw  new  IllegalArgumentException( " ");  }	  if(shouldTraverseFunctions    ||    n    ==    cfg.getEntry().getValue())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
90	[BUG]  [BUGGY]  if(n  ==  cfg.getEntry().getValue())  {  return  true;  }  else  {  exceptionHandler.push(n);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  if(n  ==  cfg.getEntry().getValue())  {  return  true;  }  else  {  exceptionHandler.push(n);  }  [BUGGY]    }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	if(n  ==  cfg.getEntry().getValue())  {  return  true;  }  else  {  exceptionHandler.push(n);  }	  if(shouldTraverseFunctions    ||    n    ==    cfg.getEntry().getValue())    {    return    true;    }    else    {    exceptionHandler.push(n);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
91	[BUG]  [BUGGY]  parent  ==  cfg.getEntry().getValue())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  parent  ==  cfg.getEntry().getValue())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	parent  ==  cfg.getEntry().getValue())  {  throw  new  IllegalArgumentException( " ");  }	  if(shouldTraverseFunctions    ||    n    ==    cfg.getEntry().getValue())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	20	None	replace
92	[BUG]  [BUGGY]  if(shouldTraverseFunctions  ||  n!=  cfg.getEntry().getValue())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  if(shouldTraverseFunctions  ||  n!=  cfg.getEntry().getValue())  {  return  false;  }  [BUGGY]    }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	if(shouldTraverseFunctions  ||  n!=  cfg.getEntry().getValue())  {  return  false;  }	  if(shouldTraverseFunctions    ||    n    ==    cfg.getEntry().getValue())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
93	[BUG]  [BUGGY]  n  ==  cfg.getEntry().getValue();  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  n  ==  cfg.getEntry().getValue();  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	n  ==  cfg.getEntry().getValue();	      cfg.getEntry().getValue())    {    exceptionHandler.push(n);    return    true;    	non-compiled	[CE]  not  a  statement	16	None	replace
94	[BUG]  [BUGGY]  if(shouldTraverseFunctions  ||  n!=  cfg.getEntry().getValue())  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  if(shouldTraverseFunctions  ||  n!=  cfg.getEntry().getValue())  {  return  true;  }  [BUGGY]    }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	if(shouldTraverseFunctions  ||  n!=  cfg.getEntry().getValue())  {  return  true;  }	  if(shouldTraverseFunctions    ||    n    ==    cfg.getEntry().getValue())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
95	[BUG]  [BUGGY]  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }	      cfg.getEntry().getValue())    {    exceptionHandler.push(n);    return    true;    }    	non-compiled	[CE]  not  a  statement	18	None	replace
96	[BUG]  [BUGGY]  n!=  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  n!=  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	n!=  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }	      cfg.getEntry().getValue())    {    exceptionHandler.push(n);    return    true;    }    	non-compiled	[CE]  not  a  statement	18	None	replace
97	[BUG]  [BUGGY]  n  ==  cfg.getEntry().getValue();  exceptionHandler.push(n);  return  true;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  n  ==  cfg.getEntry().getValue();  exceptionHandler.push(n);  return  true;  }  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	n  ==  cfg.getEntry().getValue();  exceptionHandler.push(n);  return  true;  }	      cfg.getEntry().getValue())    {    exceptionHandler.push(n);    return    true;    }    	non-compiled	[CE]  not  a  statement	18	None	replace
98	[BUG]  [BUGGY]  if(shouldTraverseFunctions  ||  n!=  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  if(shouldTraverseFunctions  ||  n!=  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  [BUGGY]    }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	if(shouldTraverseFunctions  ||  n!=  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }	  if(shouldTraverseFunctions    ||    n    ==    cfg.getEntry().getValue())    {    exceptionHandler.push(n);    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
99	[BUG]  [BUGGY]  n  =  cfg.getEntry().getName();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  n  =  cfg.getEntry().getName();  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	n  =  cfg.getEntry().getName();	      n    =    cfg.getEntry().getValue();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
100	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler);	      NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
101	[BUG]  [BUGGY]  cfg.getEntry().putProp(Node.SOURCENAME_PROP,  n);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  cfg.getEntry().putProp(Node.SOURCENAME_PROP,  n);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	cfg.getEntry().putProp(Node.SOURCENAME_PROP,  n);	      cfg.getEntry().getValue();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
102	[BUG]  [BUGGY]  cfg.getEntry().addChildToFront(n);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  cfg.getEntry().addChildToFront(n);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	cfg.getEntry().addChildToFront(n);	      cfg.getEntry().getValue();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
103	[BUG]  [BUGGY]  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);	      cfg.getEntry().getValue())    {    exceptionHandler.push(n);    	non-compiled	[CE]  not  a  statement	15	None	replace
104	[BUG]  [BUGGY]  cfg.getEntry().getValue().setString(n.toString());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  cfg.getEntry().getValue().setString(n.toString());  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	cfg.getEntry().getValue().setString(n.toString());	      cfg.getEntry().getValue().setString(n.getString());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
105	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  nodePriorities);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  nodePriorities);	      NodeTraversal.traverse(compiler,    n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
106	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]    return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	NodeTraversal.traverse(compiler,  n,  this);	      NodeTraversal.traverse(compiler,    n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
