bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  n,  parent);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);  [BUGGY]    NodeTraversal.traverse(compiler,  n,  parent);  [BUGGY]  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	    NodeTraversal.traverse(compiler,  n,  parent);		non-compiled	[CE]  illegal  start  of  expression	26	None	add
2	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);  [BUGGY]    NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter);  [BUGGY]  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	    NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter);		non-compiled	[CE]  illegal  start  of  expression	26	None	add
3	[BUG]  [BUGGY]    cfg.getEntry().getValue().addChildToBack(exceptionHandler);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);  [BUGGY]    cfg.getEntry().getValue().addChildToBack(exceptionHandler);  [BUGGY]  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	    cfg.getEntry().getValue().addChildToBack(exceptionHandler);		non-compiled	[CE]  illegal  start  of  expression	26	None	add
4	[BUG]  [BUGGY]    cfg.getEntry().getValue();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);  [BUGGY]    cfg.getEntry().getValue();  [BUGGY]  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	    cfg.getEntry().getValue();		non-compiled	[CE]  illegal  start  of  expression	26	None	add
5	[BUG]  [BUGGY]    cfg.getEntry().getValue().setString(n.getString());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);  [BUGGY]    cfg.getEntry().getValue().setString(n.getString());  [BUGGY]  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	    cfg.getEntry().getValue().setString(n.getString());		non-compiled	[CE]  illegal  start  of  expression	26	None	add
6	[BUG]  [BUGGY]    cfg.getEntry().getValue().addChildToFront(exceptionHandler);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError  [CONTEXT]  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);  [BUGGY]    cfg.getEntry().getValue().addChildToFront(exceptionHandler);  [BUGGY]  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	    cfg.getEntry().getValue().addChildToFront(exceptionHandler);		non-compiled	[CE]  illegal  start  of  expression	26	None	add
7	[BUG]  [BUGGY]  return  false;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);  [BUGGY]  return  false;  [BUGGY]  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	return  false;	return  true;  	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
8	[BUG]  [BUGGY]  if(shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);  [BUGGY]  if(shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  return  true;  }  [BUGGY]  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	if(shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  return  true;  }	return  true;  	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
9	[BUG]  [BUGGY]  if(shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);  [BUGGY]  if(shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  return  false;  }  [BUGGY]  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	if(shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  return  false;  }	return  true;  	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
10	[BUG]  [BUGGY]  if(shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  return  true;  }  else  {  exceptionHandler.push(n);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);  [BUGGY]  if(shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  return  true;  }  else  {  exceptionHandler.push(n);  }  [BUGGY]  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	if(shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  return  true;  }  else  {  exceptionHandler.push(n);  }	return  true;  	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
11	[BUG]  [BUGGY]  if(shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  return  true;  }  else  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);  [BUGGY]  if(shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  return  true;  }  else  {  return  false;  }  [BUGGY]  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	if(shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  return  true;  }  else  {  return  false;  }	return  true;  	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
12	[BUG]  [BUGGY]  if(shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);  [BUGGY]  if(shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  [BUGGY]  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	if(shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }	return  true;  	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
13	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  n,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);  [BUGGY]    NodeTraversal.traverse(compiler,  n,  astPositionCounter);  [BUGGY]  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	    NodeTraversal.traverse(compiler,  n,  astPositionCounter);		non-compiled	[CE]  illegal  start  of  expression	26	None	add
14	[BUG]  [BUGGY]    cfg.getEntry().getValue().add(n);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);  [BUGGY]    cfg.getEntry().getValue().add(n);  [BUGGY]  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	    cfg.getEntry().getValue().add(n);		non-compiled	[CE]  illegal  start  of  expression	26	None	add
15	[BUG]  [BUGGY]    cfg.getEntry().getValue())  {  exceptionHandler.push(n);  [CE]  ';'  expected  [FE]    AssertionFailedError  [CONTEXT]  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);  [BUGGY]    cfg.getEntry().getValue())  {  exceptionHandler.push(n);  [BUGGY]  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	    cfg.getEntry().getValue())  {  exceptionHandler.push(n);		non-compiled	[CE]  ';'  expected	26	None	add
16	[BUG]  [BUGGY]    cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  [CE]  ';'  expected  [FE]      AssertionFailedError  [CONTEXT]  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);  [BUGGY]    cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  [BUGGY]  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	    cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;		non-compiled	[CE]  ';'  expected	26	None	add
17	[BUG]  [BUGGY]    n  =  cfg.getEntry().getValue();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);  [BUGGY]    n  =  cfg.getEntry().getValue();  [BUGGY]  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	    n  =  cfg.getEntry().getValue();		non-compiled	[CE]  illegal  start  of  expression	26	None	add
18	[BUG]  [BUGGY]    cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  [CE]  [FE]          AssertionFailedError  [CONTEXT]  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);  [BUGGY]    cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  [BUGGY]  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	    cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }		non-compiled	[CE]  	26	None	add
19	[BUG]  [BUGGY]    cfg.getEntry().getValue().addChildToFront(n);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);  [BUGGY]    cfg.getEntry().getValue().addChildToFront(n);  [BUGGY]  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	    cfg.getEntry().getValue().addChildToFront(n);		non-compiled	[CE]  illegal  start  of  expression	26	None	add
20	[BUG]  [BUGGY]  if(shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  exceptionHandler.push(n);  [BUGGY]  if(shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	if(shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  throw  new  IllegalArgumentException( " ");  }	return  true;  	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
