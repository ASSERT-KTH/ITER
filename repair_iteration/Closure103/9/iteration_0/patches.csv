bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    Node  curHandler  =  iter.next();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }  [BUGGY]    Node  curHandler  =  iter.next();  [BUGGY]  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	    Node  curHandler  =  iter.next();		non-compiled	[CE]  illegal  start  of  expression	18	None	add
2	[BUG]  [BUGGY]    Node  curHandler  =  iter.next();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }  [BUGGY]    Node  curHandler  =  iter.next();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	    Node  curHandler  =  iter.next();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));		non-compiled	[CE]  illegal  start  of  expression	18	None	add
3	[BUG]  [BUGGY]    Node  lastJump  =  curHandler.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }  [BUGGY]    Node  lastJump  =  curHandler.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	    Node  lastJump  =  curHandler.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));		non-compiled	[CE]  illegal  start  of  expression	18	None	add
4	[BUG]  [BUGGY]    Node  curHandler  =(Node)iter.next();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }  [BUGGY]    Node  curHandler  =(Node)iter.next();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	    Node  curHandler  =(Node)iter.next();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));		non-compiled	[CE]  illegal  start  of  expression	18	None	add
5	[BUG]  [BUGGY]    Node  curHandler  =  node.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }  [BUGGY]    Node  curHandler  =  node.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	    Node  curHandler  =  node.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));		non-compiled	[CE]  illegal  start  of  expression	18	None	add
6	[BUG]  [BUGGY]    Node  lastJump  =  curHandler.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(lastJump));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError  [CONTEXT]  private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }  [BUGGY]    Node  lastJump  =  curHandler.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(lastJump));  [BUGGY]  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	    Node  lastJump  =  curHandler.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(lastJump));		non-compiled	[CE]  illegal  start  of  expression	18	None	add
7	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(curHandler)||  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }  [BUGGY]  if(NodeUtil.hasFinally(curHandler)||  NodeUtil.hasFinally(curHandler))  {  [BUGGY]  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.hasFinally(curHandler)||  NodeUtil.hasFinally(curHandler))  {	if  (NodeUtil.hasFinally(curHandler))  {  	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
8	[BUG]  [BUGGY]  if(!NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }  [BUGGY]  if(!NodeUtil.hasFinally(curHandler))  {  [BUGGY]  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(!NodeUtil.hasFinally(curHandler))  {	if  (NodeUtil.hasFinally(curHandler))  {  	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
9	[BUG]  [BUGGY]  if(NodeUtil.isFunction(curHandler))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }  [BUGGY]  if(NodeUtil.isFunction(curHandler))  {  [BUGGY]  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(curHandler))  {	if  (NodeUtil.hasFinally(curHandler))  {  	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
10	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(curHandler)||  curHandler.getLastChild()!=  node)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }  [BUGGY]  if(NodeUtil.hasFinally(curHandler)||  curHandler.getLastChild()!=  node)  {  [BUGGY]  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.hasFinally(curHandler)||  curHandler.getLastChild()!=  node)  {	if  (NodeUtil.hasFinally(curHandler))  {  	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
11	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(curHandler)||  curHandler.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }  [BUGGY]  if(NodeUtil.hasFinally(curHandler)||  curHandler.getType()  ==  Token.FUNCTION)  {  [BUGGY]  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.hasFinally(curHandler)||  curHandler.getType()  ==  Token.FUNCTION)  {	if  (NodeUtil.hasFinally(curHandler))  {  	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
12	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(exceptionHandler)||  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }  [BUGGY]  if(NodeUtil.hasFinally(exceptionHandler)||  NodeUtil.hasFinally(curHandler))  {  [BUGGY]  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.hasFinally(exceptionHandler)||  NodeUtil.hasFinally(curHandler))  {	if  (NodeUtil.hasFinally(curHandler))  {  	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
13	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(exceptionHandler))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }  [BUGGY]  if(NodeUtil.hasFinally(exceptionHandler))  {  [BUGGY]  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.hasFinally(exceptionHandler))  {	if  (NodeUtil.hasFinally(curHandler))  {  	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
14	[BUG]  [BUGGY]    Node  lastJump  =  curHandler.getLastChild();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }  [BUGGY]    Node  lastJump  =  curHandler.getLastChild();  [BUGGY]  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	    Node  lastJump  =  curHandler.getLastChild();		non-compiled	[CE]  illegal  start  of  expression	18	None	add
15	[BUG]  [BUGGY]    Node  finallyMap  =  iter.next();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }  [BUGGY]    Node  finallyMap  =  iter.next();  [BUGGY]  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	    Node  finallyMap  =  iter.next();		non-compiled	[CE]  illegal  start  of  expression	18	None	add
16	[BUG]  [BUGGY]    Node  firstJump  =  curHandler.getFirstChild();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }  [BUGGY]    Node  firstJump  =  curHandler.getFirstChild();  [BUGGY]  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	    Node  firstJump  =  curHandler.getFirstChild();		non-compiled	[CE]  illegal  start  of  expression	18	None	add
17	[BUG]  [BUGGY]    Node  firstJump  =  curHandler.getLastChild();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }  [BUGGY]    Node  firstJump  =  curHandler.getLastChild();  [BUGGY]  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	    Node  firstJump  =  curHandler.getLastChild();		non-compiled	[CE]  illegal  start  of  expression	18	None	add
18	[BUG]  [BUGGY]    Node  firstJump  =  node.getFirstChild();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }  [BUGGY]    Node  firstJump  =  node.getFirstChild();  [BUGGY]  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	    Node  firstJump  =  node.getFirstChild();		non-compiled	[CE]  illegal  start  of  expression	18	None	add
19	[BUG]  [BUGGY]    Node  finallyMap  =  node.getFirstChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError  [CONTEXT]  private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }  [BUGGY]    Node  finallyMap  =  node.getFirstChild();  [BUGGY]  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	    Node  finallyMap  =  node.getFirstChild();		non-compiled	[CE]  illegal  start  of  expression	18	None	add
20	[BUG]  [BUGGY]    Node  lastJump  =  node.getLastChild();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }  [BUGGY]    Node  lastJump  =  node.getLastChild();  [BUGGY]  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	    Node  lastJump  =  node.getLastChild();		non-compiled	[CE]  illegal  start  of  expression	18	None	add
21	[BUG]  [BUGGY]    Node  lastJump  =  curHandler.getFirstChild();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }  [BUGGY]    Node  lastJump  =  curHandler.getFirstChild();  [BUGGY]  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	    Node  lastJump  =  curHandler.getFirstChild();		non-compiled	[CE]  illegal  start  of  expression	18	None	add
22	[BUG]  [BUGGY]    Node  lastJump  =  iter.next();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }  [BUGGY]    Node  lastJump  =  iter.next();  [BUGGY]  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	    Node  lastJump  =  iter.next();		non-compiled	[CE]  illegal  start  of  expression	18	None	add
23	[BUG]  [BUGGY]  if(lastJump  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }  [BUGGY]  if(lastJump  ==  null)  {  [BUGGY]  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  null)  {	if  (NodeUtil.hasFinally(curHandler))  {  	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
24	[BUG]  [BUGGY]  if(lastJump  ==  null  ||  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }  [BUGGY]  if(lastJump  ==  null  ||  NodeUtil.hasFinally(curHandler))  {  [BUGGY]  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  null  ||  NodeUtil.hasFinally(curHandler))  {	if  (NodeUtil.hasFinally(curHandler))  {  	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
25	[BUG]  [BUGGY]  if(lastJump  ==  node)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }  [BUGGY]  if(lastJump  ==  node)  {  [BUGGY]  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  node)  {	if  (NodeUtil.hasFinally(curHandler))  {  	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
26	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(curHandler)&&  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }  [BUGGY]  if(NodeUtil.hasFinally(curHandler)&&  NodeUtil.hasFinally(curHandler))  {  [BUGGY]  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.hasFinally(curHandler)&&  NodeUtil.hasFinally(curHandler))  {	if  (NodeUtil.hasFinally(curHandler))  {  	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
