bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(curHandler)&&  curHandler.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(NodeUtil.hasFinally(curHandler)&&  curHandler.getType()  ==  Token.FUNCTION)  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.hasFinally(curHandler)&&  curHandler.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.hasFinally(curHandler)||    curHandler.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
2	[BUG]  [BUGGY]  if(NodeUtil.isFunction(curHandler)||  curHandler.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(NodeUtil.isFunction(curHandler)||  curHandler.getType()  ==  Token.FUNCTION)  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(curHandler)||  curHandler.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.hasFinally(curHandler)||    curHandler.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
3	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(exceptionHandler)||  curHandler.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(NodeUtil.hasFinally(exceptionHandler)||  curHandler.getType()  ==  Token.FUNCTION)  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.hasFinally(exceptionHandler)||  curHandler.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.hasFinally(curHandler)||    curHandler.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
4	[BUG]  [BUGGY]  if(NodeUtil.isFunction(curHandler)&&  curHandler.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(NodeUtil.isFunction(curHandler)&&  curHandler.getType()  ==  Token.FUNCTION)  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(curHandler)&&  curHandler.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.hasFinally(curHandler)||    curHandler.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
5	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(curHandler)||  NodeUtil.hasFinally(exceptionHandler))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(NodeUtil.hasFinally(curHandler)||  NodeUtil.hasFinally(exceptionHandler))  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.hasFinally(curHandler)||  NodeUtil.hasFinally(exceptionHandler))  {	  if(NodeUtil.hasFinally(exceptionHandler)||    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
6	[BUG]  [BUGGY]  if(NodeUtil.isFunction(curHandler)||  NodeUtil.hasFinally(exceptionHandler))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(NodeUtil.isFunction(curHandler)||  NodeUtil.hasFinally(exceptionHandler))  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(curHandler)||  NodeUtil.hasFinally(exceptionHandler))  {	  if(NodeUtil.hasFinally(exceptionHandler)||    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
7	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(curHandler)||  NodeUtil.hasFinally(exceptionHandler))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(NodeUtil.isExpressionNode(curHandler)||  NodeUtil.hasFinally(exceptionHandler))  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isExpressionNode(curHandler)||  NodeUtil.hasFinally(exceptionHandler))  {	  if(NodeUtil.hasFinally(exceptionHandler)||    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
8	[BUG]  [BUGGY]  if(NodeUtil.isFinally(curHandler)||  NodeUtil.hasFinally(exceptionHandler))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(NodeUtil.isFinally(curHandler)||  NodeUtil.hasFinally(exceptionHandler))  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFinally(curHandler)||  NodeUtil.hasFinally(exceptionHandler))  {	  if(NodeUtil.hasFinally(exceptionHandler)||    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
9	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(lastJump)||  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(NodeUtil.hasFinally(lastJump)||  NodeUtil.hasFinally(curHandler))  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.hasFinally(lastJump)||  NodeUtil.hasFinally(curHandler))  {	  if(NodeUtil.hasFinally(exceptionHandler)||    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
10	[BUG]  [BUGGY]  if(lastJump!=  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(lastJump!=  null)  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump!=  null)  {	  if(lastJump    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
11	[BUG]  [BUGGY]  if(lastJump  ==  null  ||  curHandler.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(lastJump  ==  null  ||  curHandler.getType()  ==  Token.GETPROP)  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  null  ||  curHandler.getType()  ==  Token.GETPROP)  {	  if(lastJump    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
12	[BUG]  [BUGGY]  if(curHandler!=  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(curHandler!=  null)  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(curHandler!=  null)  {	  if(lastJump    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
13	[BUG]  [BUGGY]  Node  lastJump  =  curHandler.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  lastJump  =  curHandler.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  curHandler.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));	      Node    lastJump    =    curHandler.getLastChild();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
14	[BUG]  [BUGGY]  Node  lastJump  =  curHandler.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  lastJump  =  curHandler.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  curHandler.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));	      Node    lastJump    =    curHandler.getLastChild();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
15	[BUG]  [BUGGY]  Node  lastJump  =  curHandler.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getString()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  lastJump  =  curHandler.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getString()));  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  curHandler.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getString()));	      Node    lastJump    =    curHandler.getLastChild();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
16	[BUG]  [BUGGY]  Node  curHandler  =  curHandler.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  curHandler  =  curHandler.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  curHandler.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));	      Node    lastJump    =    curHandler.getLastChild();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
17	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(exceptionHandler)&&  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(NodeUtil.hasFinally(exceptionHandler)&&  NodeUtil.hasFinally(curHandler))  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.hasFinally(exceptionHandler)&&  NodeUtil.hasFinally(curHandler))  {	  if(NodeUtil.hasFinally(curHandler)&&    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
18	[BUG]  [BUGGY]  if(NodeUtil.isFunction(curHandler)&&  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(NodeUtil.isFunction(curHandler)&&  NodeUtil.hasFinally(curHandler))  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(curHandler)&&  NodeUtil.hasFinally(curHandler))  {	  if(NodeUtil.hasFinally(curHandler)&&    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
19	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(lastJump)&&  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(NodeUtil.hasFinally(lastJump)&&  NodeUtil.hasFinally(curHandler))  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.hasFinally(lastJump)&&  NodeUtil.hasFinally(curHandler))  {	  if(NodeUtil.hasFinally(curHandler)&&    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
20	[BUG]  [BUGGY]  Node  lastJump  =  curHandler.getLastChild(),  node);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  lastJump  =  curHandler.getLastChild(),  node);  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  curHandler.getLastChild(),  node);	      Node    lastJump    =    curHandler.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
21	[BUG]  [BUGGY]  Node  lastJump  =  curHandler.getLastChild()  +  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  lastJump  =  curHandler.getLastChild()  +  1;  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  curHandler.getLastChild()  +  1;	      Node    lastJump    =    curHandler.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
22	[BUG]  [BUGGY]  Node  curJump  =  curHandler.getFirstChild();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  curJump  =  curHandler.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curJump  =  curHandler.getFirstChild();	      Node    firstJump    =    curHandler.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
23	[BUG]  [BUGGY]  Node  finallyMap  =  curHandler.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  finallyMap  =  curHandler.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  finallyMap  =  curHandler.getFirstChild();	      Node    finallyMap    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
24	[BUG]  [BUGGY]  Node  finallyMap  =  node.getLastChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  finallyMap  =  node.getLastChild();  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  finallyMap  =  node.getLastChild();	      Node    finallyMap    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
25	[BUG]  [BUGGY]  Node  finallyMap  =  curHandler.getLastChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  finallyMap  =  curHandler.getLastChild();  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  finallyMap  =  curHandler.getLastChild();	      Node    finallyMap    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
26	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(curHandler)&&  curHandler.getLastChild()!=  node)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(NodeUtil.hasFinally(curHandler)&&  curHandler.getLastChild()!=  node)  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.hasFinally(curHandler)&&  curHandler.getLastChild()!=  node)  {	  if(NodeUtil.hasFinally(curHandler)||    curHandler.getLastChild()!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
27	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(curHandler)||  curHandler.getFirstChild()!=  node)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(NodeUtil.hasFinally(curHandler)||  curHandler.getFirstChild()!=  node)  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.hasFinally(curHandler)||  curHandler.getFirstChild()!=  node)  {	  if(NodeUtil.hasFinally(curHandler)||    curHandler.getLastChild()!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
28	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(curHandler)||  curHandler.getLastChild()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(NodeUtil.hasFinally(curHandler)||  curHandler.getLastChild()  ==  node)  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.hasFinally(curHandler)||  curHandler.getLastChild()  ==  node)  {	  if(NodeUtil.hasFinally(curHandler)||    curHandler.getLastChild()!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
29	[BUG]  [BUGGY]  if(NodeUtil.isFinally(curHandler)||  curHandler.getLastChild()!=  node)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(NodeUtil.isFinally(curHandler)||  curHandler.getLastChild()!=  node)  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFinally(curHandler)||  curHandler.getLastChild()!=  node)  {	  if(NodeUtil.hasFinally(curHandler)||    curHandler.getLastChild()!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
30	[BUG]  [BUGGY]  Node  lastJump  =  node.getFirstChild();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  lastJump  =  node.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  node.getFirstChild();	      Node    lastJump    =    curHandler.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
31	[BUG]  [BUGGY]  Node  firstJump  =  node.getLastChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  firstJump  =  node.getLastChild();  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  firstJump  =  node.getLastChild();	      Node    firstJump    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
32	[BUG]  [BUGGY]  Node  curJump  =  node.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  curJump  =  node.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curJump  =  node.getFirstChild();	      Node    firstJump    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
33	[BUG]  [BUGGY]  if(NodeUtil.isFunction(curHandler)||  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(NodeUtil.isFunction(curHandler)||  NodeUtil.hasFinally(curHandler))  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(curHandler)||  NodeUtil.hasFinally(curHandler))  {	  if(NodeUtil.hasFinally(curHandler)||    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
34	[BUG]  [BUGGY]  if(curHandler  ==  null  ||  NodeUtil.hasFinally(lastJump))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(curHandler  ==  null  ||  NodeUtil.hasFinally(lastJump))  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(curHandler  ==  null  ||  NodeUtil.hasFinally(lastJump))  {	  if(lastJump    ==    null    ||    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
35	[BUG]  [BUGGY]  if(curHandler!=  null  ||  NodeUtil.hasFinally(lastJump))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(curHandler!=  null  ||  NodeUtil.hasFinally(lastJump))  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(curHandler!=  null  ||  NodeUtil.hasFinally(lastJump))  {	  if(lastJump    ==    null    ||    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
36	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(curHandler)||  NodeUtil.hasFinally(curJump))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(NodeUtil.hasFinally(curHandler)||  NodeUtil.hasFinally(curJump))  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.hasFinally(curHandler)||  NodeUtil.hasFinally(curJump))  {	  if(lastJump    ==    null    ||    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
37	[BUG]  [BUGGY]  if(lastJump!=  null  ||  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(lastJump!=  null  ||  NodeUtil.hasFinally(curHandler))  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump!=  null  ||  NodeUtil.hasFinally(curHandler))  {	  if(lastJump    ==    null    ||    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
38	[BUG]  [BUGGY]  Node  curHandler  =(Node)iter.next();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  curHandler  =(Node)iter.next();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =(Node)iter.next();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));	      Node    curHandler    =(Node)iter.next();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
39	[BUG]  [BUGGY]  Node  curHandler  =  node.next();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  curHandler  =  node.next();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  node.next();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));	      Node    curHandler    =(Node)iter.next();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
40	[BUG]  [BUGGY]  Node  firstJump  =  curHandler.getLastChild()  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  firstJump  =  curHandler.getLastChild()  +  1;  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  firstJump  =  curHandler.getLastChild()  +  1;	      Node    firstJump    =    curHandler.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
41	[BUG]  [BUGGY]  if(!NodeUtil.isFunction(curHandler))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(!NodeUtil.isFunction(curHandler))  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(!NodeUtil.isFunction(curHandler))  {	  if(!NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
42	[BUG]  [BUGGY]  if(!NodeUtil.hasFinally(exceptionHandler))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(!NodeUtil.hasFinally(exceptionHandler))  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(!NodeUtil.hasFinally(exceptionHandler))  {	  if(!NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
43	[BUG]  [BUGGY]  if(!NodeUtil.hasFinally(curHandler)||!NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(!NodeUtil.hasFinally(curHandler)||!NodeUtil.hasFinally(curHandler))  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(!NodeUtil.hasFinally(curHandler)||!NodeUtil.hasFinally(curHandler))  {	  if(!NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
44	[BUG]  [BUGGY]  Node  curHandler  =  node.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  curHandler  =  node.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  node.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));	      Node    curHandler    =    node.getFirstChild();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
45	[BUG]  [BUGGY]  Node  curHandler  =  lastJump.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  curHandler  =  lastJump.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  lastJump.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));	      Node    curHandler    =    node.getFirstChild();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
46	[BUG]  [BUGGY]  if(lastJump!=  node)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(lastJump!=  node)  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump!=  node)  {	  if(lastJump    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
47	[BUG]  [BUGGY]  if(node  ==  lastJump)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(node  ==  lastJump)  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(node  ==  lastJump)  {	  if(lastJump    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
48	[BUG]  [BUGGY]  if(lastJump  ==  node  ||  NodeUtil.isFunction(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(lastJump  ==  node  ||  NodeUtil.isFunction(curHandler))  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  node  ||  NodeUtil.isFunction(curHandler))  {	  if(lastJump    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
49	[BUG]  [BUGGY]  if(lastJump  ==  node  ||  curHandler.getLastChild()!=  node)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(lastJump  ==  node  ||  curHandler.getLastChild()!=  node)  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  node  ||  curHandler.getLastChild()!=  node)  {	  if(lastJump    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
50	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(curHandler))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(NodeUtil.isExpressionNode(curHandler))  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isExpressionNode(curHandler))  {	  if(NodeUtil.isFunction(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
51	[BUG]  [BUGGY]  if(NodeUtil.isFunction(curHandler)||  NodeUtil.isExpressionNode(curHandler))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(NodeUtil.isFunction(curHandler)||  NodeUtil.isExpressionNode(curHandler))  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(curHandler)||  NodeUtil.isExpressionNode(curHandler))  {	  if(NodeUtil.isFunction(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
52	[BUG]  [BUGGY]  if(NodeUtil.isFunction(lastJump))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(NodeUtil.isFunction(lastJump))  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(lastJump))  {	  if(NodeUtil.isFunction(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
53	[BUG]  [BUGGY]  if(NodeUtil.isFunction(curHandler)||  NodeUtil.isFunction(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(NodeUtil.isFunction(curHandler)||  NodeUtil.isFunction(curHandler))  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(curHandler)||  NodeUtil.isFunction(curHandler))  {	  if(NodeUtil.isFunction(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
54	[BUG]  [BUGGY]  Node  lastJump  =  curHandler.next();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  lastJump  =  curHandler.next();  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  curHandler.next();	      Node    lastJump    =    iter.next();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
55	[BUG]  [BUGGY]  Node  lastJump  =  iter.getLastChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  lastJump  =  iter.getLastChild();  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  iter.getLastChild();	      Node    lastJump    =    iter.next();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
56	[BUG]  [BUGGY]  Node  lastJump  =  node.next();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  lastJump  =  node.next();  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  node.next();	      Node    lastJump    =    iter.next();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
57	[BUG]  [BUGGY]  Node  lastJump  =  curHandler.getNext();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  lastJump  =  curHandler.getNext();  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  curHandler.getNext();	      Node    lastJump    =    iter.next();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
58	[BUG]  [BUGGY]  if(NodeUtil.isFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(NodeUtil.isFinally(curHandler))  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFinally(curHandler))  {	  if(NodeUtil.hasFinally(exceptionHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
59	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(lastJump))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(NodeUtil.hasFinally(lastJump))  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.hasFinally(lastJump))  {	  if(NodeUtil.hasFinally(exceptionHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
60	[BUG]  [BUGGY]  Node  finallyMap  =  curHandler.next();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  finallyMap  =  curHandler.next();  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  finallyMap  =  curHandler.next();	      Node    finallyMap    =    iter.next();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
61	[BUG]  [BUGGY]  Node  finallyMap  =  iter.next()  -  curHandler.getLastChild();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  finallyMap  =  iter.next()  -  curHandler.getLastChild();  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  finallyMap  =  iter.next()  -  curHandler.getLastChild();	      Node    finallyMap    =    iter.next();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
62	[BUG]  [BUGGY]  Node  finallyMap  =  iter.next(),  curHandler.getLastChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  finallyMap  =  iter.next(),  curHandler.getLastChild());  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  finallyMap  =  iter.next(),  curHandler.getLastChild());	      Node    finallyMap    =    iter.next();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
63	[BUG]  [BUGGY]  Node  finallyMap  =  iter.getNext();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  finallyMap  =  iter.getNext();  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  finallyMap  =  iter.getNext();	      Node    finallyMap    =    iter.next();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
64	[BUG]  [BUGGY]  Node  curHandler  =  node.next();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  curHandler  =  node.next();  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  node.next();	      Node    curHandler    =    iter.next();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
65	[BUG]  [BUGGY]  Node  curHandler  =  iter.getNext();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  curHandler  =  iter.getNext();  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  iter.getNext();	      Node    curHandler    =    iter.next();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
66	[BUG]  [BUGGY]  Node  curHandler  =  node.getNext();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  curHandler  =  node.getNext();  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  node.getNext();	      Node    curHandler    =    iter.next();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
67	[BUG]  [BUGGY]  Node  curHandler  =  iter.next()  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  curHandler  =  iter.next()  +  1;  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  iter.next()  +  1;	      Node    curHandler    =    iter.next();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
68	[BUG]  [BUGGY]  Node  curHandler  =  iter.next();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  curHandler  =  iter.next();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  iter.next();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));	      Node    curHandler    =    iter.next();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
69	[BUG]  [BUGGY]  Node  curHandler  =  iter.getNext();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  curHandler  =  iter.getNext();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  iter.getNext();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));	      Node    curHandler    =    iter.next();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
70	[BUG]  [BUGGY]  if(finallyMap!=  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(finallyMap!=  null)  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(finallyMap!=  null)  {	  if(lastJump    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
71	[BUG]  [BUGGY]  Node  lastJump  =  iter.getNext();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  lastJump  =  iter.getNext();  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  iter.getNext();	      Node    lastJump    =    iter.next();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
72	[BUG]  [BUGGY]  Node  lastJump  =  node.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(lastJump));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  lastJump  =  node.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(lastJump));  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  node.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(lastJump));	      Node    lastJump    =    curHandler.getLastChild();    finallyMap.put(lastJump,    computeFallThrough(lastJump));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
73	[BUG]  [BUGGY]  Node  curHandler  =(Node)iter.next();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  curHandler  =(Node)iter.next();  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =(Node)iter.next();	      Node    curHandler    =(Node)iter.next();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
74	[BUG]  [BUGGY]  Node  curHandler  =(Node)iter.next();  finallyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  curHandler  =(Node)iter.next();  finallyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild()));  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =(Node)iter.next();  finallyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild()));	      Node    curHandler    =(Node)iter.next();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
75	[BUG]  [BUGGY]  if(lastJump  ==  node  ||  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(lastJump  ==  node  ||  NodeUtil.hasFinally(curHandler))  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  node  ||  NodeUtil.hasFinally(curHandler))  {	  if(lastJump    ==    null    ||    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
76	[BUG]  [BUGGY]  if(lastJump  ==  null  ||  NodeUtil.isFunction(curHandler))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(lastJump  ==  null  ||  NodeUtil.isFunction(curHandler))  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  null  ||  NodeUtil.isFunction(curHandler))  {	  if(lastJump    ==    null    ||    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
77	[BUG]  [BUGGY]  if(NodeUtil.isFunction(exceptionHandler))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(NodeUtil.isFunction(exceptionHandler))  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(exceptionHandler))  {	  if(NodeUtil.isFunction(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
78	[BUG]  [BUGGY]  if(NodeUtil.isFunction(exceptionHandler)||  NodeUtil.isFunction(curHandler))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(NodeUtil.isFunction(exceptionHandler)||  NodeUtil.isFunction(curHandler))  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(exceptionHandler)||  NodeUtil.isFunction(curHandler))  {	  if(NodeUtil.isFunction(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
79	[BUG]  [BUGGY]  if(NodeUtil.isFunction(exceptionHandler)||  NodeUtil.isExpressionNode(exceptionHandler))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(NodeUtil.isFunction(exceptionHandler)||  NodeUtil.isExpressionNode(exceptionHandler))  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(exceptionHandler)||  NodeUtil.isExpressionNode(exceptionHandler))  {	  if(NodeUtil.isFunction(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
80	[BUG]  [BUGGY]  if(lastJump  ==  node  ||  finallyMap.containsKey(curHandler))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(lastJump  ==  node  ||  finallyMap.containsKey(curHandler))  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  node  ||  finallyMap.containsKey(curHandler))  {	  if(lastJump    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
81	[BUG]  [BUGGY]  Node  curHandler  =  node.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  curHandler  =  node.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  node.getFirstChild();	      Node    curHandler    =    node.getFirstChild();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
82	[BUG]  [BUGGY]  Node  curHandler  =  node.getFirstChild();  finallyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  curHandler  =  node.getFirstChild();  finallyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild()));  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  node.getFirstChild();  finallyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild()));	      Node    curHandler    =    node.getFirstChild();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
83	[BUG]  [BUGGY]  Node  curHandler  =  iter.next();  finallyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  curHandler  =  iter.next();  finallyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild()));  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  iter.next();  finallyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild()));	      Node    curHandler    =    iter.next();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
84	[BUG]  [BUGGY]  Iterator  <  Node>  curHandler  =  iter.next();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Iterator  <  Node>  curHandler  =  iter.next();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Iterator  <  Node>  curHandler  =  iter.next();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));	      Node    curHandler    =    iter.next();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
85	[BUG]  [BUGGY]  Node  lastJump  =  curHandler.nextChild();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  lastJump  =  curHandler.nextChild();  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  curHandler.nextChild();	      Node    lastJump    =    curHandler.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
86	[BUG]  [BUGGY]  Node  finallyMap  =  node.next();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  finallyMap  =  node.next();  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  finallyMap  =  node.next();	      Node    finallyMap    =    iter.next();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
87	[BUG]  [BUGGY]  Node  finallyMap  =  iter.remove();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  finallyMap  =  iter.remove();  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  finallyMap  =  iter.remove();	      Node    finallyMap    =    iter.next();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
88	[BUG]  [BUGGY]  Node  firstJump  =  lastJump.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  firstJump  =  lastJump.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  firstJump  =  lastJump.getFirstChild();	      Node    firstJump    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
89	[BUG]  [BUGGY]  Node  lastJump  =  node.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  lastJump  =  node.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  node.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));	      Node    lastJump    =    curHandler.getLastChild();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
90	[BUG]  [BUGGY]  Node  lastJump  =  node.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  lastJump  =  node.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  node.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));	      Node    lastJump    =    curHandler.getLastChild();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
91	[BUG]  [BUGGY]  Node  lastJump  =  curHandler.getlastChild();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  lastJump  =  curHandler.getlastChild();  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  curHandler.getlastChild();	      Node    lastJump    =    curHandler.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
92	[BUG]  [BUGGY]  if(NodeUtil.isFunction(curHandler)&&  NodeUtil.hasFinally(exceptionHandler))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(NodeUtil.isFunction(curHandler)&&  NodeUtil.hasFinally(exceptionHandler))  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(curHandler)&&  NodeUtil.hasFinally(exceptionHandler))  {	  if(NodeUtil.hasFinally(exceptionHandler)||    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
93	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(exceptionHandler)||  curHandler.getLastChild()!=  node)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(NodeUtil.hasFinally(exceptionHandler)||  curHandler.getLastChild()!=  node)  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.hasFinally(exceptionHandler)||  curHandler.getLastChild()!=  node)  {	  if(NodeUtil.hasFinally(curHandler)||    curHandler.getLastChild()!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
94	[BUG]  [BUGGY]  if(NodeUtil.isFunction(curHandler)&&  curHandler.getLastChild()!=  node)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(NodeUtil.isFunction(curHandler)&&  curHandler.getLastChild()!=  node)  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(curHandler)&&  curHandler.getLastChild()!=  node)  {	  if(NodeUtil.hasFinally(curHandler)||    curHandler.getLastChild()!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
95	[BUG]  [BUGGY]  Node  curHandler  =  iter.getFirstChild();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  curHandler  =  iter.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  iter.getFirstChild();	      Node    curHandler    =    iter.next();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
96	[BUG]  [BUGGY]  Node  curHandler  =  iter.next()  -  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  curHandler  =  iter.next()  -  1;  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  iter.next()  -  1;	      Node    curHandler    =    iter.next();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
97	[BUG]  [BUGGY]  Node  firstJump  =  curHandler.next();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  firstJump  =  curHandler.next();  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  firstJump  =  curHandler.next();	      Node    firstJump    =    curHandler.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
98	[BUG]  [BUGGY]  Node  firstJump  =  curHandler.nextChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  firstJump  =  curHandler.nextChild();  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  firstJump  =  curHandler.nextChild();	      Node    firstJump    =    curHandler.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
99	[BUG]  [BUGGY]  if(lastJump  ==  null  ||!NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(lastJump  ==  null  ||!NodeUtil.hasFinally(curHandler))  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  null  ||!NodeUtil.hasFinally(curHandler))  {	  if(!NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
100	[BUG]  [BUGGY]  Node  firstJump  =  curHandler.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  firstJump  =  curHandler.removeFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  firstJump  =  curHandler.removeFirstChild();	      Node    firstJump    =    curHandler.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
101	[BUG]  [BUGGY]  if(lastJump  ==  node  ||  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild())))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(lastJump  ==  node  ||  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild())))  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  node  ||  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild())))  {	  if(lastJump    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
102	[BUG]  [BUGGY]  if(lastJump  ==  node  ||  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(lastJump  ==  node  ||  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()))  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  node  ||  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()))  {	  if(lastJump    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
103	[BUG]  [BUGGY]  if(lastJump  ==  node  ||  computeFallThrough(curHandler.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(lastJump  ==  node  ||  computeFallThrough(curHandler.getLastChild()))  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  node  ||  computeFallThrough(curHandler.getLastChild()))  {	  if(lastJump    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
104	[BUG]  [BUGGY]  if(lastJump  ==  null  ||  NodeUtil.hasFinally(curHandler)&&  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(lastJump  ==  null  ||  NodeUtil.hasFinally(curHandler)&&  NodeUtil.hasFinally(curHandler))  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  null  ||  NodeUtil.hasFinally(curHandler)&&  NodeUtil.hasFinally(curHandler))  {	  if(NodeUtil.hasFinally(curHandler)&&    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
105	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(curHandler)&&  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(NodeUtil.isExpressionNode(curHandler)&&  NodeUtil.hasFinally(curHandler))  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isExpressionNode(curHandler)&&  NodeUtil.hasFinally(curHandler))  {	  if(NodeUtil.hasFinally(curHandler)&&    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
106	[BUG]  [BUGGY]  if(lastJump!=  node  ||  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(lastJump!=  node  ||  NodeUtil.hasFinally(curHandler))  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump!=  node  ||  NodeUtil.hasFinally(curHandler))  {	  if(lastJump    ==    null    ||    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
107	[BUG]  [BUGGY]  if(lastJump  ==  null  ||  NodeUtil.isFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(lastJump  ==  null  ||  NodeUtil.isFinally(curHandler))  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  null  ||  NodeUtil.isFinally(curHandler))  {	  if(lastJump    ==    null    ||    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
108	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(curHandler)||  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(NodeUtil.isExpressionNode(curHandler)||  NodeUtil.hasFinally(curHandler))  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isExpressionNode(curHandler)||  NodeUtil.hasFinally(curHandler))  {	  if(NodeUtil.hasFinally(exceptionHandler)||    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
109	[BUG]  [BUGGY]  if(NodeUtil.isFinally(curHandler)&&  curHandler.getLastChild()!=  node)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(NodeUtil.isFinally(curHandler)&&  curHandler.getLastChild()!=  node)  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFinally(curHandler)&&  curHandler.getLastChild()!=  node)  {	  if(NodeUtil.hasFinally(curHandler)||    curHandler.getLastChild()!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
110	[BUG]  [BUGGY]  final  Node  curHandler  =  node.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  final  Node  curHandler  =  node.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	final  Node  curHandler  =  node.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));	      Node    curHandler    =    node.getFirstChild();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
111	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(curHandler)||  curHandler.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(NodeUtil.hasFinally(curHandler)||  curHandler.getType()!=  Token.FUNCTION)  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.hasFinally(curHandler)||  curHandler.getType()!=  Token.FUNCTION)  {	  if(NodeUtil.hasFinally(curHandler)||    curHandler.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
112	[BUG]  [BUGGY]  Node  lastJump  =  curHandler.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  lastJump  =  curHandler.removeFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  curHandler.removeFirstChild();	      Node    lastJump    =    curHandler.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
113	[BUG]  [BUGGY]  if(lastJump  ==  null  ||  finallyMap.containsKey(curHandler.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  if(lastJump  ==  null  ||  finallyMap.containsKey(curHandler.getLastChild()))  {  [BUGGY]    if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  null  ||  finallyMap.containsKey(curHandler.getLastChild()))  {	  if(lastJump    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
114	[BUG]  [BUGGY]  Node  finallyMap  =  curHandler.getfirstChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  finallyMap  =  curHandler.getfirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  finallyMap  =  curHandler.getfirstChild();	      Node    finallyMap    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
115	[BUG]  [BUGGY]  Node  finallyMap  =  iter.getFirstChild();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  finallyMap  =  iter.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  finallyMap  =  iter.getFirstChild();	      Node    finallyMap    =    iter.next();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
116	[BUG]  [BUGGY]  Node  curHandler  =  curHandler.next();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  Node  curHandler  =  curHandler.next();  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  curHandler.next();	      Node    curHandler    =    iter.next();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
117	[BUG]  [BUGGY]  final  Node  lastJump  =  curHandler.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }    [BUGGY]  final  Node  lastJump  =  curHandler.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]    if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	final  Node  lastJump  =  curHandler.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));	      Node    lastJump    =    curHandler.getLastChild();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
