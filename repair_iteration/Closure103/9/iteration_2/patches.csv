bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  curJump  =  node.getLastChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curJump  =  node.getLastChild();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curJump  =  node.getLastChild();	  Node    curJump    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
2	[BUG]  [BUGGY]  Node  curJump  =  curHandler.getLastChild();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curJump  =  curHandler.getLastChild();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curJump  =  curHandler.getLastChild();	  Node    curJump    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
3	[BUG]  [BUGGY]  Node  curJump  =  node.getNext();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curJump  =  node.getNext();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curJump  =  node.getNext();	  Node    curJump    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
4	[BUG]  [BUGGY]  if(node  ==  lastJump  ||  finallyMap.containsKey(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(node  ==  lastJump  ||  finallyMap.containsKey(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(node  ==  lastJump  ||  finallyMap.containsKey(curHandler))  {	  if(lastJump    ==    node    ||    finallyMap.containsKey(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
5	[BUG]  [BUGGY]  if(lastJump!=  node  ||  finallyMap.containsKey(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump!=  node  ||  finallyMap.containsKey(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump!=  node  ||  finallyMap.containsKey(curHandler))  {	  if(lastJump    ==    node    ||    finallyMap.containsKey(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
6	[BUG]  [BUGGY]  if(lastJump  ==  node  ||  finallyMap.containsKey(exceptionHandler))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  node  ||  finallyMap.containsKey(exceptionHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  node  ||  finallyMap.containsKey(exceptionHandler))  {	  if(lastJump    ==    node    ||    finallyMap.containsKey(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
7	[BUG]  [BUGGY]  if(curHandler  ==  lastJump  ||  finallyMap.containsKey(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(curHandler  ==  lastJump  ||  finallyMap.containsKey(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(curHandler  ==  lastJump  ||  finallyMap.containsKey(curHandler))  {	  if(lastJump    ==    node    ||    finallyMap.containsKey(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
8	[BUG]  [BUGGY]  Node  lastJump  =  curHandler.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  lastJump  =  curHandler.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  curHandler.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));	  Node    lastJump    =    curHandler.getLastChild();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getFirstChild()));    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
9	[BUG]  [BUGGY]  Node  lastJump  =  node.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  lastJump  =  node.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  node.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));	  Node    lastJump    =    curHandler.getLastChild();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getFirstChild()));    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
10	[BUG]  [BUGGY]  Node  lastJump  =  curHandler.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getString()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  lastJump  =  curHandler.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getString()));  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  curHandler.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getString()));	  Node    lastJump    =    curHandler.getLastChild();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getString()));    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
11	[BUG]  [BUGGY]  Node  lastJump  =  node.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getString()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  lastJump  =  node.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getString()));  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  node.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getString()));	  Node    lastJump    =    curHandler.getLastChild();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getString()));    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
12	[BUG]  [BUGGY]  finalJump  =  curHandler.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getString()));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  finalJump  =  curHandler.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getString()));  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	finalJump  =  curHandler.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getString()));	  Node    lastJump    =    curHandler.getLastChild();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getString()));    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
13	[BUG]  [BUGGY]  Node  curHandler  =  curHandler.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getString()));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curHandler  =  curHandler.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getString()));  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  curHandler.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getString()));	  Node    lastJump    =    curHandler.getLastChild();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getString()));    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
14	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(curHandler)&&  curHandler.getFirstChild()!=  node)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.hasFinally(curHandler)&&  curHandler.getFirstChild()!=  node)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.hasFinally(curHandler)&&  curHandler.getFirstChild()!=  node)  {	  if(NodeUtil.hasFinally(curHandler)||    curHandler.getFirstChild()!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
15	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(curHandler)||  curHandler.getFirstChild()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.hasFinally(curHandler)||  curHandler.getFirstChild()  ==  node)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.hasFinally(curHandler)||  curHandler.getFirstChild()  ==  node)  {	  if(NodeUtil.hasFinally(curHandler)||    curHandler.getFirstChild()!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
16	[BUG]  [BUGGY]  if(NodeUtil.isFunction(curHandler)||  curHandler.getFirstChild()!=  node)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(curHandler)||  curHandler.getFirstChild()!=  node)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(curHandler)||  curHandler.getFirstChild()!=  node)  {	  if(NodeUtil.hasFinally(curHandler)||    curHandler.getFirstChild()!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
17	[BUG]  [BUGGY]  if(node  ==  lastJump  ||  curHandler.getLastChild()!=  node)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(node  ==  lastJump  ||  curHandler.getLastChild()!=  node)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(node  ==  lastJump  ||  curHandler.getLastChild()!=  node)  {	  if(lastJump    ==    node    ||    curHandler.getLastChild()!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
18	[BUG]  [BUGGY]  if(lastJump  ==  node  ||  curHandler.getFirstChild()!=  node)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  node  ||  curHandler.getFirstChild()!=  node)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  node  ||  curHandler.getFirstChild()!=  node)  {	  if(lastJump    ==    node    ||    curHandler.getLastChild()!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
19	[BUG]  [BUGGY]  if(lastJump!=  node  ||  curHandler.getLastChild()!=  node)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump!=  node  ||  curHandler.getLastChild()!=  node)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump!=  node  ||  curHandler.getLastChild()!=  node)  {	  if(lastJump    ==    node    ||    curHandler.getLastChild()!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
20	[BUG]  [BUGGY]  if(curHandler.getLastChild()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(curHandler.getLastChild()  ==  node)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(curHandler.getLastChild()  ==  node)  {	  if(lastJump    ==    node    ||    curHandler.getLastChild()!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
21	[BUG]  [BUGGY]  Node  curHandler  =  curHandler.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curHandler  =  curHandler.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  curHandler.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));	  Node    curHandler    =    lastJump.getFirstChild();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
22	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(curHandler)&&  NodeUtil.hasFinally(lastJump))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.hasFinally(curHandler)&&  NodeUtil.hasFinally(lastJump))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.hasFinally(curHandler)&&  NodeUtil.hasFinally(lastJump))  {	  if(NodeUtil.hasFinally(lastJump)&&    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
23	[BUG]  [BUGGY]  if(NodeUtil.isFunction(curHandler)&&  NodeUtil.hasFinally(lastJump))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(curHandler)&&  NodeUtil.hasFinally(lastJump))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(curHandler)&&  NodeUtil.hasFinally(lastJump))  {	  if(NodeUtil.hasFinally(lastJump)&&    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
24	[BUG]  [BUGGY]  if(NodeUtil.isFinally(curHandler)&&  NodeUtil.hasFinally(lastJump))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFinally(curHandler)&&  NodeUtil.hasFinally(lastJump))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFinally(curHandler)&&  NodeUtil.hasFinally(lastJump))  {	  if(NodeUtil.hasFinally(lastJump)&&    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
25	[BUG]  [BUGGY]  if(finallyMap!=  null  ||  finallyMap.containsKey(curHandler.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(finallyMap!=  null  ||  finallyMap.containsKey(curHandler.getLastChild()))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(finallyMap!=  null  ||  finallyMap.containsKey(curHandler.getLastChild()))  {	  if(finallyMap!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
26	[BUG]  [BUGGY]  if(finallyMap!=  null  ||  finallyMap.contains(curHandler.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(finallyMap!=  null  ||  finallyMap.contains(curHandler.getLastChild()))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(finallyMap!=  null  ||  finallyMap.contains(curHandler.getLastChild()))  {	  if(finallyMap!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
27	[BUG]  [BUGGY]  if(finallyMap  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(finallyMap  ==  null)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(finallyMap  ==  null)  {	  if(finallyMap!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
28	[BUG]  [BUGGY]  if(finallyMap!=  null  ||  finallyMap.containsKey(curHandler.getFirstChild()))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(finallyMap!=  null  ||  finallyMap.containsKey(curHandler.getFirstChild()))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(finallyMap!=  null  ||  finallyMap.containsKey(curHandler.getFirstChild()))  {	  if(finallyMap!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
29	[BUG]  [BUGGY]  Node  curJump  =  curHandler.getNext();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curJump  =  curHandler.getNext();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curJump  =  curHandler.getNext();	  Node    curJump    =    curHandler.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
30	[BUG]  [BUGGY]  Node  curJump  =  curHandler.getParent();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curJump  =  curHandler.getParent();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curJump  =  curHandler.getParent();	  Node    curJump    =    curHandler.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
31	[BUG]  [BUGGY]  Node  finallyMap  =  iter.getLastChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  finallyMap  =  iter.getLastChild();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  finallyMap  =  iter.getLastChild();	  Node    finallyMap    =    iter.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
32	[BUG]  [BUGGY]  if(lastJump  ==  null  &&  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  null  &&  NodeUtil.hasFinally(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  null  &&  NodeUtil.hasFinally(curHandler))  {	  if(lastJump!=    null    ||    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
33	[BUG]  [BUGGY]  if(lastJump!=  null  &&  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump!=  null  &&  NodeUtil.hasFinally(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump!=  null  &&  NodeUtil.hasFinally(curHandler))  {	  if(lastJump!=    null    ||    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
34	[BUG]  [BUGGY]  Node  curHandler  =  curHandler.getNext();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curHandler  =  curHandler.getNext();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  curHandler.getNext();	  Node    curHandler    =    iter.getNext();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
35	[BUG]  [BUGGY]  Node  curHandler  =  iter.getParent();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curHandler  =  iter.getParent();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  iter.getParent();	  Node    curHandler    =    iter.getNext();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
36	[BUG]  [BUGGY]  Node  curHandler  =  curHandler.getFirstChild();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curHandler  =  curHandler.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  curHandler.getFirstChild();	  Node    curHandler    =    curHandler.next();    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
37	[BUG]  [BUGGY]  Node  curHandler  =  curHandler.getLastChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curHandler  =  curHandler.getLastChild();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  curHandler.getLastChild();	  Node    curHandler    =    curHandler.next();    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
38	[BUG]  [BUGGY]  Node  curHandler  =  iter.getLastChild()  -  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curHandler  =  iter.getLastChild()  -  1;  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  iter.getLastChild()  -  1;	  Node    curHandler    =    iter.next()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
39	[BUG]  [BUGGY]  Node  curHandler  =  iter.getFirstChild()  -  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curHandler  =  iter.getFirstChild()  -  1;  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  iter.getFirstChild()  -  1;	  Node    curHandler    =    iter.next()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
40	[BUG]  [BUGGY]  Node  curHandler  =  iter.getNext()  -  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curHandler  =  iter.getNext()  -  1;  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  iter.getNext()  -  1;	  Node    curHandler    =    iter.next()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
41	[BUG]  [BUGGY]  Node  curHandler  =  iter.getNext()  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curHandler  =  iter.getNext()  +  1;  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  iter.getNext()  +  1;	  Node    curHandler    =    iter.next()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
42	[BUG]  [BUGGY]  Node  curHandler  =  itser.next();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curHandler  =  itser.next();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  itser.next();	  Node    curHandler    =    iter.next()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
43	[BUG]  [BUGGY]  Node  curHandler  =  Iterator.next();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curHandler  =  Iterator.next();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  Iterator.next();	  Node    curHandler    =    iter.next()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
44	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(curHandler)||  NodeUtil.isExpressionNode(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isExpressionNode(curHandler)||  NodeUtil.isExpressionNode(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isExpressionNode(curHandler)||  NodeUtil.isExpressionNode(curHandler))  {	  if(NodeUtil.isExpressionNode(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
45	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(curHandler)||  curHandler.getType()  ==  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isExpressionNode(curHandler)||  curHandler.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isExpressionNode(curHandler)||  curHandler.getType()  ==  Token.EXPR_RESULT)  {	  if(NodeUtil.isExpressionNode(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
46	[BUG]  [BUGGY]  if(!NodeUtil.isExpressionNode(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(!NodeUtil.isExpressionNode(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(!NodeUtil.isExpressionNode(curHandler))  {	  if(NodeUtil.isExpressionNode(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
47	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(curHandler)||  curHandler.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isExpressionNode(curHandler)||  curHandler.getType()  ==  Token.GETPROP)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isExpressionNode(curHandler)||  curHandler.getType()  ==  Token.GETPROP)  {	  if(NodeUtil.isExpressionNode(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
48	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(curHandler)&&  NodeUtil.hasFinally(exceptionHandler))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.hasFinally(curHandler)&&  NodeUtil.hasFinally(exceptionHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.hasFinally(curHandler)&&  NodeUtil.hasFinally(exceptionHandler))  {	  if(NodeUtil.hasFinally(exceptionHandler)&&    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
49	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(curHandler)&&  NodeUtil.hasFinally(exceptionHandler))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isExpressionNode(curHandler)&&  NodeUtil.hasFinally(exceptionHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isExpressionNode(curHandler)&&  NodeUtil.hasFinally(exceptionHandler))  {	  if(NodeUtil.hasFinally(exceptionHandler)&&    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
50	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(curHandler)||  NodeUtil.hasFinally(lastJump))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.hasFinally(curHandler)||  NodeUtil.hasFinally(lastJump))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.hasFinally(curHandler)||  NodeUtil.hasFinally(lastJump))  {	  if(NodeUtil.hasFinally(lastJump)||    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
51	[BUG]  [BUGGY]  if(NodeUtil.isFunction(curHandler)||  NodeUtil.hasFinally(lastJump))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(curHandler)||  NodeUtil.hasFinally(lastJump))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(curHandler)||  NodeUtil.hasFinally(lastJump))  {	  if(NodeUtil.hasFinally(lastJump)||    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
52	[BUG]  [BUGGY]  if(NodeUtil.isFinally(curHandler)||  NodeUtil.hasFinally(lastJump))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFinally(curHandler)||  NodeUtil.hasFinally(lastJump))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFinally(curHandler)||  NodeUtil.hasFinally(lastJump))  {	  if(NodeUtil.hasFinally(lastJump)||    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
53	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(node)||  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.hasFinally(node)||  NodeUtil.hasFinally(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.hasFinally(node)||  NodeUtil.hasFinally(curHandler))  {	  if(NodeUtil.hasFinally(lastJump)||    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
54	[BUG]  [BUGGY]  if(NodeUtil.isFunction(exceptionHandler)&&  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(exceptionHandler)&&  NodeUtil.hasFinally(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(exceptionHandler)&&  NodeUtil.hasFinally(curHandler))  {	  if(NodeUtil.isFunction(curHandler)&&    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
55	[BUG]  [BUGGY]  if(NodeUtil.isFunction(lastJump)&&  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(lastJump)&&  NodeUtil.hasFinally(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(lastJump)&&  NodeUtil.hasFinally(curHandler))  {	  if(NodeUtil.isFunction(curHandler)&&    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
56	[BUG]  [BUGGY]  if(lastJump!=  node  ||  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump!=  node  ||  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump!=  node  ||  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()))  {	  if(lastJump    ==    node    ||    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()))    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
57	[BUG]  [BUGGY]  if(node  ==  lastJump  ||  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(node  ==  lastJump  ||  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(node  ==  lastJump  ||  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()))  {	  if(lastJump    ==    node    ||    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()))    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
58	[BUG]  [BUGGY]  if(NodeUtil.isFunction(curHandler)&&  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(curHandler)&&  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(curHandler)&&  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()))  {	  if(lastJump    ==    node    ||    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()))    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
59	[BUG]  [BUGGY]  if(NodeUtil.isFunction(node)||  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(node)||  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(node)||  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()))  {	  if(lastJump    ==    node    ||    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()))    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
60	[BUG]  [BUGGY]  Node  finallyMap  =  curHandler.getlastChild();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  finallyMap  =  curHandler.getlastChild();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  finallyMap  =  curHandler.getlastChild();	  Node    finallyMap    =    node.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
61	[BUG]  [BUGGY]  Node  curHandler  =  node.getFirstChild();  finallyMap.put(curHandler,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curHandler  =  node.getFirstChild();  finallyMap.put(curHandler,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  node.getFirstChild();  finallyMap.put(curHandler,  computeFallThrough(curHandler.getLastChild()));	  Node    lastJump    =    node.getFirstChild();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
62	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(curHandler)&&  curHandler.getLastChild()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.hasFinally(curHandler)&&  curHandler.getLastChild()  ==  node)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.hasFinally(curHandler)&&  curHandler.getLastChild()  ==  node)  {	  if(NodeUtil.hasFinally(curHandler)&&    curHandler.getLastChild()!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
63	[BUG]  [BUGGY]  if(NodeUtil.isFunction(curHandler)&&  NodeUtil.isExpressionNode(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(curHandler)&&  NodeUtil.isExpressionNode(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(curHandler)&&  NodeUtil.isExpressionNode(curHandler))  {	  if(NodeUtil.isFunction(curHandler)||    NodeUtil.isExpressionNode(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
64	[BUG]  [BUGGY]  if(NodeUtil.isFunction(exceptionHandler)||  NodeUtil.isExpressionNode(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(exceptionHandler)||  NodeUtil.isExpressionNode(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(exceptionHandler)||  NodeUtil.isExpressionNode(curHandler))  {	  if(NodeUtil.isFunction(curHandler)||    NodeUtil.isExpressionNode(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
65	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(curHandler)&&  NodeUtil.isExpressionNode(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isExpressionNode(curHandler)&&  NodeUtil.isExpressionNode(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isExpressionNode(curHandler)&&  NodeUtil.isExpressionNode(curHandler))  {	  if(NodeUtil.isFunction(curHandler)||    NodeUtil.isExpressionNode(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
66	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(curHandler)||  NodeUtil.isFunction(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isExpressionNode(curHandler)||  NodeUtil.isFunction(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isExpressionNode(curHandler)||  NodeUtil.isFunction(curHandler))  {	  if(NodeUtil.isFunction(curHandler)||    NodeUtil.isExpressionNode(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
67	[BUG]  [BUGGY]  if(lastJump  ==  node  ||  NodeUtil.isFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  node  ||  NodeUtil.isFinally(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  node  ||  NodeUtil.isFinally(curHandler))  {	  if(lastJump    ==    null    ||    NodeUtil.isFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
68	[BUG]  [BUGGY]  if(curHandler  ==  null  ||  NodeUtil.isFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(curHandler  ==  null  ||  NodeUtil.isFinally(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(curHandler  ==  null  ||  NodeUtil.isFinally(curHandler))  {	  if(lastJump    ==    null    ||    NodeUtil.isFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
69	[BUG]  [BUGGY]  if(curHandler  ==  null  ||  NodeUtil.isFinally(lastJump))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(curHandler  ==  null  ||  NodeUtil.isFinally(lastJump))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(curHandler  ==  null  ||  NodeUtil.isFinally(lastJump))  {	  if(lastJump    ==    null    ||    NodeUtil.isFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
70	[BUG]  [BUGGY]  if(NodeUtil.isFinally(curHandler)||  NodeUtil.isFinally(curJump))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFinally(curHandler)||  NodeUtil.isFinally(curJump))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFinally(curHandler)||  NodeUtil.isFinally(curJump))  {	  if(lastJump    ==    null    ||    NodeUtil.isFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
71	[BUG]  [BUGGY]  Node  finallyMap  =  curHandler.next(),  iter.getLastChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  finallyMap  =  curHandler.next(),  iter.getLastChild());  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  finallyMap  =  curHandler.next(),  iter.getLastChild());	  Node    finallyMap    =    iter.next(),    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
72	[BUG]  [BUGGY]  Node  finallyMap  =  iter.next(),  curHandler.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  finallyMap  =  iter.next(),  curHandler.getFirstChild());  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  finallyMap  =  iter.next(),  curHandler.getFirstChild());	  Node    finallyMap    =    iter.next(),    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
73	[BUG]  [BUGGY]  Node  finallyMap  =  iter.next(),  curHandler.getLastChild(),  node);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  finallyMap  =  iter.next(),  curHandler.getLastChild(),  node);  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  finallyMap  =  iter.next(),  curHandler.getLastChild(),  node);	  Node    finallyMap    =    iter.next(),    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
74	[BUG]  [BUGGY]  Node  finallyMap  =  curHandler.next(),  curHandler.getLastChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  finallyMap  =  curHandler.next(),  curHandler.getLastChild());  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  finallyMap  =  curHandler.next(),  curHandler.getLastChild());	  Node    finallyMap    =    iter.next(),    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
75	[BUG]  [BUGGY]  if(node  ==  lastJump  ||  computeFallThrough(curHandler.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(node  ==  lastJump  ||  computeFallThrough(curHandler.getLastChild()))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(node  ==  lastJump  ||  computeFallThrough(curHandler.getLastChild()))  {	  if(lastJump    ==    node    ||    computeFallThrough(curHandler.getLastChild()))    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
76	[BUG]  [BUGGY]  if(curHandler.getLastChild()  ==  node  ||  computeFallThrough(curHandler.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(curHandler.getLastChild()  ==  node  ||  computeFallThrough(curHandler.getLastChild()))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(curHandler.getLastChild()  ==  node  ||  computeFallThrough(curHandler.getLastChild()))  {	  if(lastJump    ==    node    ||    computeFallThrough(curHandler.getLastChild()))    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
77	[BUG]  [BUGGY]  if(lastJump!=  node  ||  computeFallThrough(curHandler.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump!=  node  ||  computeFallThrough(curHandler.getLastChild()))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump!=  node  ||  computeFallThrough(curHandler.getLastChild()))  {	  if(lastJump    ==    node    ||    computeFallThrough(curHandler.getLastChild()))    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
78	[BUG]  [BUGGY]  if(lastJump  ==  null  ||  computeFallThrough(curHandler.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  null  ||  computeFallThrough(curHandler.getLastChild()))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  null  ||  computeFallThrough(curHandler.getLastChild()))  {	  if(lastJump    ==    node    ||    computeFallThrough(curHandler.getLastChild()))    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
79	[BUG]  [BUGGY]  if(NodeUtil.isFunction(curHandler)||  curHandler.getLastChild()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(curHandler)||  curHandler.getLastChild()  ==  node)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(curHandler)||  curHandler.getLastChild()  ==  node)  {	  if(NodeUtil.hasFinally(curHandler)||    curHandler.getLastChild()    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
80	[BUG]  [BUGGY]  if(NodeUtil.isFinally(curHandler)&&  curHandler.getLastChild()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFinally(curHandler)&&  curHandler.getLastChild()  ==  node)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFinally(curHandler)&&  curHandler.getLastChild()  ==  node)  {	  if(NodeUtil.hasFinally(curHandler)||    curHandler.getLastChild()    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
81	[BUG]  [BUGGY]  Node  finallyMap  =  curHandler.getNext();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  finallyMap  =  curHandler.getNext();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  finallyMap  =  curHandler.getNext();	  Node    finallyMap    =    curHandler.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
82	[BUG]  [BUGGY]  Node  finallyMap  =  curHandler.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  finallyMap  =  curHandler.removeFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  finallyMap  =  curHandler.removeFirstChild();	  Node    finallyMap    =    curHandler.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
83	[BUG]  [BUGGY]  if(NodeUtil.isFinally(curHandler)&&  curHandler.getFirstChild()!=  node)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFinally(curHandler)&&  curHandler.getFirstChild()!=  node)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFinally(curHandler)&&  curHandler.getFirstChild()!=  node)  {	  if(NodeUtil.isFinally(curHandler)&&    curHandler.getLastChild()!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
84	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(curHandler)&&  curHandler.getLastChild()!=  node)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isExpressionNode(curHandler)&&  curHandler.getLastChild()!=  node)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isExpressionNode(curHandler)&&  curHandler.getLastChild()!=  node)  {	  if(NodeUtil.isFinally(curHandler)&&    curHandler.getLastChild()!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
85	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(lastJump)||  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isExpressionNode(lastJump)||  NodeUtil.hasFinally(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isExpressionNode(lastJump)||  NodeUtil.hasFinally(curHandler))  {	  if(NodeUtil.isExpressionNode(curHandler)||    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
86	[BUG]  [BUGGY]  if(!NodeUtil.isExpressionNode(curHandler)&&  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(!NodeUtil.isExpressionNode(curHandler)&&  NodeUtil.hasFinally(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(!NodeUtil.isExpressionNode(curHandler)&&  NodeUtil.hasFinally(curHandler))  {	  if(NodeUtil.isExpressionNode(curHandler)||    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
87	[BUG]  [BUGGY]  if(NodeUtil.isFunction(lastJump)||  NodeUtil.isExpressionNode(lastJump))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(lastJump)||  NodeUtil.isExpressionNode(lastJump))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(lastJump)||  NodeUtil.isExpressionNode(lastJump))  {	  if(NodeUtil.isFunction(exceptionHandler)||    NodeUtil.isExpressionNode(exceptionHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
88	[BUG]  [BUGGY]  if(NodeUtil.isFunction(lastJump)||  NodeUtil.isExpressionNode(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(lastJump)||  NodeUtil.isExpressionNode(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(lastJump)||  NodeUtil.isExpressionNode(curHandler))  {	  if(NodeUtil.isFunction(exceptionHandler)||    NodeUtil.isExpressionNode(exceptionHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
89	[BUG]  [BUGGY]  if(NodeUtil.isFunction(node)||  NodeUtil.isExpressionNode(node))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(node)||  NodeUtil.isExpressionNode(node))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(node)||  NodeUtil.isExpressionNode(node))  {	  if(NodeUtil.isFunction(exceptionHandler)||    NodeUtil.isExpressionNode(exceptionHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
90	[BUG]  [BUGGY]  Node  curHandler  =  iter.getLastChild();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curHandler  =  iter.getLastChild();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  iter.getLastChild();	  Node    curHandler    =    iter.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
91	[BUG]  [BUGGY]  Node  curHandler  =  curHandler.getNext();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curHandler  =  curHandler.getNext();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  curHandler.getNext();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));	  Node    curHandler    =    curHandler.getFirstChild();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
92	[BUG]  [BUGGY]  if(!NodeUtil.isExpressionNode(curHandler)&&  NodeUtil.hasFinally(exceptionHandler))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(!NodeUtil.isExpressionNode(curHandler)&&  NodeUtil.hasFinally(exceptionHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(!NodeUtil.isExpressionNode(curHandler)&&  NodeUtil.hasFinally(exceptionHandler))  {	  if(NodeUtil.isExpressionNode(curHandler)||    NodeUtil.hasFinally(exceptionHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
93	[BUG]  [BUGGY]  Node  finallyMap  =  curHandler.remove();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  finallyMap  =  curHandler.remove();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  finallyMap  =  curHandler.remove();	  Node    finallyMap    =    iter.remove();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
94	[BUG]  [BUGGY]  if(!NodeUtil.hasFinally(curHandler)&&!NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(!NodeUtil.hasFinally(curHandler)&&!NodeUtil.hasFinally(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(!NodeUtil.hasFinally(curHandler)&&!NodeUtil.hasFinally(curHandler))  {	  if(!NodeUtil.hasFinally(curHandler)||!NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
95	[BUG]  [BUGGY]  if(!NodeUtil.isFunction(curHandler)||!NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(!NodeUtil.isFunction(curHandler)||!NodeUtil.hasFinally(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(!NodeUtil.isFunction(curHandler)||!NodeUtil.hasFinally(curHandler))  {	  if(!NodeUtil.hasFinally(curHandler)||!NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
96	[BUG]  [BUGGY]  if(NodeUtil.isFunction(curHandler)||!NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(curHandler)||!NodeUtil.hasFinally(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(curHandler)||!NodeUtil.hasFinally(curHandler))  {	  if(!NodeUtil.hasFinally(curHandler)||!NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
97	[BUG]  [BUGGY]  if(curHandler  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(curHandler  ==  null)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(curHandler  ==  null)  {	  if(curHandler!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
98	[BUG]  [BUGGY]  if(curHandler!=  null  ||  curHandler.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(curHandler!=  null  ||  curHandler.getType()  ==  Token.GETPROP)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(curHandler!=  null  ||  curHandler.getType()  ==  Token.GETPROP)  {	  if(curHandler!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
99	[BUG]  [BUGGY]  if(curHandler!=  null  ||  curHandler.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(curHandler!=  null  ||  curHandler.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(curHandler!=  null  ||  curHandler.getType()  ==  Token.FUNCTION)  {	  if(curHandler!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
100	[BUG]  [BUGGY]  if(!NodeUtil.isFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(!NodeUtil.isFinally(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(!NodeUtil.isFinally(curHandler))  {	  if(NodeUtil.isFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
101	[BUG]  [BUGGY]  if(NodeUtil.isFinally(curHandler)||  NodeUtil.isExpressionNode(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFinally(curHandler)||  NodeUtil.isExpressionNode(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFinally(curHandler)||  NodeUtil.isExpressionNode(curHandler))  {	  if(NodeUtil.isFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
102	[BUG]  [BUGGY]  if(NodeUtil.isFinally(curHandler)||  curHandler.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFinally(curHandler)||  curHandler.getType()  ==  Token.GETPROP)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFinally(curHandler)||  curHandler.getType()  ==  Token.GETPROP)  {	  if(NodeUtil.isFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
103	[BUG]  [BUGGY]  if(NodeUtil.isFinally(curHandler)||  curHandler.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFinally(curHandler)||  curHandler.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFinally(curHandler)||  curHandler.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
104	[BUG]  [BUGGY]  if(node  ==  lastJump  ||  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild())))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(node  ==  lastJump  ||  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild())))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(node  ==  lastJump  ||  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild())))  {	  if(lastJump    ==    node    ||    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild())))    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
105	[BUG]  [BUGGY]  if(lastJump!=  node  ||  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild())))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump!=  node  ||  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild())))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump!=  node  ||  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild())))  {	  if(lastJump    ==    node    ||    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild())))    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
106	[BUG]  [BUGGY]  if(NodeUtil.isFunction(curHandler)&&  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild())))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(curHandler)&&  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild())))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(curHandler)&&  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild())))  {	  if(lastJump    ==    node    ||    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild())))    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
107	[BUG]  [BUGGY]  if(NodeUtil.isFunction(node)||  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild())))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(node)||  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild())))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(node)||  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild())))  {	  if(lastJump    ==    node    ||    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild())))    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
108	[BUG]  [BUGGY]  Node  curHandler  =  node.getLastChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curHandler  =  node.getLastChild();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  node.getLastChild();	  Node    curHandler    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
109	[BUG]  [BUGGY]  Node  firstJump  =  node.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  firstJump  =  node.removeFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  firstJump  =  node.removeFirstChild();	  Node    firstJump    =    curHandler.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
110	[BUG]  [BUGGY]  Node  curHandler  =  iter.getNext();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curHandler  =  iter.getNext();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  iter.getNext();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));	  Node    curHandler    =    iter.next();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getFirstChild()));    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
111	[BUG]  [BUGGY]  if(NodeUtil.isFinally(curHandler)&&  NodeUtil.hasFinally(exceptionHandler))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFinally(curHandler)&&  NodeUtil.hasFinally(exceptionHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFinally(curHandler)&&  NodeUtil.hasFinally(exceptionHandler))  {	  if(NodeUtil.isFinally(curHandler)||    NodeUtil.hasFinally(exceptionHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
112	[BUG]  [BUGGY]  if(NodeUtil.isFinally(curHandler)||  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFinally(curHandler)||  NodeUtil.hasFinally(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFinally(curHandler)||  NodeUtil.hasFinally(curHandler))  {	  if(NodeUtil.isFinally(curHandler)||    NodeUtil.hasFinally(exceptionHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
113	[BUG]  [BUGGY]  if(!NodeUtil.isFinally(curHandler)&&  NodeUtil.hasFinally(exceptionHandler))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(!NodeUtil.isFinally(curHandler)&&  NodeUtil.hasFinally(exceptionHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(!NodeUtil.isFinally(curHandler)&&  NodeUtil.hasFinally(exceptionHandler))  {	  if(NodeUtil.isFinally(curHandler)||    NodeUtil.hasFinally(exceptionHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
114	[BUG]  [BUGGY]  Node  lastJump  =  curHandler.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(lastJump));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  lastJump  =  curHandler.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(lastJump));  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  curHandler.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(lastJump));	  Node    lastJump    =    node.getLastChild();    finallyMap.put(lastJump,    computeFallThrough(lastJump));    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
115	[BUG]  [BUGGY]  Node  lastJump  =  iter.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  lastJump  =  iter.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  iter.getFirstChild();	  Node    lastJump    =    iter.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
116	[BUG]  [BUGGY]  if(NodeUtil.isFunction(lastJump)||  NodeUtil.isFunction(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(lastJump)||  NodeUtil.isFunction(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(lastJump)||  NodeUtil.isFunction(curHandler))  {	  if(NodeUtil.isFunction(lastJump))    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
117	[BUG]  [BUGGY]  if(curHandler  ==  null  ||  curHandler.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(curHandler  ==  null  ||  curHandler.getType()  ==  Token.GETPROP)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(curHandler  ==  null  ||  curHandler.getType()  ==  Token.GETPROP)  {	  if(lastJump    ==    null    ||    curHandler.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
118	[BUG]  [BUGGY]  if(curHandler  ==  null  ||  lastJump.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(curHandler  ==  null  ||  lastJump.getType()  ==  Token.GETPROP)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(curHandler  ==  null  ||  lastJump.getType()  ==  Token.GETPROP)  {	  if(lastJump    ==    null    ||    curHandler.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
119	[BUG]  [BUGGY]  if(curHandler!=  null  ||  lastJump.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(curHandler!=  null  ||  lastJump.getType()  ==  Token.GETPROP)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(curHandler!=  null  ||  lastJump.getType()  ==  Token.GETPROP)  {	  if(lastJump    ==    null    ||    curHandler.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
120	[BUG]  [BUGGY]  Node  firstJump  =  curHandler.getFirstChild()  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  firstJump  =  curHandler.getFirstChild()  +  1;  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  firstJump  =  curHandler.getFirstChild()  +  1;	  Node    firstJump    =    curHandler.getLastChild()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
121	[BUG]  [BUGGY]  Node  firstJump  =  curHandler.getLastChild()  /  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  firstJump  =  curHandler.getLastChild()  /  1;  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  firstJump  =  curHandler.getLastChild()  /  1;	  Node    firstJump    =    curHandler.getLastChild()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
122	[BUG]  [BUGGY]  Node  curHandler  =(Node)curHandler.next();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curHandler  =(Node)curHandler.next();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =(Node)curHandler.next();	  Node    curHandler    =(Node)iter.next();    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
123	[BUG]  [BUGGY]  Node  curHandler  =(Node)node.next();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curHandler  =(Node)node.next();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =(Node)node.next();	  Node    curHandler    =(Node)iter.next();    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
124	[BUG]  [BUGGY]  Node  curHandler  =(Node)iter.getNext();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curHandler  =(Node)iter.getNext();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =(Node)iter.getNext();	  Node    curHandler    =(Node)iter.next();    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
125	[BUG]  [BUGGY]  final  Node  lastJump  =  curHandler.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  final  Node  lastJump  =  curHandler.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	final  Node  lastJump  =  curHandler.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));	  final    Node    lastJump    =    curHandler.getLastChild();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
126	[BUG]  [BUGGY]  if(node!=  lastJump  ||  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(node!=  lastJump  ||  NodeUtil.hasFinally(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(node!=  lastJump  ||  NodeUtil.hasFinally(curHandler))  {	  if(lastJump!=    node    ||    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
127	[BUG]  [BUGGY]  if(curHandler!=  lastJump  ||  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(curHandler!=  lastJump  ||  NodeUtil.hasFinally(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(curHandler!=  lastJump  ||  NodeUtil.hasFinally(curHandler))  {	  if(lastJump!=    node    ||    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
128	[BUG]  [BUGGY]  if(curHandler!=  node  ||  NodeUtil.hasFinally(lastJump))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(curHandler!=  node  ||  NodeUtil.hasFinally(lastJump))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(curHandler!=  node  ||  NodeUtil.hasFinally(lastJump))  {	  if(lastJump!=    node    ||    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
129	[BUG]  [BUGGY]  Node  finallyMap  =  curHandler.getLastChild(),  node);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  finallyMap  =  curHandler.getLastChild(),  node);  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  finallyMap  =  curHandler.getLastChild(),  node);	  Node    finallyMap    =    curHandler.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
130	[BUG]  [BUGGY]  if(NodeUtil.isFunction(exceptionHandler)||  curHandler.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(exceptionHandler)||  curHandler.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(exceptionHandler)||  curHandler.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isFunction(curHandler)||    curHandler.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
131	[BUG]  [BUGGY]  if(NodeUtil.isFunction(lastJump)||  curHandler.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(lastJump)||  curHandler.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(lastJump)||  curHandler.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isFunction(curHandler)||    curHandler.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
132	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(curHandler)||  curHandler.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isExpressionNode(curHandler)||  curHandler.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isExpressionNode(curHandler)||  curHandler.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isFunction(curHandler)||    curHandler.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
133	[BUG]  [BUGGY]  Node  lastJump  =  curHandler.getFirstChild()  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  lastJump  =  curHandler.getFirstChild()  +  1;  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  curHandler.getFirstChild()  +  1;	  Node    lastJump    =    curHandler.getLastChild()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
134	[BUG]  [BUGGY]  Node  lastJump  =  curHandler.getLastChild()  /  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  lastJump  =  curHandler.getLastChild()  /  1;  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  curHandler.getLastChild()  /  1;	  Node    lastJump    =    curHandler.getLastChild()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
135	[BUG]  [BUGGY]  if(curHandler  ==  null  ||  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(curHandler  ==  null  ||  NodeUtil.hasFinally(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(curHandler  ==  null  ||  NodeUtil.hasFinally(curHandler))  {	  if(curHandler    ==    null    ||    NodeUtil.hasFinally(lastJump))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
136	[BUG]  [BUGGY]  if(curHandler  ==  null  &&  NodeUtil.hasFinally(lastJump))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(curHandler  ==  null  &&  NodeUtil.hasFinally(lastJump))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(curHandler  ==  null  &&  NodeUtil.hasFinally(lastJump))  {	  if(curHandler    ==    null    ||    NodeUtil.hasFinally(lastJump))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
137	[BUG]  [BUGGY]  if(curHandler!=  null  &&  NodeUtil.hasFinally(lastJump))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(curHandler!=  null  &&  NodeUtil.hasFinally(lastJump))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(curHandler!=  null  &&  NodeUtil.hasFinally(lastJump))  {	  if(curHandler    ==    null    ||    NodeUtil.hasFinally(lastJump))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
138	[BUG]  [BUGGY]  if(curHandler  ==  null  ||!NodeUtil.hasFinally(lastJump))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(curHandler  ==  null  ||!NodeUtil.hasFinally(lastJump))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(curHandler  ==  null  ||!NodeUtil.hasFinally(lastJump))  {	  if(lastJump    ==    null    ||!NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
139	[BUG]  [BUGGY]  if(curHandler!=  null  ||!NodeUtil.hasFinally(lastJump))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(curHandler!=  null  ||!NodeUtil.hasFinally(lastJump))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(curHandler!=  null  ||!NodeUtil.hasFinally(lastJump))  {	  if(lastJump    ==    null    ||!NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
140	[BUG]  [BUGGY]  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));	  final    Node    curHandler    =    node.getFirstChild();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
141	[BUG]  [BUGGY]  node  =  node.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  node  =  node.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	node  =  node.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));	  final    Node    curHandler    =    node.getFirstChild();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
142	[BUG]  [BUGGY]  if(NodeUtil.isFinally(curHandler)||  curHandler.getFirstChild()!=  node)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFinally(curHandler)||  curHandler.getFirstChild()!=  node)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFinally(curHandler)||  curHandler.getFirstChild()!=  node)  {	  if(NodeUtil.isFinally(curHandler)||    curHandler.getLastChild()!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
143	[BUG]  [BUGGY]  if(NodeUtil.isFinally(curHandler)||  curHandler.getLastChild()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFinally(curHandler)||  curHandler.getLastChild()  ==  node)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFinally(curHandler)||  curHandler.getLastChild()  ==  node)  {	  if(NodeUtil.isFinally(curHandler)||    curHandler.getLastChild()!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
144	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(curHandler)||  curHandler.getLastChild()!=  node)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isExpressionNode(curHandler)||  curHandler.getLastChild()!=  node)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isExpressionNode(curHandler)||  curHandler.getLastChild()!=  node)  {	  if(NodeUtil.isFinally(curHandler)||    curHandler.getLastChild()!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
145	[BUG]  [BUGGY]  if(!NodeUtil.isFunction(lastJump))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(!NodeUtil.isFunction(lastJump))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(!NodeUtil.isFunction(lastJump))  {	  if(!NodeUtil.isFunction(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
146	[BUG]  [BUGGY]  if(!NodeUtil.isFunction(exceptionHandler))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(!NodeUtil.isFunction(exceptionHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(!NodeUtil.isFunction(exceptionHandler))  {	  if(!NodeUtil.isFunction(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
147	[BUG]  [BUGGY]  if(!NodeUtil.isFunction(curHandler)&&!finallyMap.containsKey(curHandler.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(!NodeUtil.isFunction(curHandler)&&!finallyMap.containsKey(curHandler.getLastChild()))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(!NodeUtil.isFunction(curHandler)&&!finallyMap.containsKey(curHandler.getLastChild()))  {	  if(!NodeUtil.isFunction(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
148	[BUG]  [BUGGY]  if(NodeUtil.isFunction(curHandler)||!NodeUtil.isFunction(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(curHandler)||!NodeUtil.isFunction(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(curHandler)||!NodeUtil.isFunction(curHandler))  {	  if(!NodeUtil.isFunction(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
149	[BUG]  [BUGGY]  if(NodeUtil.isFunction(curHandler)||!NodeUtil.isExpressionNode(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(curHandler)||!NodeUtil.isExpressionNode(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(curHandler)||!NodeUtil.isExpressionNode(curHandler))  {	  if(!NodeUtil.isFunction(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
150	[BUG]  [BUGGY]  if(NodeUtil.isFunction(curHandler)&&  curHandler.getFirstChild()!=  node)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(curHandler)&&  curHandler.getFirstChild()!=  node)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(curHandler)&&  curHandler.getFirstChild()!=  node)  {	  if(NodeUtil.isFunction(curHandler)&&    curHandler.getLastChild()!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
151	[BUG]  [BUGGY]  if(NodeUtil.isFunction(curHandler)&&  curHandler.getLastChild()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(curHandler)&&  curHandler.getLastChild()  ==  node)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(curHandler)&&  curHandler.getLastChild()  ==  node)  {	  if(NodeUtil.isFunction(curHandler)&&    curHandler.getLastChild()!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
152	[BUG]  [BUGGY]  if(NodeUtil.isFunction(lastJump)&&  curHandler.getLastChild()!=  node)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(lastJump)&&  curHandler.getLastChild()!=  node)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(lastJump)&&  curHandler.getLastChild()!=  node)  {	  if(NodeUtil.isFunction(curHandler)&&    curHandler.getLastChild()!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
153	[BUG]  [BUGGY]  if(NodeUtil.isFunction(curHandler)||  curHandler.getLastChild()!=  node)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(curHandler)||  curHandler.getLastChild()!=  node)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(curHandler)||  curHandler.getLastChild()!=  node)  {	  if(NodeUtil.isFunction(curHandler)&&    curHandler.getLastChild()!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
154	[BUG]  [BUGGY]  Node  finallyMap  =  curHandler.next()  -  iter.getLastChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  finallyMap  =  curHandler.next()  -  iter.getLastChild();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  finallyMap  =  curHandler.next()  -  iter.getLastChild();	  Node    finallyMap    =    iter.next()    -    curHandler.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
155	[BUG]  [BUGGY]  Node  finallyMap  =  curHandler.getNext()  -  iter.getLastChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  finallyMap  =  curHandler.getNext()  -  iter.getLastChild();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  finallyMap  =  curHandler.getNext()  -  iter.getLastChild();	  Node    finallyMap    =    iter.next()    -    curHandler.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
156	[BUG]  [BUGGY]  Node  finallyMap  =  iter.next()  -  curHandler.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  finallyMap  =  iter.next()  -  curHandler.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  finallyMap  =  iter.next()  -  curHandler.getFirstChild();	  Node    finallyMap    =    iter.next()    -    curHandler.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
157	[BUG]  [BUGGY]  Node  finallyMap  =  curHandler.getLastChild()  -  iter.next();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  finallyMap  =  curHandler.getLastChild()  -  iter.next();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  finallyMap  =  curHandler.getLastChild()  -  iter.next();	  Node    finallyMap    =    iter.next()    -    curHandler.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
158	[BUG]  [BUGGY]  if(node!=  lastJump)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(node!=  lastJump)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(node!=  lastJump)  {	  if(lastJump!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
159	[BUG]  [BUGGY]  if(curHandler!=  lastJump)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(curHandler!=  lastJump)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(curHandler!=  lastJump)  {	  if(lastJump!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
160	[BUG]  [BUGGY]  if(curHandler!=  node)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(curHandler!=  node)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(curHandler!=  node)  {	  if(lastJump!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
161	[BUG]  [BUGGY]  if(lastJump  ==  null  &&  finallyMap.containsKey(curHandler.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  null  &&  finallyMap.containsKey(curHandler.getLastChild()))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  null  &&  finallyMap.containsKey(curHandler.getLastChild()))  {	  if(lastJump    ==    null    ||    finallyMap.containsKey(curHandler.getLastChild()))    {    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
162	[BUG]  [BUGGY]  if(lastJump!=  null  ||  finallyMap.containsKey(curHandler.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump!=  null  ||  finallyMap.containsKey(curHandler.getLastChild()))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump!=  null  ||  finallyMap.containsKey(curHandler.getLastChild()))  {	  if(lastJump    ==    null    ||    finallyMap.containsKey(curHandler.getLastChild()))    {    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
163	[BUG]  [BUGGY]  if(lastJump  ==  node  ||  finallyMap.containsKey(curHandler.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  node  ||  finallyMap.containsKey(curHandler.getLastChild()))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  node  ||  finallyMap.containsKey(curHandler.getLastChild()))  {	  if(lastJump    ==    null    ||    finallyMap.containsKey(curHandler.getLastChild()))    {    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
164	[BUG]  [BUGGY]  if(curHandler!=  null  ||  finallyMap.containsKey(curHandler.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(curHandler!=  null  ||  finallyMap.containsKey(curHandler.getLastChild()))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(curHandler!=  null  ||  finallyMap.containsKey(curHandler.getLastChild()))  {	  if(lastJump    ==    null    ||    finallyMap.containsKey(curHandler.getLastChild()))    {    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
165	[BUG]  [BUGGY]  if(curHandler  ==  null  ||  NodeUtil.hasFinally(curHandler)&&  NodeUtil.hasFinally(lastJump))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(curHandler  ==  null  ||  NodeUtil.hasFinally(curHandler)&&  NodeUtil.hasFinally(lastJump))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(curHandler  ==  null  ||  NodeUtil.hasFinally(curHandler)&&  NodeUtil.hasFinally(lastJump))  {	  if(lastJump    ==    null    ||    NodeUtil.hasFinally(curHandler)&&    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
166	[BUG]  [BUGGY]  if(lastJump  ==  null  &&  NodeUtil.hasFinally(curHandler)&&  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  null  &&  NodeUtil.hasFinally(curHandler)&&  NodeUtil.hasFinally(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  null  &&  NodeUtil.hasFinally(curHandler)&&  NodeUtil.hasFinally(curHandler))  {	  if(lastJump    ==    null    ||    NodeUtil.hasFinally(curHandler)&&    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
167	[BUG]  [BUGGY]  if(lastJump  ==  node  ||  NodeUtil.hasFinally(curHandler)&&  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  node  ||  NodeUtil.hasFinally(curHandler)&&  NodeUtil.hasFinally(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  node  ||  NodeUtil.hasFinally(curHandler)&&  NodeUtil.hasFinally(curHandler))  {	  if(lastJump    ==    null    ||    NodeUtil.hasFinally(curHandler)&&    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
168	[BUG]  [BUGGY]  Node  curHandler  =  node.getParent();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curHandler  =  node.getParent();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  node.getParent();	  Node    curHandler    =    node.getNext();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
169	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(curHandler)||  exceptionHandler.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.hasFinally(curHandler)||  exceptionHandler.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.hasFinally(curHandler)||  exceptionHandler.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.hasFinally(exceptionHandler)||    curHandler.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
170	[BUG]  [BUGGY]  Node  lastJump  =  node.getNext();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  lastJump  =  node.getNext();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  node.getNext();	  Node    lastJump    =    node.next();    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
171	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(lastJump)&&  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isExpressionNode(lastJump)&&  NodeUtil.hasFinally(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isExpressionNode(lastJump)&&  NodeUtil.hasFinally(curHandler))  {	  if(NodeUtil.isExpressionNode(curHandler)&&    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
172	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(node))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.hasFinally(node))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.hasFinally(node))  {	  if(NodeUtil.hasFinally(lastJump))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
173	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(exceptionHandler)&&  curHandler.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.hasFinally(exceptionHandler)&&  curHandler.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.hasFinally(exceptionHandler)&&  curHandler.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.hasFinally(curHandler)&&    curHandler.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
174	[BUG]  [BUGGY]  if(NodeUtil.isFinally(curHandler)&&  curHandler.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFinally(curHandler)&&  curHandler.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFinally(curHandler)&&  curHandler.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.hasFinally(curHandler)&&    curHandler.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
175	[BUG]  [BUGGY]  Node  curHandler  =  curHandler.next();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curHandler  =  curHandler.next();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  curHandler.next();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));	  Node    curHandler    =    node.next();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
176	[BUG]  [BUGGY]  Node  curHandler  =  node.getNext();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curHandler  =  node.getNext();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  node.getNext();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));	  Node    curHandler    =    node.next();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
177	[BUG]  [BUGGY]  Node  curHandler  =  node.next();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curHandler  =  node.next();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  node.next();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));	  Node    curHandler    =    node.next();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
178	[BUG]  [BUGGY]  Node  curHandler  =  iter.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curHandler  =  iter.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  iter.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));	  Node    curHandler    =    iter.getNext();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
179	[BUG]  [BUGGY]  Node  curHandler  =  iter.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curHandler  =  iter.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  iter.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));	  Node    curHandler    =    iter.getNext();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
180	[BUG]  [BUGGY]  if(NodeUtil.isFunction(exceptionHandler)||  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(exceptionHandler)||  NodeUtil.hasFinally(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(exceptionHandler)||  NodeUtil.hasFinally(curHandler))  {	  if(NodeUtil.isFunction(curHandler)||    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
181	[BUG]  [BUGGY]  if(NodeUtil.isFunction(lastJump)||  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(lastJump)||  NodeUtil.hasFinally(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(lastJump)||  NodeUtil.hasFinally(curHandler))  {	  if(NodeUtil.isFunction(curHandler)||    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
182	[BUG]  [BUGGY]  if(NodeUtil.isName(curHandler)||  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isName(curHandler)||  NodeUtil.hasFinally(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isName(curHandler)||  NodeUtil.hasFinally(curHandler))  {	  if(NodeUtil.isFunction(curHandler)||    NodeUtil.hasFinally(exceptionHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
183	[BUG]  [BUGGY]  if(curHandler  ==  null  ||  NodeUtil.isFunction(lastJump))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(curHandler  ==  null  ||  NodeUtil.isFunction(lastJump))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(curHandler  ==  null  ||  NodeUtil.isFunction(lastJump))  {	  if(lastJump    ==    null    ||    NodeUtil.isFunction(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
184	[BUG]  [BUGGY]  if(NodeUtil.isFunction(curHandler)||  NodeUtil.isFunction(lastJump))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(curHandler)||  NodeUtil.isFunction(lastJump))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(curHandler)||  NodeUtil.isFunction(lastJump))  {	  if(lastJump    ==    null    ||    NodeUtil.isFunction(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
185	[BUG]  [BUGGY]  if(curHandler!=  null  ||  NodeUtil.isFunction(lastJump))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(curHandler!=  null  ||  NodeUtil.isFunction(lastJump))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(curHandler!=  null  ||  NodeUtil.isFunction(lastJump))  {	  if(lastJump    ==    null    ||    NodeUtil.isFunction(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
186	[BUG]  [BUGGY]  Node  finallyMap  =  iter.getParent();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  finallyMap  =  iter.getParent();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  finallyMap  =  iter.getParent();	  Node    finallyMap    =    iter.getNext();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
187	[BUG]  [BUGGY]  if(NodeUtil.isFunction(exceptionHandler)&&  curHandler.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(exceptionHandler)&&  curHandler.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(exceptionHandler)&&  curHandler.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isFunction(curHandler)&&    curHandler.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
188	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(curHandler)&&  curHandler.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isExpressionNode(curHandler)&&  curHandler.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isExpressionNode(curHandler)&&  curHandler.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isFunction(curHandler)&&    curHandler.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
189	[BUG]  [BUGGY]  if(NodeUtil.isFunction(lastJump)&&  curHandler.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(lastJump)&&  curHandler.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(lastJump)&&  curHandler.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isFunction(curHandler)&&    curHandler.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
190	[BUG]  [BUGGY]  if(node  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(node  ==  node)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(node  ==  node)  {	  if(node    ==    lastJump)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
191	[BUG]  [BUGGY]  if(node  ==  curHandler)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(node  ==  curHandler)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(node  ==  curHandler)  {	  if(node    ==    lastJump)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
192	[BUG]  [BUGGY]  if(NodeUtil.isFunction(curHandler)&&  NodeUtil.isFunction(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(curHandler)&&  NodeUtil.isFunction(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(curHandler)&&  NodeUtil.isFunction(curHandler))  {	  if(NodeUtil.isFunction(curHandler)||    NodeUtil.isFunction(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
193	[BUG]  [BUGGY]  Node  lastJump  =  curHandler.getLastChild(),  node,  finallyMap);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  lastJump  =  curHandler.getLastChild(),  node,  finallyMap);  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  curHandler.getLastChild(),  node,  finallyMap);	  Node    lastJump    =    curHandler.getLastChild(),    node);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
194	[BUG]  [BUGGY]  Node  lastJump  =  curHandler.getFirstChild(),  node);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  lastJump  =  curHandler.getFirstChild(),  node);  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  curHandler.getFirstChild(),  node);	  Node    lastJump    =    curHandler.getLastChild(),    node);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
195	[BUG]  [BUGGY]  Node  lastJump  =  curHandler.getLastChild(),  null);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  lastJump  =  curHandler.getLastChild(),  null);  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  curHandler.getLastChild(),  null);	  Node    lastJump    =    curHandler.getLastChild(),    node);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
196	[BUG]  [BUGGY]  Node  lastJump  =  node.getLastChild(),  curHandler);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  lastJump  =  node.getLastChild(),  curHandler);  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  node.getLastChild(),  curHandler);	  Node    lastJump    =    curHandler.getLastChild(),    node);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
197	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(curHandler)&&  NodeUtil.hasFinally(curJump))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.hasFinally(curHandler)&&  NodeUtil.hasFinally(curJump))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.hasFinally(curHandler)&&  NodeUtil.hasFinally(curJump))  {	  if(NodeUtil.hasFinally(curHandler)||    NodeUtil.hasFinally(curJump))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
198	[BUG]  [BUGGY]  if(NodeUtil.isFunction(curHandler)||  NodeUtil.hasFinally(curJump))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(curHandler)||  NodeUtil.hasFinally(curJump))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(curHandler)||  NodeUtil.hasFinally(curJump))  {	  if(NodeUtil.hasFinally(curHandler)||    NodeUtil.hasFinally(curJump))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
199	[BUG]  [BUGGY]  if(NodeUtil.isFunction(curHandler)&&  NodeUtil.hasFinally(curJump))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(curHandler)&&  NodeUtil.hasFinally(curJump))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(curHandler)&&  NodeUtil.hasFinally(curJump))  {	  if(NodeUtil.hasFinally(curHandler)||    NodeUtil.hasFinally(curJump))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
200	[BUG]  [BUGGY]  Node  curHandler  =  lastJump.next();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curHandler  =  lastJump.next();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  lastJump.next();	  Node    curHandler    =    node.next();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
201	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(curHandler)&&  curHandler.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.hasFinally(curHandler)&&  curHandler.getType()!=  Token.FUNCTION)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.hasFinally(curHandler)&&  curHandler.getType()!=  Token.FUNCTION)  {	  if(NodeUtil.hasFinally(curHandler)||    curHandler.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
202	[BUG]  [BUGGY]  if(NodeUtil.isFunction(curHandler)||  curHandler.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(curHandler)||  curHandler.getType()!=  Token.FUNCTION)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(curHandler)||  curHandler.getType()!=  Token.FUNCTION)  {	  if(NodeUtil.hasFinally(curHandler)||    curHandler.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
203	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(exceptionHandler)||  curHandler.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.hasFinally(exceptionHandler)||  curHandler.getType()!=  Token.FUNCTION)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.hasFinally(exceptionHandler)||  curHandler.getType()!=  Token.FUNCTION)  {	  if(NodeUtil.hasFinally(curHandler)||    curHandler.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
204	[BUG]  [BUGGY]  if(NodeUtil.isFunction(curHandler)||  NodeUtil.isFunction(exceptionHandler))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(curHandler)||  NodeUtil.isFunction(exceptionHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(curHandler)||  NodeUtil.isFunction(exceptionHandler))  {	  if(NodeUtil.isFunction(exceptionHandler)||    NodeUtil.isFunction(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
205	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(curHandler)||  NodeUtil.isFunction(exceptionHandler))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isExpressionNode(curHandler)||  NodeUtil.isFunction(exceptionHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isExpressionNode(curHandler)||  NodeUtil.isFunction(exceptionHandler))  {	  if(NodeUtil.isFunction(exceptionHandler)||    NodeUtil.isFunction(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
206	[BUG]  [BUGGY]  if(NodeUtil.isName(curHandler)||  NodeUtil.isFunction(exceptionHandler))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isName(curHandler)||  NodeUtil.isFunction(exceptionHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isName(curHandler)||  NodeUtil.isFunction(exceptionHandler))  {	  if(NodeUtil.isFunction(exceptionHandler)||    NodeUtil.isFunction(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
207	[BUG]  [BUGGY]  if(!NodeUtil.isFunction(curHandler)||  NodeUtil.isFunction(exceptionHandler))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(!NodeUtil.isFunction(curHandler)||  NodeUtil.isFunction(exceptionHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(!NodeUtil.isFunction(curHandler)||  NodeUtil.isFunction(exceptionHandler))  {	  if(NodeUtil.isFunction(exceptionHandler)||    NodeUtil.isFunction(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
208	[BUG]  [BUGGY]  if(curHandler  ==  node  ||  NodeUtil.isFunction(lastJump))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(curHandler  ==  node  ||  NodeUtil.isFunction(lastJump))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(curHandler  ==  node  ||  NodeUtil.isFunction(lastJump))  {	  if(lastJump    ==    node    ||    NodeUtil.isFunction(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
209	[BUG]  [BUGGY]  if(node  ==  lastJump  ||  NodeUtil.isFunction(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(node  ==  lastJump  ||  NodeUtil.isFunction(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(node  ==  lastJump  ||  NodeUtil.isFunction(curHandler))  {	  if(lastJump    ==    node    ||    NodeUtil.isFunction(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
210	[BUG]  [BUGGY]  if(curHandler  ==  lastJump  ||  NodeUtil.isFunction(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(curHandler  ==  lastJump  ||  NodeUtil.isFunction(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(curHandler  ==  lastJump  ||  NodeUtil.isFunction(curHandler))  {	  if(lastJump    ==    node    ||    NodeUtil.isFunction(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
211	[BUG]  [BUGGY]  finalJump  =  node.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  finalJump  =  node.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	finalJump  =  node.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));	  Node    lastJump    =    node.getLastChild();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
212	[BUG]  [BUGGY]  if(curHandler  ==  node  ||  NodeUtil.hasFinally(lastJump))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(curHandler  ==  node  ||  NodeUtil.hasFinally(lastJump))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(curHandler  ==  node  ||  NodeUtil.hasFinally(lastJump))  {	  if(lastJump    ==    node    ||    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
213	[BUG]  [BUGGY]  if(node  ==  lastJump  ||  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(node  ==  lastJump  ||  NodeUtil.hasFinally(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(node  ==  lastJump  ||  NodeUtil.hasFinally(curHandler))  {	  if(lastJump    ==    node    ||    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
214	[BUG]  [BUGGY]  Node  lastJump  =  curHandler.removeLastChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  lastJump  =  curHandler.removeLastChild();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  curHandler.removeLastChild();	  Node    lastJump    =    curHandler.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
215	[BUG]  [BUGGY]  if(curHandler!=  null  ||  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(curHandler!=  null  ||  NodeUtil.hasFinally(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(curHandler!=  null  ||  NodeUtil.hasFinally(curHandler))  {	  if(curHandler!=    null    ||    NodeUtil.hasFinally(lastJump))    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
216	[BUG]  [BUGGY]  Node  curJump  =  curHandler.next();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curJump  =  curHandler.next();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curJump  =  curHandler.next();	  Node    firstJump    =    curHandler.next();    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
217	[BUG]  [BUGGY]  Node  firstJump  =  curHandler.getNext();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  firstJump  =  curHandler.getNext();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  firstJump  =  curHandler.getNext();	  Node    firstJump    =    curHandler.next();    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
218	[BUG]  [BUGGY]  Iterator  <  Node>  curHandler  =  curHandler.next();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Iterator  <  Node>  curHandler  =  curHandler.next();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Iterator  <  Node>  curHandler  =  curHandler.next();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));	  Iterator    <    Node>    curHandler    =    iter.next();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
219	[BUG]  [BUGGY]  Iterator  <  Node>  curHandler  =  node.next();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Iterator  <  Node>  curHandler  =  node.next();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Iterator  <  Node>  curHandler  =  node.next();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));	  Iterator    <    Node>    curHandler    =    iter.next();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
220	[BUG]  [BUGGY]  Iterator  <  Node>  curHandler  =  exceptionHandler.next();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Iterator  <  Node>  curHandler  =  exceptionHandler.next();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Iterator  <  Node>  curHandler  =  exceptionHandler.next();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));	  Iterator    <    Node>    curHandler    =    iter.next();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
221	[BUG]  [BUGGY]  final  Iterator  <  Node>  curHandler  =  iter.next();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  final  Iterator  <  Node>  curHandler  =  iter.next();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	final  Iterator  <  Node>  curHandler  =  iter.next();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));	  Iterator    <    Node>    curHandler    =    iter.next();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
222	[BUG]  [BUGGY]  Node  finallyMap  =  node.getNext();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  finallyMap  =  node.getNext();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  finallyMap  =  node.getNext();	  Node    finallyMap    =    node.next();    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
223	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(exceptionHandler)||  NodeUtil.hasFinally(curJump))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.hasFinally(exceptionHandler)||  NodeUtil.hasFinally(curJump))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.hasFinally(exceptionHandler)||  NodeUtil.hasFinally(curJump))  {	  if(NodeUtil.hasFinally(curHandler)||    NodeUtil.hasFinally(curJump))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
224	[BUG]  [BUGGY]  Node  lastJump  =  node.nextChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  lastJump  =  node.nextChild();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  node.nextChild();	  Node    lastJump    =    curHandler.nextChild();    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
225	[BUG]  [BUGGY]  Node  lastJump  =  curHandler.getLastChild(),  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  lastJump  =  curHandler.getLastChild(),  computeFallThrough(curHandler.getLastChild()));  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  curHandler.getLastChild(),  computeFallThrough(curHandler.getLastChild()));	  Node    lastJump    =    curHandler.getLastChild(),    node);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
226	[BUG]  [BUGGY]  Node  lastJump  =  curHandler.getLastChild(),  computeFallThrough(curHandler.getLastChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  lastJump  =  curHandler.getLastChild(),  computeFallThrough(curHandler.getLastChild());  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  curHandler.getLastChild(),  computeFallThrough(curHandler.getLastChild());	  Node    lastJump    =    curHandler.getLastChild(),    node);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
227	[BUG]  [BUGGY]  if(NodeUtil.isFunction(lastJump)||  NodeUtil.hasFinally(exceptionHandler))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(lastJump)||  NodeUtil.hasFinally(exceptionHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(lastJump)||  NodeUtil.hasFinally(exceptionHandler))  {	  if(NodeUtil.isFunction(curHandler)||    NodeUtil.hasFinally(exceptionHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
228	[BUG]  [BUGGY]  if(lastJump  ==  node  ||  NodeUtil.isFunction(exceptionHandler))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  node  ||  NodeUtil.isFunction(exceptionHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  node  ||  NodeUtil.isFunction(exceptionHandler))  {	  if(lastJump    ==    node    ||    NodeUtil.isFunction(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
229	[BUG]  [BUGGY]  if(lastJump!=  node  ||  NodeUtil.isFunction(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump!=  node  ||  NodeUtil.isFunction(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump!=  node  ||  NodeUtil.isFunction(curHandler))  {	  if(lastJump    ==    node    ||    NodeUtil.isFunction(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
230	[BUG]  [BUGGY]  if(lastJump  ==  node  ||  NodeUtil.isExpressionNode(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  node  ||  NodeUtil.isExpressionNode(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  node  ||  NodeUtil.isExpressionNode(curHandler))  {	  if(lastJump    ==    node    ||    NodeUtil.isFunction(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
231	[BUG]  [BUGGY]  if(NodeUtil.isFinally(exceptionHandler)&&  curHandler.getLastChild()!=  node)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFinally(exceptionHandler)&&  curHandler.getLastChild()!=  node)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFinally(exceptionHandler)&&  curHandler.getLastChild()!=  node)  {	  if(NodeUtil.isFinally(curHandler)&&    curHandler.getLastChild()!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
232	[BUG]  [BUGGY]  Node  firstJump  =  node.nextChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  firstJump  =  node.nextChild();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  firstJump  =  node.nextChild();	  Node    firstJump    =    curHandler.nextChild();    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
233	[BUG]  [BUGGY]  if(finallyMap.containsKey(curHandler)||  NodeUtil.hasFinally(curJump))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(finallyMap.containsKey(curHandler)||  NodeUtil.hasFinally(curJump))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(finallyMap.containsKey(curHandler)||  NodeUtil.hasFinally(curJump))  {	  if(curHandler    ==    null    ||    NodeUtil.hasFinally(lastJump))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
234	[BUG]  [BUGGY]  if(lastJump  ==  node  ||  computeFollowNode(curHandler.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  node  ||  computeFollowNode(curHandler.getLastChild()))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  node  ||  computeFollowNode(curHandler.getLastChild()))  {	  if(lastJump    ==    node    ||    computeFallThrough(curHandler.getLastChild()))    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
235	[BUG]  [BUGGY]  if(lastJump  ==  node  ||  computeFallThrough(curHandler.getFirstChild()))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  node  ||  computeFallThrough(curHandler.getFirstChild()))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  node  ||  computeFallThrough(curHandler.getFirstChild()))  {	  if(lastJump    ==    node    ||    computeFallThrough(curHandler.getLastChild()))    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
236	[BUG]  [BUGGY]  if(lastJump  ==  node  &&  curHandler.getLastChild()!=  node)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  node  &&  curHandler.getLastChild()!=  node)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  node  &&  curHandler.getLastChild()!=  node)  {	  if(lastJump    ==    node    ||    curHandler.getLastChild()!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
237	[BUG]  [BUGGY]  Node  lastJump  =  curHandler.removeFirst();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  lastJump  =  curHandler.removeFirst();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  curHandler.removeFirst();	  Node    lastJump    =    curHandler.next();    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
238	[BUG]  [BUGGY]  Node  lastJump  =  curHandler.next()  -  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  lastJump  =  curHandler.next()  -  1;  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  curHandler.next()  -  1;	  Node    lastJump    =    curHandler.next();    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
239	[BUG]  [BUGGY]  if(lastJump  >=  node)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  >=  node)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  >=  node)  {	  if(lastJump!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
240	[BUG]  [BUGGY]  if(lastJump  ==  node  ||  finallyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  node  ||  finallyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild()))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  node  ||  finallyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild()))  {	  if(lastJump    ==    node    ||    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()))    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
241	[BUG]  [BUGGY]  if(lastJump  ==  node  ||  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  node  ||  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  node  ||  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()))  {	  if(lastJump    ==    node    ||    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()))    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
242	[BUG]  [BUGGY]  if(lastJump  ==  node  ||  finallyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild())))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  node  ||  finallyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild())))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  node  ||  finallyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild())))  {	  if(lastJump    ==    node    ||    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild())))    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
243	[BUG]  [BUGGY]  if(lastJump  ==  node  ||  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild())))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  node  ||  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild())))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  node  ||  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild())))  {	  if(lastJump    ==    node    ||    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild())))    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
244	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(exceptionHandler)||  curHandler.getLastChild()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.hasFinally(exceptionHandler)||  curHandler.getLastChild()  ==  node)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.hasFinally(exceptionHandler)||  curHandler.getLastChild()  ==  node)  {	  if(NodeUtil.hasFinally(curHandler)||    curHandler.getLastChild()    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
245	[BUG]  [BUGGY]  Node  lastJump  =  node.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(lastJump));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  lastJump  =  node.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(lastJump));  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  node.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(lastJump));	  Node    lastJump    =    node.getLastChild();    finallyMap.put(lastJump,    computeFallThrough(lastJump));    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
246	[BUG]  [BUGGY]  if(NodeUtil.isFunction(exceptionHandler)||!NodeUtil.isFunction(curHandler))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(exceptionHandler)||!NodeUtil.isFunction(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(exceptionHandler)||!NodeUtil.isFunction(curHandler))  {	  if(!NodeUtil.isFunction(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
247	[BUG]  [BUGGY]  if(NodeUtil.isFunction(exceptionHandler)||!NodeUtil.isExpressionNode(exceptionHandler))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(exceptionHandler)||!NodeUtil.isExpressionNode(exceptionHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(exceptionHandler)||!NodeUtil.isExpressionNode(exceptionHandler))  {	  if(!NodeUtil.isFunction(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
248	[BUG]  [BUGGY]  if(lastJump  ==  node  ||  NodeUtil.hasFinally(exceptionHandler))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  node  ||  NodeUtil.hasFinally(exceptionHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  node  ||  NodeUtil.hasFinally(exceptionHandler))  {	  if(lastJump!=    node    ||    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
249	[BUG]  [BUGGY]  if(NodeUtil.isFunction(exceptionHandler)&&  curHandler.getLastChild()!=  node)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(exceptionHandler)&&  curHandler.getLastChild()!=  node)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(exceptionHandler)&&  curHandler.getLastChild()!=  node)  {	  if(NodeUtil.isFunction(curHandler)&&    curHandler.getLastChild()!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
250	[BUG]  [BUGGY]  Node  curHandler  =  lastJump.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curHandler  =  lastJump.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  lastJump.getFirstChild();	  Node    curHandler    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
251	[BUG]  [BUGGY]  if(lastJump!=  null  ||  NodeUtil.isFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump!=  null  ||  NodeUtil.isFinally(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump!=  null  ||  NodeUtil.isFinally(curHandler))  {	  if(lastJump    ==    null    ||    NodeUtil.isFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
252	[BUG]  [BUGGY]  if(NodeUtil.isFunction(exceptionHandler)&&  NodeUtil.isFunction(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(exceptionHandler)&&  NodeUtil.isFunction(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(exceptionHandler)&&  NodeUtil.isFunction(curHandler))  {	  if(NodeUtil.isFunction(curHandler)||    NodeUtil.isFunction(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
253	[BUG]  [BUGGY]  if(finalMap!=  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(finalMap!=  null)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(finalMap!=  null)  {	  if(lastJump!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
254	[BUG]  [BUGGY]  if(finallyMap!=  null  ||  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(finallyMap!=  null  ||  NodeUtil.hasFinally(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(finallyMap!=  null  ||  NodeUtil.hasFinally(curHandler))  {	  if(curHandler!=    null    ||    NodeUtil.hasFinally(lastJump))    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
255	[BUG]  [BUGGY]  Node  curJump  =  node.getParent();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curJump  =  node.getParent();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curJump  =  node.getParent();	  Node    curJump    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
256	[BUG]  [BUGGY]  Node  curJump  =  lastJump.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curJump  =  lastJump.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curJump  =  lastJump.getFirstChild();	  Node    curJump    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
257	[BUG]  [BUGGY]  if(NodeUtil.isFunction(exceptionHandler)&&  NodeUtil.isExpressionNode(exceptionHandler))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(exceptionHandler)&&  NodeUtil.isExpressionNode(exceptionHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(exceptionHandler)&&  NodeUtil.isExpressionNode(exceptionHandler))  {	  if(NodeUtil.isFunction(exceptionHandler)||    NodeUtil.isExpressionNode(exceptionHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
258	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(exceptionHandler)||  NodeUtil.isFunction(exceptionHandler))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isExpressionNode(exceptionHandler)||  NodeUtil.isFunction(exceptionHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isExpressionNode(exceptionHandler)||  NodeUtil.isFunction(exceptionHandler))  {	  if(NodeUtil.isFunction(exceptionHandler)||    NodeUtil.isExpressionNode(exceptionHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
259	[BUG]  [BUGGY]  if(NodeUtil.isFinally(exceptionHandler)||  NodeUtil.isFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFinally(exceptionHandler)||  NodeUtil.isFinally(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFinally(exceptionHandler)||  NodeUtil.isFinally(curHandler))  {	  if(NodeUtil.isFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
260	[BUG]  [BUGGY]  if(NodeUtil.isFinally(exceptionHandler))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFinally(exceptionHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFinally(exceptionHandler))  {	  if(NodeUtil.isFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
261	[BUG]  [BUGGY]  if(lastJump  ==  null  ||  finallyMap.containsKey(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  null  ||  finallyMap.containsKey(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  null  ||  finallyMap.containsKey(curHandler))  {	  if(lastJump    ==    node    ||    finallyMap.containsKey(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
262	[BUG]  [BUGGY]  if(NodeUtil.isFinally(exceptionHandler)||  curHandler.getLastChild()!=  node)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFinally(exceptionHandler)||  curHandler.getLastChild()!=  node)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFinally(exceptionHandler)||  curHandler.getLastChild()!=  node)  {	  if(NodeUtil.isFinally(curHandler)||    curHandler.getLastChild()!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
263	[BUG]  [BUGGY]  Node  curHandler  =  exceptionHandler.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curHandler  =  exceptionHandler.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  exceptionHandler.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));	  Node    curHandler    =    lastJump.getFirstChild();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
264	[BUG]  [BUGGY]  Node  curHandler  =  iter.next();  finallyMap.put(lastJump,  computeFollowNode(curHandler.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curHandler  =  iter.next();  finallyMap.put(lastJump,  computeFollowNode(curHandler.getFirstChild()));  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  iter.next();  finallyMap.put(lastJump,  computeFollowNode(curHandler.getFirstChild()));	  Node    curHandler    =    iter.next();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getFirstChild()));    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
265	[BUG]  [BUGGY]  Iterator  <  Node>  curHandler  =  iter.next();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Iterator  <  Node>  curHandler  =  iter.next();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Iterator  <  Node>  curHandler  =  iter.next();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));	  Node    curHandler    =    iter.next();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getFirstChild()));    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
266	[BUG]  [BUGGY]  Node  lastJump  =  curHandler.getLastChild();  finallyMap.put(lastJump,  computeFollowNode(curHandler.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  lastJump  =  curHandler.getLastChild();  finallyMap.put(lastJump,  computeFollowNode(curHandler.getFirstChild()));  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  curHandler.getLastChild();  finallyMap.put(lastJump,  computeFollowNode(curHandler.getFirstChild()));	  Node    lastJump    =    curHandler.getLastChild();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getFirstChild()));    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
267	[BUG]  [BUGGY]  if(NodeUtil.isFunction(node))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(node))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(node))  {	  if(NodeUtil.isFunction(lastJump))    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
268	[BUG]  [BUGGY]  if(NodeUtil.isEmpty(curHandler)||  NodeUtil.isFunction(exceptionHandler))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isEmpty(curHandler)||  NodeUtil.isFunction(exceptionHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isEmpty(curHandler)||  NodeUtil.isFunction(exceptionHandler))  {	  if(NodeUtil.isFunction(exceptionHandler)||    NodeUtil.isFunction(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
269	[BUG]  [BUGGY]  if(lastJump!=  null  ||  curHandler.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump!=  null  ||  curHandler.getType()  ==  Token.GETPROP)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump!=  null  ||  curHandler.getType()  ==  Token.GETPROP)  {	  if(lastJump    ==    null    ||    curHandler.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
270	[BUG]  [BUGGY]  if(lastJump  ==  node  ||  curHandler.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  node  ||  curHandler.getType()  ==  Token.GETPROP)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  node  ||  curHandler.getType()  ==  Token.GETPROP)  {	  if(lastJump    ==    null    ||    curHandler.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
271	[BUG]  [BUGGY]  if(lastJump  ==  null  ||  curHandler.getType()!=  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  null  ||  curHandler.getType()!=  Token.GETPROP)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  null  ||  curHandler.getType()!=  Token.GETPROP)  {	  if(lastJump    ==    null    ||    curHandler.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
272	[BUG]  [BUGGY]  if(lastJump  ==  null  ||  curHandler.getType()  ==  Token.GETELEM)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  null  ||  curHandler.getType()  ==  Token.GETELEM)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  null  ||  curHandler.getType()  ==  Token.GETELEM)  {	  if(lastJump    ==    null    ||    curHandler.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
273	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(exceptionHandler)||  curHandler.getFirstChild()!=  node)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.hasFinally(exceptionHandler)||  curHandler.getFirstChild()!=  node)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.hasFinally(exceptionHandler)||  curHandler.getFirstChild()!=  node)  {	  if(NodeUtil.hasFinally(curHandler)||    curHandler.getFirstChild()!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
274	[BUG]  [BUGGY]  Node  lastJump  =  curHandler.getLastChild();  finallyMap.put(lastJump,  computeFollowNode(curHandler.getString()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  lastJump  =  curHandler.getLastChild();  finallyMap.put(lastJump,  computeFollowNode(curHandler.getString()));  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  curHandler.getLastChild();  finallyMap.put(lastJump,  computeFollowNode(curHandler.getString()));	  Node    lastJump    =    curHandler.getLastChild();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getString()));    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
275	[BUG]  [BUGGY]  Node  curHandler  =  curHandler.removeFirst();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curHandler  =  curHandler.removeFirst();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  curHandler.removeFirst();	  Node    curHandler    =    curHandler.next();    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
276	[BUG]  [BUGGY]  if(NodeUtil.isFunction(curHandler)||  NodeUtil.hasFinally(lastJump)||  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(curHandler)||  NodeUtil.hasFinally(lastJump)||  NodeUtil.hasFinally(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(curHandler)||  NodeUtil.hasFinally(lastJump)||  NodeUtil.hasFinally(curHandler))  {	  if(NodeUtil.hasFinally(lastJump)||    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
277	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(exceptionHandler)||  NodeUtil.hasFinally(lastJump))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.hasFinally(exceptionHandler)||  NodeUtil.hasFinally(lastJump))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.hasFinally(exceptionHandler)||  NodeUtil.hasFinally(lastJump))  {	  if(NodeUtil.hasFinally(lastJump)||    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
278	[BUG]  [BUGGY]  final  Node  curHandler  =  curHandler.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  final  Node  curHandler  =  curHandler.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	final  Node  curHandler  =  curHandler.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));	  Node    curHandler    =    curHandler.getFirstChild();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
279	[BUG]  [BUGGY]  Node  firstJump  =  node.next();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  firstJump  =  node.next();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  firstJump  =  node.next();	  Node    firstJump    =    curHandler.next();    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
280	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(lastJump)||  NodeUtil.hasFinally(exceptionHandler))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isExpressionNode(lastJump)||  NodeUtil.hasFinally(exceptionHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isExpressionNode(lastJump)||  NodeUtil.hasFinally(exceptionHandler))  {	  if(NodeUtil.isExpressionNode(curHandler)||    NodeUtil.hasFinally(exceptionHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
281	[BUG]  [BUGGY]  if(node!=  node)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(node!=  node)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(node!=  node)  {	  if(node    ==    lastJump)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
282	[BUG]  [BUGGY]  if(NodeUtil.isFunction(lastJump)&&  NodeUtil.hasFinally(exceptionHandler))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(lastJump)&&  NodeUtil.hasFinally(exceptionHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(lastJump)&&  NodeUtil.hasFinally(exceptionHandler))  {	  if(NodeUtil.isFunction(curHandler)&&    NodeUtil.hasFinally(exceptionHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
283	[BUG]  [BUGGY]  if(NodeUtil.isEmpty(curHandler)&&  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isEmpty(curHandler)&&  NodeUtil.hasFinally(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isEmpty(curHandler)&&  NodeUtil.hasFinally(curHandler))  {	  if(NodeUtil.isFunction(curHandler)&&    NodeUtil.hasFinally(exceptionHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
284	[BUG]  [BUGGY]  if(NodeUtil.isName(curHandler)&&  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isName(curHandler)&&  NodeUtil.hasFinally(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isName(curHandler)&&  NodeUtil.hasFinally(curHandler))  {	  if(NodeUtil.isFunction(curHandler)&&    NodeUtil.hasFinally(exceptionHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
285	[BUG]  [BUGGY]  Node  finallyMap  =  curHandler.next()  -  node.getLastChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  finallyMap  =  curHandler.next()  -  node.getLastChild();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  finallyMap  =  curHandler.next()  -  node.getLastChild();	  Node    finallyMap    =    iter.next()    -    curHandler.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
286	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(curHandler)&&!NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.hasFinally(curHandler)&&!NodeUtil.hasFinally(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.hasFinally(curHandler)&&!NodeUtil.hasFinally(curHandler))  {	  if(!NodeUtil.hasFinally(curHandler)||!NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
287	[BUG]  [BUGGY]  if(!NodeUtil.isFunction(curHandler)&&!NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(!NodeUtil.isFunction(curHandler)&&!NodeUtil.hasFinally(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(!NodeUtil.isFunction(curHandler)&&!NodeUtil.hasFinally(curHandler))  {	  if(!NodeUtil.hasFinally(curHandler)||!NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
288	[BUG]  [BUGGY]  if(NodeUtil.isFunction(exceptionHandler)&&  NodeUtil.isExpressionNode(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(exceptionHandler)&&  NodeUtil.isExpressionNode(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(exceptionHandler)&&  NodeUtil.isExpressionNode(curHandler))  {	  if(NodeUtil.isFunction(curHandler)||    NodeUtil.isExpressionNode(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
289	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(curHandler)&&  NodeUtil.isFunction(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isExpressionNode(curHandler)&&  NodeUtil.isFunction(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isExpressionNode(curHandler)&&  NodeUtil.isFunction(curHandler))  {	  if(NodeUtil.isFunction(curHandler)||    NodeUtil.isExpressionNode(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
290	[BUG]  [BUGGY]  Node  curJump  =  curHandler.getJump();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curJump  =  curHandler.getJump();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curJump  =  curHandler.getJump();	  Node    curJump    =    curHandler.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
291	[BUG]  [BUGGY]  if(lastJump  ==  node  ||!NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  node  ||!NodeUtil.hasFinally(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  node  ||!NodeUtil.hasFinally(curHandler))  {	  if(lastJump    ==    null    ||!NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
292	[BUG]  [BUGGY]  if(lastJump!=  null  ||!NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump!=  null  ||!NodeUtil.hasFinally(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump!=  null  ||!NodeUtil.hasFinally(curHandler))  {	  if(lastJump    ==    null    ||!NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
293	[BUG]  [BUGGY]  if(lastJump  ==  null  ||!NodeUtil.isFunction(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  null  ||!NodeUtil.isFunction(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  null  ||!NodeUtil.isFunction(curHandler))  {	  if(lastJump    ==    null    ||!NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
294	[BUG]  [BUGGY]  if(lastJump  ==  null  ||!NodeUtil.hasFinally(exceptionHandler))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  null  ||!NodeUtil.hasFinally(exceptionHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  null  ||!NodeUtil.hasFinally(exceptionHandler))  {	  if(lastJump    ==    null    ||!NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
295	[BUG]  [BUGGY]  Node  curHandler  =(Node)iter.next();  finallyMap.put(lastJump,  computeFollowNode(curHandler.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curHandler  =(Node)iter.next();  finallyMap.put(lastJump,  computeFollowNode(curHandler.getFirstChild()));  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =(Node)iter.next();  finallyMap.put(lastJump,  computeFollowNode(curHandler.getFirstChild()));	  Node    curHandler    =(Node)iter.next();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getFirstChild()));    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
296	[BUG]  [BUGGY]  Node  lastJump  =  node.getlastChild();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  lastJump  =  node.getlastChild();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  node.getlastChild();	  Node    lastJump    =    curHandler.getlastChild();    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
297	[BUG]  [BUGGY]  if(NodeUtil.isFunction(curHandler)&&  curHandler.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(curHandler)&&  curHandler.getType()!=  Token.FUNCTION)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(curHandler)&&  curHandler.getType()!=  Token.FUNCTION)  {	  if(NodeUtil.hasFinally(curHandler)||    curHandler.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
298	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(exceptionHandler)&&  curHandler.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.hasFinally(exceptionHandler)&&  curHandler.getType()!=  Token.FUNCTION)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.hasFinally(exceptionHandler)&&  curHandler.getType()!=  Token.FUNCTION)  {	  if(NodeUtil.hasFinally(curHandler)||    curHandler.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
299	[BUG]  [BUGGY]  Node  finallyMap  =  curHandler.removeFirst();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  finallyMap  =  curHandler.removeFirst();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  finallyMap  =  curHandler.removeFirst();	  Node    finallyMap    =    curHandler.next();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
300	[BUG]  [BUGGY]  if(lastJump!=  null  ||  NodeUtil.isFunction(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump!=  null  ||  NodeUtil.isFunction(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump!=  null  ||  NodeUtil.isFunction(curHandler))  {	  if(lastJump    ==    null    ||    NodeUtil.isFunction(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
301	[BUG]  [BUGGY]  if(lastJump  ==  null  ||  NodeUtil.isFunction(exceptionHandler))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  null  ||  NodeUtil.isFunction(exceptionHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  null  ||  NodeUtil.isFunction(exceptionHandler))  {	  if(lastJump    ==    null    ||    NodeUtil.isFunction(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
302	[BUG]  [BUGGY]  Node  finallyMap  =  curHandler.cloneTree();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  finallyMap  =  curHandler.cloneTree();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  finallyMap  =  curHandler.cloneTree();	  Node    finallyMap    =    curHandler.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
303	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(exceptionHandler)&&  NodeUtil.hasFinally(lastJump))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.hasFinally(exceptionHandler)&&  NodeUtil.hasFinally(lastJump))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.hasFinally(exceptionHandler)&&  NodeUtil.hasFinally(lastJump))  {	  if(NodeUtil.hasFinally(lastJump)&&    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
304	[BUG]  [BUGGY]  if(lastJump  ==  null  ||  finallyMap.containsKey(curHandler.getFirstChild()))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  null  ||  finallyMap.containsKey(curHandler.getFirstChild()))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  null  ||  finallyMap.containsKey(curHandler.getFirstChild()))  {	  if(lastJump    ==    null    ||    finallyMap.containsKey(curHandler.getLastChild()))    {    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
305	[BUG]  [BUGGY]  if(lastJump!=  null  &&  finallyMap.containsKey(curHandler.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump!=  null  &&  finallyMap.containsKey(curHandler.getLastChild()))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump!=  null  &&  finallyMap.containsKey(curHandler.getLastChild()))  {	  if(lastJump    ==    null    ||    finallyMap.containsKey(curHandler.getLastChild()))    {    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
306	[BUG]  [BUGGY]  if(NodeUtil.isEmpty(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isEmpty(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isEmpty(curHandler))  {	  if(NodeUtil.isFunction(exceptionHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
307	[BUG]  [BUGGY]  if(NodeUtil.isName(curHandler)&&  curHandler.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isName(curHandler)&&  curHandler.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isName(curHandler)&&  curHandler.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isFunction(curHandler)&&    curHandler.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
308	[BUG]  [BUGGY]  if(finallyMap!=  null  ||  finallyMap.containsKey(curHandler))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(finallyMap!=  null  ||  finallyMap.containsKey(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(finallyMap!=  null  ||  finallyMap.containsKey(curHandler))  {	  if(finallyMap!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
309	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(exceptionHandler))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isExpressionNode(exceptionHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isExpressionNode(exceptionHandler))  {	  if(NodeUtil.isExpressionNode(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
310	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(lastJump))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isExpressionNode(lastJump))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isExpressionNode(lastJump))  {	  if(NodeUtil.isExpressionNode(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
311	[BUG]  [BUGGY]  Node  lastJump  =  curHandler.getLastChild(),  computeFallThrough(curHandler.getLastChild()),  node);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  lastJump  =  curHandler.getLastChild(),  computeFallThrough(curHandler.getLastChild()),  node);  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  curHandler.getLastChild(),  computeFallThrough(curHandler.getLastChild()),  node);	  Node    lastJump    =    curHandler.getLastChild(),    node);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
312	[BUG]  [BUGGY]  if(NodeUtil.isEmpty(curHandler)&&  curHandler.getLastChild()!=  node)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isEmpty(curHandler)&&  curHandler.getLastChild()!=  node)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isEmpty(curHandler)&&  curHandler.getLastChild()!=  node)  {	  if(NodeUtil.isFunction(curHandler)&&    curHandler.getLastChild()!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
313	[BUG]  [BUGGY]  if(lastJump  ==  curHandler  ||  NodeUtil.hasFinally(lastJump))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  curHandler  ||  NodeUtil.hasFinally(lastJump))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  curHandler  ||  NodeUtil.hasFinally(lastJump))  {	  if(curHandler    ==    null    ||    NodeUtil.hasFinally(lastJump))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
314	[BUG]  [BUGGY]  if(finallyMap.containsKey(curHandler)&&  NodeUtil.hasFinally(curJump))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(finallyMap.containsKey(curHandler)&&  NodeUtil.hasFinally(curJump))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(finallyMap.containsKey(curHandler)&&  NodeUtil.hasFinally(curJump))  {	  if(curHandler    ==    null    ||    NodeUtil.hasFinally(lastJump))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
315	[BUG]  [BUGGY]  Node  firstJump  =  curHandler.getfirstChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  firstJump  =  curHandler.getfirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  firstJump  =  curHandler.getfirstChild();	  Node    firstJump    =    curHandler.getLastChild()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
316	[BUG]  [BUGGY]  if(finallyMap!=  null  &&  NodeUtil.isFunction(curHandler))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(finallyMap!=  null  &&  NodeUtil.isFunction(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(finallyMap!=  null  &&  NodeUtil.isFunction(curHandler))  {	  if(finallyMap!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
317	[BUG]  [BUGGY]  if(finallyMap!=  null  &&  finallyMap.containsKey(curHandler.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(finallyMap!=  null  &&  finallyMap.containsKey(curHandler.getLastChild()))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(finallyMap!=  null  &&  finallyMap.containsKey(curHandler.getLastChild()))  {	  if(finallyMap!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
318	[BUG]  [BUGGY]  if(lastJump  <  node  ||  finallyMap.containsKey(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  <  node  ||  finallyMap.containsKey(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  <  node  ||  finallyMap.containsKey(curHandler))  {	  if(lastJump    ==    node    ||    finallyMap.containsKey(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
319	[BUG]  [BUGGY]  if(NodeUtil.isFunction(curHandler)||  exceptionHandler.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(curHandler)||  exceptionHandler.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(curHandler)||  exceptionHandler.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.hasFinally(exceptionHandler)||    curHandler.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
320	[BUG]  [BUGGY]  Node  curHandler  =(Node)iter.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curHandler  =(Node)iter.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =(Node)iter.getFirstChild();	  Node    curHandler    =(Node)iter.next();    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
321	[BUG]  [BUGGY]  Node  curHandler  =(Node)node.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curHandler  =(Node)node.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =(Node)node.getFirstChild();	  Node    curHandler    =(Node)iter.next();    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
322	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(curHandler)&&  curHandler.getFirstChild()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.hasFinally(curHandler)&&  curHandler.getFirstChild()  ==  node)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.hasFinally(curHandler)&&  curHandler.getFirstChild()  ==  node)  {	  if(NodeUtil.hasFinally(curHandler)&&    curHandler.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
323	[BUG]  [BUGGY]  if(NodeUtil.isFunction(curHandler)&&  curHandler.getFirstChild()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(curHandler)&&  curHandler.getFirstChild()  ==  node)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(curHandler)&&  curHandler.getFirstChild()  ==  node)  {	  if(NodeUtil.isFunction(curHandler)&&    curHandler.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
324	[BUG]  [BUGGY]  if(NodeUtil.isFunction(curHandler)&&  curHandler.getFirstChild()  ==  Node.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFunction(curHandler)&&  curHandler.getFirstChild()  ==  Node.FUNCTION)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFunction(curHandler)&&  curHandler.getFirstChild()  ==  Node.FUNCTION)  {	  if(NodeUtil.isFunction(curHandler)&&    curHandler.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
325	[BUG]  [BUGGY]  if(lastJump  ==  node  ||  curHandler.getLastChild()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  node  ||  curHandler.getLastChild()  ==  node)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  node  ||  curHandler.getLastChild()  ==  node)  {	  if(lastJump    ==    node    ||    curHandler.getLastChild()!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
326	[BUG]  [BUGGY]  if(lastJump  ==  node  ||  curHandler.getLastChild()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  node  ||  curHandler.getLastChild()!=  null)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  node  ||  curHandler.getLastChild()!=  null)  {	  if(lastJump    ==    node    ||    curHandler.getLastChild()!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
327	[BUG]  [BUGGY]  Node  finallyMap  =  curHandler.next(),  node.getLastChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  finallyMap  =  curHandler.next(),  node.getLastChild());  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  finallyMap  =  curHandler.next(),  node.getLastChild());	  Node    finallyMap    =    iter.next(),    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
328	[BUG]  [BUGGY]  Node  curHandler  =  iter.get()  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curHandler  =  iter.get()  +  1;  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  iter.get()  +  1;	  Node    curHandler    =    iter.next()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
329	[BUG]  [BUGGY]  Node  curHandler  =  iter.get();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curHandler  =  iter.get();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  iter.get();	  Node    curHandler    =    iter.next()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
330	[BUG]  [BUGGY]  if(lastJump  ==  null  ||  NodeUtil.hasFinally(lastJump)&&  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  null  ||  NodeUtil.hasFinally(lastJump)&&  NodeUtil.hasFinally(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  null  ||  NodeUtil.hasFinally(lastJump)&&  NodeUtil.hasFinally(curHandler))  {	  if(NodeUtil.hasFinally(lastJump)&&    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
331	[BUG]  [BUGGY]  if(lastJump!=  null  &&  NodeUtil.hasFinally(lastJump))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump!=  null  &&  NodeUtil.hasFinally(lastJump))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump!=  null  &&  NodeUtil.hasFinally(lastJump))  {	  if(curHandler!=    null    ||    NodeUtil.hasFinally(lastJump))    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
332	[BUG]  [BUGGY]  if(NodeUtil.isEmpty(curHandler)||  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isEmpty(curHandler)||  NodeUtil.hasFinally(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isEmpty(curHandler)||  NodeUtil.hasFinally(curHandler))  {	  if(NodeUtil.isFunction(curHandler)||    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
333	[BUG]  [BUGGY]  Node  curHandler  =  curHandler.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curHandler  =  curHandler.removeFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  curHandler.removeFirstChild();	  Node    curHandler    =    curHandler.next();    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
334	[BUG]  [BUGGY]  Node  curHandler  =  curHandler.cloneTree();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curHandler  =  curHandler.cloneTree();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  curHandler.cloneTree();	  Node    curHandler    =    curHandler.next();    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
335	[BUG]  [BUGGY]  if(lastJump  ==  null  ||!NodeUtil.isFunction(lastJump))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  null  ||!NodeUtil.isFunction(lastJump))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  null  ||!NodeUtil.isFunction(lastJump))  {	  if(!NodeUtil.isFunction(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
336	[BUG]  [BUGGY]  if(lastJump!=  node  ||  finallyMap.containsKey(curHandler.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump!=  node  ||  finallyMap.containsKey(curHandler.getLastChild()))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump!=  node  ||  finallyMap.containsKey(curHandler.getLastChild()))  {	  if(lastJump!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
337	[BUG]  [BUGGY]  if(lastJump!=  null  &&  NodeUtil.isFunction(curHandler))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump!=  null  &&  NodeUtil.isFunction(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump!=  null  &&  NodeUtil.isFunction(curHandler))  {	  if(lastJump!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
338	[BUG]  [BUGGY]  if(lastJump!=  node  ||!NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump!=  node  ||!NodeUtil.hasFinally(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump!=  node  ||!NodeUtil.hasFinally(curHandler))  {	  if(lastJump    ==    null    ||!NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
339	[BUG]  [BUGGY]  Node  curHandler  =  iter.get()  -  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curHandler  =  iter.get()  -  1;  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  iter.get()  -  1;	  Node    curHandler    =    iter.next()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
340	[BUG]  [BUGGY]  Node  curHandler  =  iter.remove();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curHandler  =  iter.remove();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  iter.remove();	  Node    curHandler    =    iter.next()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
341	[BUG]  [BUGGY]  Node  curHandler  =  node.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curHandler  =  node.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  node.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));	  Node    curHandler    =    iter.next();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getFirstChild()));    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
342	[BUG]  [BUGGY]  if(lastJump!=  node  ||  NodeUtil.isFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump!=  node  ||  NodeUtil.isFinally(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump!=  node  ||  NodeUtil.isFinally(curHandler))  {	  if(lastJump    ==    null    ||    NodeUtil.isFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
343	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION  ||  node  ==  lastJump)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(node.getType()  ==  Token.FUNCTION  ||  node  ==  lastJump)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(node.getType()  ==  Token.FUNCTION  ||  node  ==  lastJump)  {	  if(node    ==    lastJump)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
344	[BUG]  [BUGGY]  if(node.getType()  ==  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(node.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(node.getType()  ==  Token.EXPR_RESULT)  {	  if(node    ==    lastJump)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
345	[BUG]  [BUGGY]  final  Node  curHandler  =  node.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  final  Node  curHandler  =  node.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	final  Node  curHandler  =  node.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));	  Node    curHandler    =    node.getLastChild();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
346	[BUG]  [BUGGY]  Iterator  <  Node>  curHandler  =  node.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Iterator  <  Node>  curHandler  =  node.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Iterator  <  Node>  curHandler  =  node.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));	  Iterator    <    Node>    curHandler    =    iter.next();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
347	[BUG]  [BUGGY]  if(lastJump  ==  node  ||  NodeUtil.mayHaveSideEffects(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  node  ||  NodeUtil.mayHaveSideEffects(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  node  ||  NodeUtil.mayHaveSideEffects(curHandler))  {	  if(lastJump    ==    node    ||    NodeUtil.isFunction(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
348	[BUG]  [BUGGY]  if(lastJump  ==  node)  {  Node  curHandler  =  curHandler.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  node)  {  Node  curHandler  =  curHandler.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  node)  {  Node  curHandler  =  curHandler.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }	  Node    curHandler    =    curHandler.getFirstChild();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
349	[BUG]  [BUGGY]  if(lastJump!=  node  ||  curHandler.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump!=  node  ||  curHandler.getType()  ==  Token.GETPROP)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump!=  node  ||  curHandler.getType()  ==  Token.GETPROP)  {	  if(lastJump    ==    null    ||    curHandler.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
350	[BUG]  [BUGGY]  Node  lastJump  =  curHandler.last();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  lastJump  =  curHandler.last();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  curHandler.last();	  Node    lastJump    =    curHandler.next();    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
351	[BUG]  [BUGGY]  lastJump  =  curHandler.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  lastJump  =  curHandler.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	lastJump  =  curHandler.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));	  final    Node    lastJump    =    curHandler.getLastChild();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
352	[BUG]  [BUGGY]  if(NodeUtil.isEmpty(curHandler)||  NodeUtil.isFunction(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isEmpty(curHandler)||  NodeUtil.isFunction(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isEmpty(curHandler)||  NodeUtil.isFunction(curHandler))  {	  if(NodeUtil.isFunction(curHandler)||    NodeUtil.isFunction(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
353	[BUG]  [BUGGY]  if(NodeUtil.isName(curHandler)||  NodeUtil.isFunction(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isName(curHandler)||  NodeUtil.isFunction(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isName(curHandler)||  NodeUtil.isFunction(curHandler))  {	  if(NodeUtil.isFunction(curHandler)||    NodeUtil.isFunction(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
354	[BUG]  [BUGGY]  final  Node  lastJump  =  curHandler.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  final  Node  lastJump  =  curHandler.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	final  Node  lastJump  =  curHandler.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));	  Node    lastJump    =    curHandler.getLastChild();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getFirstChild()));    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
355	[BUG]  [BUGGY]  if(lastJump!=  node  &&  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump!=  node  &&  NodeUtil.hasFinally(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump!=  node  &&  NodeUtil.hasFinally(curHandler))  {	  if(lastJump!=    node    ||    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
356	[BUG]  [BUGGY]  if(lastJump!=  curHandler  ||  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump!=  curHandler  ||  NodeUtil.hasFinally(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump!=  curHandler  ||  NodeUtil.hasFinally(curHandler))  {	  if(lastJump!=    node    ||    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
357	[BUG]  [BUGGY]  if(NodeUtil.isEmpty(curHandler)||  NodeUtil.isExpressionNode(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isEmpty(curHandler)||  NodeUtil.isExpressionNode(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isEmpty(curHandler)||  NodeUtil.isExpressionNode(curHandler))  {	  if(NodeUtil.isFunction(exceptionHandler)||    NodeUtil.isExpressionNode(exceptionHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
358	[BUG]  [BUGGY]  if(lastJump  ==  node)  {  final  Node  curHandler  =  node.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  node)  {  final  Node  curHandler  =  node.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  node)  {  final  Node  curHandler  =  node.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }	  final    Node    curHandler    =    node.getFirstChild();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
359	[BUG]  [BUGGY]  if(lastJump  ==  node)  {  final  Node  curHandler  =  node.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  else  {  createEdge(node,  Branch.UNCOND  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  node)  {  final  Node  curHandler  =  node.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  else  {  createEdge(node,  Branch.UNCOND  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  node)  {  final  Node  curHandler  =  node.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  else  {  createEdge(node,  Branch.UNCOND	  final    Node    curHandler    =    node.getFirstChild();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
360	[BUG]  [BUGGY]  if(lastJump  ==  node)  {  final  Node  curHandler  =  node.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  else  {  createEdge(node,  Branch.UNCOND,  curHandler  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  node)  {  final  Node  curHandler  =  node.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  else  {  createEdge(node,  Branch.UNCOND,  curHandler  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  node)  {  final  Node  curHandler  =  node.getFirstChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  else  {  createEdge(node,  Branch.UNCOND,  curHandler	  final    Node    curHandler    =    node.getFirstChild();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
361	[BUG]  [BUGGY]  Node  firstJump  =  curHandler.cloneTree();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  firstJump  =  curHandler.cloneTree();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  firstJump  =  curHandler.cloneTree();	  Node    firstJump    =    curHandler.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
362	[BUG]  [BUGGY]  Node  curHandler  =  exceptionHandler.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  curHandler  =  exceptionHandler.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  curHandler  =  exceptionHandler.getFirstChild();	  Node    curHandler    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
363	[BUG]  [BUGGY]  if(lastJump  ==  curHandler.getLastChild())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  curHandler.getLastChild())  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  curHandler.getLastChild())  {	  if(curHandler!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
364	[BUG]  [BUGGY]  if(lastJump  ==  curHandler.getFirstChild())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  curHandler.getFirstChild())  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  curHandler.getFirstChild())  {	  if(curHandler!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
365	[BUG]  [BUGGY]  if(lastJump  ==  curHandler)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  curHandler)  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  curHandler)  {	  if(curHandler!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
366	[BUG]  [BUGGY]  final  Node  lastJump  =  curHandler.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getString()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  final  Node  lastJump  =  curHandler.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getString()));  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	final  Node  lastJump  =  curHandler.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getString()));	  Node    lastJump    =    curHandler.getLastChild();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getString()));    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
367	[BUG]  [BUGGY]  lastJump  =  curHandler.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getString()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  lastJump  =  curHandler.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getString()));  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	lastJump  =  curHandler.getLastChild();  finallyMap.put(lastJump,  computeFallThrough(curHandler.getString()));	  Node    lastJump    =    curHandler.getLastChild();    finallyMap.put(lastJump,    computeFallThrough(curHandler.getString()));    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
368	[BUG]  [BUGGY]  Node  lastJump  =  curHandler.cloneTree();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  Node  lastJump  =  curHandler.cloneTree();  [BUGGY]      if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	Node  lastJump  =  curHandler.cloneTree();	  Node    lastJump    =    curHandler.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
369	[BUG]  [BUGGY]  if(NodeUtil.isFinally(curHandler)&&  NodeUtil.hasFinally(curJump))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(NodeUtil.isFinally(curHandler)&&  NodeUtil.hasFinally(curJump))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(NodeUtil.isFinally(curHandler)&&  NodeUtil.hasFinally(curJump))  {	  if(NodeUtil.hasFinally(curHandler)||    NodeUtil.hasFinally(curJump))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
370	[BUG]  [BUGGY]  if(lastJump!=  null  &&  NodeUtil.hasFinally(curHandler)&&  NodeUtil.hasFinally(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump!=  null  &&  NodeUtil.hasFinally(curHandler)&&  NodeUtil.hasFinally(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump!=  null  &&  NodeUtil.hasFinally(curHandler)&&  NodeUtil.hasFinally(curHandler))  {	  if(lastJump    ==    null    ||    NodeUtil.hasFinally(curHandler)&&    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
371	[BUG]  [BUGGY]  if(lastJump  ==  null  ||  NodeUtil.hasFinally(curHandler)&&  NodeUtil.isExpressionNode(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  null  ||  NodeUtil.hasFinally(curHandler)&&  NodeUtil.isExpressionNode(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  null  ||  NodeUtil.hasFinally(curHandler)&&  NodeUtil.isExpressionNode(curHandler))  {	  if(lastJump    ==    null    ||    NodeUtil.hasFinally(curHandler)&&    NodeUtil.hasFinally(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
372	[BUG]  [BUGGY]  if(lastJump  ==  null  ||  NodeUtil.isExpressionNode(curHandler))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  handleReturn(Node  node)  {  Node  lastJump  =  null;  for  (Iterator<Node>  iter  =  exceptionHandler.iterator();  iter.hasNext();)  {  Node  curHandler  =  iter.next();  if  (NodeUtil.isFunction(curHandler))  {  break;  }      [BUGGY]  if(lastJump  ==  null  ||  NodeUtil.isExpressionNode(curHandler))  {  [BUGGY]      if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	if(lastJump  ==  null  ||  NodeUtil.isExpressionNode(curHandler))  {	  if(lastJump    ==    null    ||    NodeUtil.isFunction(curHandler))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
