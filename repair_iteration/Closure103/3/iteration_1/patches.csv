bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  if(NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  if(NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  if(NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	if(NodeUtil.hasFinally(parent)||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    if(NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
2	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  if(NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  if(NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  if(NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	if(NodeUtil.hasFinally(parent)||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    if(NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
3	[BUG]  [BUGGY]  parent!=  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getNext());  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent!=  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getNext());  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent!=  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getNext());	  parent!=    node    &&    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  not  a  statement	10	None	replace
4	[BUG]  [BUGGY]  parent!=  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(fromNode.getNext());  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent!=  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(fromNode.getNext());  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent!=  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(fromNode.getNext());	  parent!=    node    &&    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  not  a  statement	10	None	replace
5	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }	  if(NodeUtil.hasFinally(parent)&&    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  not  a  statement	13	None	replace
6	[BUG]  [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }	  if(NodeUtil.hasFinally(parent)&&    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  not  a  statement	13	None	replace
7	[BUG]  [BUGGY]  parent!=  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent!=  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent!=  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }	  if(NodeUtil.hasFinally(parent)&&    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  not  a  statement	13	None	replace
8	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }	  if(NodeUtil.hasFinally(parent)&&    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  not  a  statement	13	None	replace
9	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  ||  NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }	  if(NodeUtil.hasFinally(parent)&&    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  not  a  statement	13	None	replace
10	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getFirstChild());  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getFirstChild());  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getFirstChild());	  if(NodeUtil.hasFinally(parent))    {    //    and    have    FINALLY    block.    return    computeFallThrough(node.getFirstChild());    }    	non-compiled	[CE]  not  a  statement	20	None	replace
11	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getFirstChild());  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getFirstChild());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getFirstChild());  }	  if(NodeUtil.hasFinally(parent))    {    //    and    have    FINALLY    block.    return    computeFallThrough(node.getFirstChild());    }    	non-compiled	[CE]  not  a  statement	20	None	replace
12	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getFirstChild());  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getFirstChild());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getFirstChild());  }	  if(NodeUtil.hasFinally(parent))    {    //    and    have    FINALLY    block.    return    computeFallThrough(node.getFirstChild());    }    	non-compiled	[CE]  not  a  statement	20	None	replace
13	[BUG]  [BUGGY]  parent  ==  null  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getFirstChild());  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  null  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getFirstChild());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  null  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getFirstChild());  }	  if(NodeUtil.hasFinally(parent))    {    //    and    have    FINALLY    block.    return    computeFallThrough(node.getFirstChild());    }    	non-compiled	[CE]  not  a  statement	20	None	replace
14	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getFirstChild());  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getFirstChild());  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getFirstChild());	  if(NodeUtil.hasFinally(parent))    {    //    and    have    FINALLY    block.    return    computeFallThrough(node.getFirstChild());    }    	non-compiled	[CE]  not  a  statement	20	None	replace
15	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getNext());  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getNext());  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getNext());	  parent    ==    node    ||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  not  a  statement	9	None	replace
16	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(fromNode.getNext());  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(fromNode.getNext());  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(fromNode.getNext());	  parent    ==    node    ||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  not  a  statement	9	None	replace
17	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getFirstChild());  }  if(NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  if(NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getFirstChild());  }  if(NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getFirstChild());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	if(NodeUtil.hasFinally(parent))    {    //    and    have    FINALLY    block.    return    computeFallThrough(node.getFirstChild());    }    if(NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getFirstChild());  }	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
18	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getFirstChild());  }  If(NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  if(NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getFirstChild());  }  If(NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getFirstChild());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	if(NodeUtil.hasFinally(parent))    {    //    and    have    FINALLY    block.    return    computeFallThrough(node.getFirstChild());    }    If(NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getFirstChild());  }	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
19	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getFirstChild());  }  if(NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  if(NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getFirstChild());  }  if(NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getLastChild());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	if(NodeUtil.hasFinally(parent))    {    //    and    have    FINALLY    block.    return    computeFallThrough(node.getFirstChild());    }    if(NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getLastChild());  }	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
20	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getFirstChild());  }  AssertionFailedError  if(NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  if(NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getFirstChild());  }  AssertionFailedError  if(NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getFirstChild());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	if(NodeUtil.hasFinally(parent))    {    //    and    have    FINALLY    block.    return    computeFallThrough(node.getFirstChild());    }    AssertionFailedError  if(NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getFirstChild());  }	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
21	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getLastChild();  [CE]  'else'  without  'if'  [FE]    AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  Node  nextSibling  =  parent.getLastChild();  [BUGGY]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(node.getNext());  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	Node  nextSibling  =  parent.getLastChild();	      Node    nextSibling    =    parent.getFirstChild();    	non-compiled	[CE]  'else'  without  'if'	26	None	replace
22	[BUG]  [BUGGY]  Node  nextSibling  =  node.getFirstChild();  [CE]  'else'  without  'if'  [FE]      AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  Node  nextSibling  =  node.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(node.getNext());  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	Node  nextSibling  =  node.getFirstChild();	      Node    nextSibling    =    parent.getFirstChild();    	non-compiled	[CE]  'else'  without  'if'	26	None	replace
23	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getNext();  [CE]  'else'  without  'if'  [FE]        AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  Node  nextSibling  =  parent.getNext();  [BUGGY]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(node.getNext());  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	Node  nextSibling  =  parent.getNext();	      Node    nextSibling    =    parent.getFirstChild();    	non-compiled	[CE]  'else'  without  'if'	26	None	replace
24	[BUG]  [BUGGY]  Node  nextSibling  =  fromNode.getFirstChild();  [CE]  'else'  without  'if'  [FE]          AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  Node  nextSibling  =  fromNode.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(node.getNext());  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	Node  nextSibling  =  fromNode.getFirstChild();	      Node    nextSibling    =    parent.getFirstChild();    	non-compiled	[CE]  'else'  without  'if'	26	None	replace
25	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)&&  parent.getFirstChild()  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)&&  parent.getFirstChild()  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent)&&  parent.getFirstChild()  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }	  if(NodeUtil.hasFinally(parent)&&    node.getFirstChild()    ==    node)    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  not  a  statement	16	None	replace
26	[BUG]  [BUGGY]  parent  ==  node  &&  parent.getFirstChild()  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  &&  parent.getFirstChild()  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  &&  parent.getFirstChild()  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }	  if(NodeUtil.hasFinally(parent)&&    node.getFirstChild()    ==    node)    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  not  a  statement	16	None	replace
27	[BUG]  [BUGGY]  parent!=  node  &&  NodeUtil.hasFinally(parent)&&  parent.getFirstChild()  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent!=  node  &&  NodeUtil.hasFinally(parent)&&  parent.getFirstChild()  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent!=  node  &&  NodeUtil.hasFinally(parent)&&  parent.getFirstChild()  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }	  if(NodeUtil.hasFinally(parent)&&    node.getFirstChild()    ==    node)    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  not  a  statement	16	None	replace
28	[BUG]  [BUGGY]  parent!=  node  &&  parent.getFirstChild()  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent!=  node  &&  parent.getFirstChild()  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent!=  node  &&  parent.getFirstChild()  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }	  if(NodeUtil.hasFinally(parent)&&    node.getFirstChild()    ==    node)    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  not  a  statement	16	None	replace
29	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)&&  node.getFirstChild()  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)&&  node.getFirstChild()  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent)&&  node.getFirstChild()  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }	  if(NodeUtil.hasFinally(parent)&&    node.getFirstChild()    ==    node)    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  not  a  statement	16	None	replace
30	[BUG]  [BUGGY]  Node  parent  =  fromNode.getParent();  [CE]  'else'  without  'if'  [FE]              AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  Node  parent  =  fromNode.getParent();  [BUGGY]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(node.getNext());  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	Node  parent  =  fromNode.getParent();	      Node    parent    =    parent.getParent();    	non-compiled	[CE]  'else'  without  'if'	4	None	replace
31	[BUG]  [BUGGY]  Node  parent  =  toNode.getParent();  [CE]  'else'  without  'if'  [FE]                AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  Node  parent  =  toNode.getParent();  [BUGGY]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(node.getNext());  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	Node  parent  =  toNode.getParent();	      Node    parent    =    parent.getParent();    	non-compiled	[CE]  'else'  without  'if'	4	None	replace
32	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  [CE]  'else'  without  'if'  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  Node  parent  =  n.getParent();  [BUGGY]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(node.getNext());  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	Node  parent  =  n.getParent();	      Node    parent    =    parent.getParent();    	non-compiled	[CE]  'else'  without  'if'	4	None	replace
33	[BUG]  [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }	  if(NodeUtil.hasFinally(parent)&&    NodeUtil.hasFinally(parent))    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  not  a  statement	14	None	replace
34	[BUG]  [BUGGY]  parent!=  NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent!=  NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent!=  NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }	  if(NodeUtil.hasFinally(parent)&&    NodeUtil.hasFinally(parent))    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  not  a  statement	14	None	replace
35	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }	  if(NodeUtil.hasFinally(parent)&&    NodeUtil.hasFinally(parent))    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  not  a  statement	14	None	replace
36	[BUG]  [BUGGY]  parent  ==  parent  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  parent  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  parent  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }	  if(NodeUtil.hasFinally(parent)&&    NodeUtil.hasFinally(parent))    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  not  a  statement	14	None	replace
37	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent);  [CE]  'else'  without  'if'  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  return  computeFollowNode(fromNode,  parent);  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	return  computeFollowNode(fromNode,  parent);	  if(NodeUtil.hasFinally(parent)&&    NodeUtil.hasFinally(parent))    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  'else'  without  'if'	14	None	replace
38	[BUG]  [BUGGY]  Node  parent  =  fromNode.getNext();  [CE]  'else'  without  'if'  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  Node  parent  =  fromNode.getNext();  [BUGGY]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(node.getNext());  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	Node  parent  =  fromNode.getNext();	      Node    parent    =    node.getNext();    	non-compiled	[CE]  'else'  without  'if'	6	None	replace
39	[BUG]  [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());	  if(NodeUtil.hasFinally(parent)||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  not  a  statement	12	None	replace
40	[BUG]  [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());	  if(NodeUtil.hasFinally(parent)||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  not  a  statement	12	None	replace
41	[BUG]  [BUGGY]  parent!=  NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent!=  NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent!=  NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());	  if(NodeUtil.hasFinally(parent)||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  not  a  statement	12	None	replace
42	[BUG]  [BUGGY]  parent!=  NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent!=  NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent!=  NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());	  if(NodeUtil.hasFinally(parent)||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  not  a  statement	12	None	replace
43	[BUG]  [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }	  if(NodeUtil.hasFinally(parent)||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  not  a  statement	8	None	replace
44	[BUG]  [BUGGY]  return  computeFallThrough(node.getNext());  [CE]  'else'  without  'if'  [FE]            AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  return  computeFallThrough(node.getNext());  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	return  computeFallThrough(node.getNext());	  if(NodeUtil.hasFinally(parent)||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  'else'  without  'if'	8	None	replace
45	[BUG]  [BUGGY]  parent!=  NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent!=  NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent!=  NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }	  if(NodeUtil.hasFinally(parent)||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  not  a  statement	8	None	replace
46	[BUG]  [BUGGY]      Node  nextSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]      Node  nextSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(node.getNext());  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	        Node    nextSibling    =    parent.getFirstChild();    Node  nextSibling  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	25	None	add
47	[BUG]  [BUGGY]      Node  nextSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getLastChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]      Node  nextSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getLastChild();  [BUGGY]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(node.getNext());  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	        Node    nextSibling    =    parent.getFirstChild();    Node  nextSibling  =  parent.getLastChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	25	None	add
48	[BUG]  [BUGGY]      Node  nextSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getNext();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]      Node  nextSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getNext();  [BUGGY]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(node.getNext());  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	        Node    nextSibling    =    parent.getFirstChild();    Node  nextSibling  =  parent.getNext();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	25	None	add
49	[BUG]  [BUGGY]      Node  nextSibling  =  parent.getFirstChild();  Node  nextSibling  =  child.getFirstChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]      Node  nextSibling  =  parent.getFirstChild();  Node  nextSibling  =  child.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(node.getNext());  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	        Node    nextSibling    =    parent.getFirstChild();    Node  nextSibling  =  child.getFirstChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	25	None	add
50	[BUG]  [BUGGY]      Node  nextSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getfirstChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]      Node  nextSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getfirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(node.getNext());  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	        Node    nextSibling    =    parent.getFirstChild();    Node  nextSibling  =  parent.getfirstChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	25	None	add
51	[BUG]  [BUGGY]  Node  node  =  parent.getLastChild();  [CE]  'else'  without  'if'  [FE]            AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  Node  node  =  parent.getLastChild();  [BUGGY]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(node.getNext());  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	Node  node  =  parent.getLastChild();	      Node    node    =    parent.getFirstChild();    	non-compiled	[CE]  'else'  without  'if'	3	None	replace
52	[BUG]  [BUGGY]  Node  node  =  fromNode.getFirstChild();  [CE]  'else'  without  'if'  [FE]              AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  Node  node  =  fromNode.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(node.getNext());  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	Node  node  =  fromNode.getFirstChild();	      Node    node    =    parent.getFirstChild();    	non-compiled	[CE]  'else'  without  'if'	3	None	replace
53	[BUG]  [BUGGY]  Node  node  =  parent.getNext();  [CE]  'else'  without  'if'  [FE]                AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  Node  node  =  parent.getNext();  [BUGGY]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(node.getNext());  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	Node  node  =  parent.getNext();	      Node    node    =    parent.getFirstChild();    	non-compiled	[CE]  'else'  without  'if'	3	None	replace
54	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(parent.getNext());  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(parent.getNext());  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(parent.getNext());	  parent    ==    node    &&    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  not  a  statement	18	None	replace
55	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(fromNode.getNext());  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(fromNode.getNext());  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(fromNode.getNext());	  parent    ==    node    &&    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  not  a  statement	18	None	replace
56	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  if(NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  if(NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  if(NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	if(NodeUtil.hasFinally(parent))    {    //    and    have    FINALLY    block.    return    computeFallThrough(node.getNext());    }    if(NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
57	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  If(NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  if(NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  If(NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	if(NodeUtil.hasFinally(parent))    {    //    and    have    FINALLY    block.    return    computeFallThrough(node.getNext());    }    If(NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
58	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  AssertionFailedError  if(NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  if(NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  AssertionFailedError  if(NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	if(NodeUtil.hasFinally(parent))    {    //    and    have    FINALLY    block.    return    computeFallThrough(node.getNext());    }    AssertionFailedError  if(NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
59	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  if(NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  if(NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  if(NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	if(NodeUtil.hasFinally(parent))    {    //    and    have    FINALLY    block.    return    computeFallThrough(node.getNext());    }    if(NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
60	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  if(NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  if(NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  if(NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	if(NodeUtil.hasFinally(parent))    {    //    and    have    FINALLY    block.    return    computeFallThrough(node.getNext());    }    if(NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  else  {  return  computeFallThrough(node.getNext());  }	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
61	[BUG]  [BUGGY]  parent  ==  node  &&  parent.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  &&  parent.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  &&  parent.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }	  if(NodeUtil.hasFinally(parent)&&    node.getFirstChild()    ==    node)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  not  a  statement	22	None	replace
62	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)&&  node.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)&&  node.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent)&&  node.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }	  if(NodeUtil.hasFinally(parent)&&    node.getFirstChild()    ==    node)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  not  a  statement	22	None	replace
63	[BUG]  [BUGGY]  parent!=  node  &&  parent.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent!=  node  &&  parent.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent!=  node  &&  parent.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }	  if(NodeUtil.hasFinally(parent)&&    node.getFirstChild()    ==    node)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  not  a  statement	22	None	replace
64	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)&&  node.getFirstChild()  ==  parent)  {  return  computeFallThrough(node.getNext());  }  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)&&  node.getFirstChild()  ==  parent)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent)&&  node.getFirstChild()  ==  parent)  {  return  computeFallThrough(node.getNext());  }	  if(NodeUtil.hasFinally(parent)&&    node.getFirstChild()    ==    node)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  not  a  statement	22	None	replace
65	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)&&  parent.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)&&  parent.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent)&&  parent.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }	  if(NodeUtil.hasFinally(parent)&&    node.getFirstChild()    ==    node)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  not  a  statement	22	None	replace
66	[BUG]  [BUGGY]  Node  parent  =  getCatchBlock(node);  [CE]  'else'  without  'if'  [FE]                AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  Node  parent  =  getCatchBlock(node);  [BUGGY]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(node.getNext());  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	Node  parent  =  getCatchBlock(node);	      Node    parent    =    getCatchBlock(parent);    	non-compiled	[CE]  'else'  without  'if'	5	None	replace
67	[BUG]  [BUGGY]  Node  parent  =  getCatchBlock(fromNode);  [CE]  'else'  without  'if'  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  Node  parent  =  getCatchBlock(fromNode);  [BUGGY]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(node.getNext());  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	Node  parent  =  getCatchBlock(fromNode);	      Node    parent    =    getCatchBlock(parent);    	non-compiled	[CE]  'else'  without  'if'	5	None	replace
68	[BUG]  [BUGGY]  Node  parent  =  getCatchBlock(parent,  node);  [CE]  'else'  without  'if'  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  Node  parent  =  getCatchBlock(parent,  node);  [BUGGY]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(node.getNext());  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	Node  parent  =  getCatchBlock(parent,  node);	      Node    parent    =    getCatchBlock(parent);    	non-compiled	[CE]  'else'  without  'if'	5	None	replace
69	[BUG]  [BUGGY]  Node  parent  =  getCatchBlock(parent.getLastChild());  [CE]  'else'  without  'if'  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  Node  parent  =  getCatchBlock(parent.getLastChild());  [BUGGY]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(node.getNext());  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	Node  parent  =  getCatchBlock(parent.getLastChild());	      Node    parent    =    getCatchBlock(parent);    	non-compiled	[CE]  'else'  without  'if'	5	None	replace
70	[BUG]  [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getNext());  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getNext());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getNext());  }	  if(NodeUtil.hasFinally(parent)||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(parent.getNext());    }    	non-compiled	[CE]  not  a  statement	15	None	replace
71	[BUG]  [BUGGY]  parent  ==  parent  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getNext());  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  parent  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getNext());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  parent  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getNext());  }	  if(NodeUtil.hasFinally(parent)||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(parent.getNext());    }    	non-compiled	[CE]  not  a  statement	15	None	replace
72	[BUG]  [BUGGY]  parent!=  NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getNext());  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent!=  NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getNext());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent!=  NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getNext());  }	  if(NodeUtil.hasFinally(parent)||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(parent.getNext());    }    	non-compiled	[CE]  not  a  statement	15	None	replace
73	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getNext());  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getNext());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getNext());  }	  if(NodeUtil.hasFinally(parent)||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(parent.getNext());    }    	non-compiled	[CE]  not  a  statement	15	None	replace
74	[BUG]  [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getNext());  }  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getNext());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getNext());  }	  if(NodeUtil.hasFinally(parent)||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(parent.getNext());    }    	non-compiled	[CE]  not  a  statement	15	None	replace
75	[BUG]  [BUGGY]  Node  parent  =  fromNode.getFirstChild();  [CE]  'else'  without  'if'  [FE]          AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  Node  parent  =  fromNode.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(node.getNext());  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	Node  parent  =  fromNode.getFirstChild();	      Node    parent    =    node.getFirstChild();    	non-compiled	[CE]  'else'  without  'if'	2	None	replace
76	[BUG]  [BUGGY]  Node  parent  =  node.getLastChild();  [CE]  'else'  without  'if'  [FE]            AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  Node  parent  =  node.getLastChild();  [BUGGY]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(node.getNext());  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	Node  parent  =  node.getLastChild();	      Node    parent    =    node.getFirstChild();    	non-compiled	[CE]  'else'  without  'if'	2	None	replace
77	[BUG]  [BUGGY]  Node  parent  =  parent.getFirstChild();  [CE]  'else'  without  'if'  [FE]              AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  Node  parent  =  parent.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(node.getNext());  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	Node  parent  =  parent.getFirstChild();	      Node    parent    =    node.getFirstChild();    	non-compiled	[CE]  'else'  without  'if'	2	None	replace
78	[BUG]  [BUGGY]  parent  ==  null  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  null  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  null  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }	  if(NodeUtil.hasFinally(parent))    {    //    and    have    FINALLY    block.    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  not  a  statement	24	None	replace
79	[BUG]  [BUGGY]  parent!=  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent!=  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent!=  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());	  if(NodeUtil.hasFinally(parent))    {    //    and    have    FINALLY    block.    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  not  a  statement	24	None	replace
80	[BUG]  [BUGGY]  Node  node  =  fromNode.getParent();  [CE]  'else'  without  'if'  [FE]        AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  Node  node  =  fromNode.getParent();  [BUGGY]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(node.getNext());  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	Node  node  =  fromNode.getParent();	      Node    node    =    parent.getParent();    	non-compiled	[CE]  'else'  without  'if'	17	None	replace
81	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getNext());  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getNext());  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getNext());	  parent    ==    node    &&    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  not  a  statement	7	None	replace
82	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(fromNode.getNext());  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(fromNode.getNext());  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(fromNode.getNext());	  parent    ==    node    &&    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  not  a  statement	7	None	replace
83	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(parent.getNext());  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(parent.getNext());  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(parent.getNext());	  parent    ==    node    ||    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  not  a  statement	21	None	replace
84	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(fromNode.getNext());  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(fromNode.getNext());  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(fromNode.getNext());	  parent    ==    node    ||    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  not  a  statement	21	None	replace
85	[BUG]  [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(fromNode.getNext());  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(fromNode.getNext());  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(fromNode.getNext());	  if(NodeUtil.hasFinally(parent)||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  not  a  statement	12	None	replace
86	[BUG]  [BUGGY]  parent  ==  node)  {  return  computeFallThrough(node.getNext());  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node)  {  return  computeFallThrough(node.getNext());  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node)  {  return  computeFallThrough(node.getNext());	  if(NodeUtil.hasFinally(parent)||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  not  a  statement	12	None	replace
87	[BUG]  [BUGGY]  parent!=  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent.getNext());  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent!=  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent.getNext());  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent!=  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent.getNext());	  parent!=    node    &&    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  not  a  statement	10	None	replace
88	[BUG]  [BUGGY]  Node  parent!=  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  Node  parent!=  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	Node  parent!=  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());	  parent!=    node    &&    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  ';'  expected	10	None	replace
89	[BUG]  [BUGGY]  Node  parent  =  getCatchBlock(parent.getFirstChild());  [CE]  'else'  without  'if'  [FE]                AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  Node  parent  =  getCatchBlock(parent.getFirstChild());  [BUGGY]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(node.getNext());  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	Node  parent  =  getCatchBlock(parent.getFirstChild());	      Node    parent    =    getCatchBlock(parent);    	non-compiled	[CE]  'else'  without  'if'	5	None	replace
90	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent.getNext());  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent.getNext());  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent.getNext());	  parent    ==    node    &&    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  not  a  statement	7	None	replace
91	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.getCatchBlock(parent)  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  &&  NodeUtil.getCatchBlock(parent)  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  &&  NodeUtil.getCatchBlock(parent)  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }	  if(NodeUtil.hasFinally(parent)&&    node.getFirstChild()    ==    node)    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  not  a  statement	16	None	replace
92	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)&&  node.getFirstChild()  ==  parent)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)&&  node.getFirstChild()  ==  parent)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent)&&  node.getFirstChild()  ==  parent)  {  return  computeFollowNode(fromNode,  parent);  }	  if(NodeUtil.hasFinally(parent)&&    node.getFirstChild()    ==    node)    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  not  a  statement	16	None	replace
93	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(fromNode.getNext());  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(fromNode.getNext());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(fromNode.getNext());  }	  if(NodeUtil.hasFinally(parent)&&    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  not  a  statement	13	None	replace
94	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  [CE]  'else'  without  'if'  [FE]          AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  Node  node  =  node.getFirstChild();  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	Node  node  =  node.getFirstChild();	  if(NodeUtil.hasFinally(parent)&&    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  'else'  without  'if'	13	None	replace
95	[BUG]  [BUGGY]  Node  parent  =  toNode.getFirstChild();  [CE]  'else'  without  'if'  [FE]          AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  Node  parent  =  toNode.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(node.getNext());  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	Node  parent  =  toNode.getFirstChild();	      Node    parent    =    node.getFirstChild();    	non-compiled	[CE]  'else'  without  'if'	2	None	replace
96	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.getCatchBlock(parent)  ==  node)  {  return  computeFallThrough(node.getNext());  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  &&  NodeUtil.getCatchBlock(parent)  ==  node)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  &&  NodeUtil.getCatchBlock(parent)  ==  node)  {  return  computeFallThrough(node.getNext());  }	  if(NodeUtil.hasFinally(parent)&&    node.getFirstChild()    ==    node)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  not  a  statement	22	None	replace
97	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)||  node.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)||  node.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent)||  node.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }	  if(NodeUtil.hasFinally(parent)&&    node.getFirstChild()    ==    node)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  not  a  statement	22	None	replace
98	[BUG]  [BUGGY]  Node  node  =  toNode.getFirstChild();  [CE]  'else'  without  'if'  [FE]            AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  Node  node  =  toNode.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(node.getNext());  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	Node  node  =  toNode.getFirstChild();	      Node    node    =    parent.getFirstChild();    	non-compiled	[CE]  'else'  without  'if'	3	None	replace
99	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }	  if(NodeUtil.hasFinally(parent))    {    //    and    have    FINALLY    block.    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  not  a  statement	24	None	replace
100	[BUG]  [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  NodeUtil.hasFinally(parent)  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }	  if(NodeUtil.hasFinally(parent))    {    //    and    have    FINALLY    block.    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  not  a  statement	24	None	replace
101	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(node.getNext());  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(node.getNext());  }	  if(NodeUtil.hasFinally(parent))    {    //    and    have    FINALLY    block.    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  not  a  statement	24	None	replace
102	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  if(NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  if(NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  if(NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	if(NodeUtil.hasFinally(parent)||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    if(NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
103	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  if(NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  else  {  return  computeF  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  if(NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  if(NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  else  {  return  computeF  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	if(NodeUtil.hasFinally(parent)||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    if(NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  else  {  return  computeF	  	non-compiled	[CE]  ';'  expected	11	None	add
104	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(fromNode,  parent.getNext());  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(fromNode,  parent.getNext());  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(fromNode,  parent.getNext());	  parent    ==    node    ||    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  not  a  statement	21	None	replace
105	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(node.getNext());  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(node.getNext());  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(node.getNext());	  parent    ==    node    ||    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  not  a  statement	21	None	replace
106	[BUG]  [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(fromNode.getNext());  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(fromNode.getNext());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(fromNode.getNext());  }	  if(NodeUtil.hasFinally(parent)||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  not  a  statement	8	None	replace
107	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(fromNode,  parent.getNext());  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(fromNode,  parent.getNext());  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(fromNode,  parent.getNext());	  parent    ==    node    &&    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  not  a  statement	18	None	replace
108	[BUG]  [BUGGY]  Node  parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(parent.getNext());  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  Node  parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(parent.getNext());  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	Node  parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(parent.getNext());	  parent    ==    node    &&    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  ';'  expected	18	None	replace
109	[BUG]  [BUGGY]  parent  ==  NodeUtil.getCatchBlock(parent))  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  NodeUtil.getCatchBlock(parent))  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  NodeUtil.getCatchBlock(parent))  {  return  computeFollowNode(fromNode,  parent);  }	  if(NodeUtil.hasFinally(parent)&&    NodeUtil.hasFinally(parent))    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  not  a  statement	14	None	replace
110	[BUG]  [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }	  if(NodeUtil.hasFinally(parent)&&    NodeUtil.hasFinally(parent))    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  not  a  statement	14	None	replace
111	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent.getNext());  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent.getNext());  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent.getNext());	  parent    ==    node    ||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  not  a  statement	9	None	replace
112	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);	  parent    ==    node    ||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  not  a  statement	9	None	replace
113	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getFirstChild());  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getFirstChild());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getFirstChild());  }	  if(NodeUtil.hasFinally(parent))    {    //    and    have    FINALLY    block.    return    computeFallThrough(node.getFirstChild());    }    	non-compiled	[CE]  not  a  statement	20	None	replace
114	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(node.getFirstChild());  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(node.getFirstChild());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(node.getFirstChild());  }	  if(NodeUtil.hasFinally(parent))    {    //    and    have    FINALLY    block.    return    computeFallThrough(node.getFirstChild());    }    	non-compiled	[CE]  not  a  statement	20	None	replace
115	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getFirstChild());  }  if(NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  if(NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getFirstChild());  }  if(NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getFirstChild());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	if(NodeUtil.hasFinally(parent))    {    //    and    have    FINALLY    block.    return    computeFallThrough(node.getFirstChild());    }    if(NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getFirstChild());  }	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
116	[BUG]  [BUGGY]  Node  parentCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  Node  parentCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	Node  parentCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii	  parent!=    node    &&    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  ';'  expected	10	None	replace
117	[BUG]  [BUGGY]  Node  parentCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  return  nodeCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  Node  parentCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  return  nodeCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	Node  parentCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  return  nodeCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii	  parent!=    node    &&    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  ';'  expected	10	None	replace
118	[BUG]  [BUGGY]  Node  parentCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  nodeCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  Node  parentCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  nodeCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	Node  parentCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  nodeCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii	  parent!=    node    &&    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  ';'  expected	10	None	replace
119	[BUG]  [BUGGY]  Parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(node.getNext());  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  Parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(node.getNext());  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	Parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(node.getNext());	  parent    ==    node    ||    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  not  a  statement	21	None	replace
120	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getFirstChild());  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getFirstChild());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getFirstChild());  }	  if(NodeUtil.hasFinally(parent))    {    //    and    have    FINALLY    block.    return    computeFallThrough(node.getFirstChild());    }    	non-compiled	[CE]  not  a  statement	20	None	replace
121	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(node.getFirstChild());  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(node.getFirstChild());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(node.getFirstChild());  }	  if(NodeUtil.hasFinally(parent))    {    //    and    have    FINALLY    block.    return    computeFallThrough(node.getFirstChild());    }    	non-compiled	[CE]  not  a  statement	20	None	replace
122	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent)  {	  if(NodeUtil.hasFinally(parent))    {    //    and    have    FINALLY    block.    return    computeFallThrough(node.getFirstChild());    }    	non-compiled	[CE]  not  a  statement	20	None	replace
123	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getFirstChild());  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getFirstChild());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getFirstChild());  }	  if(NodeUtil.hasFinally(parent))    {    //    and    have    FINALLY    block.    return    computeFallThrough(node.getFirstChild());    }    	non-compiled	[CE]  not  a  statement	20	None	replace
124	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }	  if(NodeUtil.hasFinally(parent))    {    //    and    have    FINALLY    block.    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  not  a  statement	24	None	replace
125	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(node.getNext());  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(node.getNext());  }	  if(NodeUtil.hasFinally(parent))    {    //    and    have    FINALLY    block.    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  not  a  statement	24	None	replace
126	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }	  if(NodeUtil.hasFinally(parent))    {    //    and    have    FINALLY    block.    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  not  a  statement	24	None	replace
127	[BUG]  [BUGGY]  parent  ==  node  &&  parent.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  &&  parent.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  &&  parent.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }	  if(NodeUtil.hasFinally(parent)&&    NodeUtil.hasFinally(parent))    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  not  a  statement	14	None	replace
128	[BUG]  [BUGGY]  parent  ==  NodeUtil.getCatchBlock(parent)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  NodeUtil.getCatchBlock(parent)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  NodeUtil.getCatchBlock(parent)  {  return  computeFollowNode(fromNode,  parent);  }	  if(NodeUtil.hasFinally(parent)&&    NodeUtil.hasFinally(parent))    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  not  a  statement	14	None	replace
129	[BUG]  [BUGGY]  Node  nextSibling  =  child.getFirstChild();  [CE]  'else'  without  'if'  [FE]    AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  Node  nextSibling  =  child.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(node.getNext());  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	Node  nextSibling  =  child.getFirstChild();	      Node    nextSibling    =    parent.getFirstChild();    	non-compiled	[CE]  'else'  without  'if'	26	None	replace
130	[BUG]  [BUGGY]  parent  =  NodeUtil.getCatchBlock(parent);  [CE]  'else'  without  'if'  [FE]              AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  =  NodeUtil.getCatchBlock(parent);  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  =  NodeUtil.getCatchBlock(parent);	  if(NodeUtil.hasFinally(parent)&&    node.getFirstChild()    ==    node)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  'else'  without  'if'	22	None	replace
131	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(fromNode,  parent);  }	  if(NodeUtil.hasFinally(parent)&&    node.getFirstChild()    ==    node)    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  not  a  statement	16	None	replace
132	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.getFirstChild()  ==  parent)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  &&  NodeUtil.getFirstChild()  ==  parent)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  &&  NodeUtil.getFirstChild()  ==  parent)  {  return  computeFollowNode(fromNode,  parent);  }	  if(NodeUtil.hasFinally(parent)&&    node.getFirstChild()    ==    node)    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  not  a  statement	16	None	replace
133	[BUG]  [BUGGY]  parent  ==  node  &&  parent.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  &&  parent.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  &&  parent.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }	  if(NodeUtil.hasFinally(parent)&&    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  not  a  statement	13	None	replace
134	[BUG]  [BUGGY]  parent  ==  node  &&  parent.hasFinally())  {  return  computeFallThrough(node.getNext());  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  &&  parent.hasFinally())  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  &&  parent.hasFinally())  {  return  computeFallThrough(node.getNext());  }	  if(NodeUtil.hasFinally(parent)&&    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  not  a  statement	13	None	replace
135	[BUG]  [BUGGY]  Node  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getNext());  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  Node  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getNext());  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	Node  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getNext());	  parent    ==    node    &&    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  ';'  expected	7	None	replace
136	[BUG]  [BUGGY]  Parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  Parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	Parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());	  parent    ==    node    &&    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  not  a  statement	7	None	replace
137	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getNext());  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getNext());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getNext());  }	  if(NodeUtil.hasFinally(parent)||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(parent.getNext());    }    	non-compiled	[CE]  not  a  statement	15	None	replace
138	[BUG]  [BUGGY]  parent  <=  NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getNext());  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  parent  <=  NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getNext());  }  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  <=  NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getNext());  }	  if(NodeUtil.hasFinally(parent)||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(parent.getNext());    }    	non-compiled	[CE]  not  a  statement	15	None	replace
139	[BUG]  [BUGGY]  Parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  Parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	Parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());	  parent    ==    node    ||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  not  a  statement	9	None	replace
140	[BUG]  [BUGGY]  Node  parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){    [BUGGY]  Node  parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  [BUGGY]    return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	Node  parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());	  parent    ==    node    ||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  ';'  expected	9	None	replace
