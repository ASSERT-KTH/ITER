bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    Node  parent  =  node.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError  [CONTEXT]  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  [BUGGY]    Node  parent  =  node.getParent();  [BUGGY]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(node.getNext());  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	    Node  parent  =  node.getParent();		non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	6	None	add
2	[BUG]  [BUGGY]    Node  parent  =  node.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError  [CONTEXT]  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  [BUGGY]    Node  parent  =  node.getFirstChild();  [BUGGY]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(node.getNext());  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	    Node  parent  =  node.getFirstChild();		non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	6	None	add
3	[BUG]  [BUGGY]    Node  node  =  parent.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError  [CONTEXT]  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  [BUGGY]    Node  node  =  parent.getFirstChild();  [BUGGY]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(node.getNext());  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	    Node  node  =  parent.getFirstChild();		non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	6	None	add
4	[BUG]  [BUGGY]    Node  parent  =  parent.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError  [CONTEXT]  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  [BUGGY]    Node  parent  =  parent.getParent();  [BUGGY]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(node.getNext());  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	    Node  parent  =  parent.getParent();		non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	6	None	add
5	[BUG]  [BUGGY]    Node  parent  =  getCatchBlock(parent);  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError  [CONTEXT]  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  [BUGGY]    Node  parent  =  getCatchBlock(parent);  [BUGGY]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(node.getNext());  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	    Node  parent  =  getCatchBlock(parent);		non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	6	None	add
6	[BUG]  [BUGGY]    Node  parent  =  node.getNext();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              AssertionFailedError  [CONTEXT]  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  [BUGGY]    Node  parent  =  node.getNext();  [BUGGY]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(node.getNext());  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	    Node  parent  =  node.getNext();		non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	6	None	add
7	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  [CE]  not  a  statement  [FE]    AssertionFailedError  [CONTEXT]  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  [BUGGY]  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());	if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  	non-compiled	[CE]  not  a  statement	5	None	replace
8	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  [CE]  'else'  without  'if'  [FE]      AssertionFailedError  [CONTEXT]  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  [BUGGY]  if(NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  [BUGGY]  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	if(NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }	if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  	non-compiled	[CE]  'else'  without  'if'	5	None	replace
9	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  [CE]  not  a  statement  [FE]        AssertionFailedError  [CONTEXT]  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  [BUGGY]  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());	if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  	non-compiled	[CE]  not  a  statement	5	None	replace
10	[BUG]  [BUGGY]  parent!=  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  [CE]  not  a  statement  [FE]          AssertionFailedError  [CONTEXT]  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  [BUGGY]  parent!=  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  [BUGGY]  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent!=  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());	if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  	non-compiled	[CE]  not  a  statement	5	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  [BUGGY]  if(NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  [BUGGY]  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	add	if(NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());	if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  	compilable	  [FE]  AssertionFailedError  	5	3	replace
12	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  [BUGGY]  if(NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  [BUGGY]  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	if(NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());	if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  	compilable	  [FE]  AssertionFailedError  	5	3	replace
13	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  [CE]  'else'  without  'if'  [FE]    AssertionFailedError  [CONTEXT]  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  [BUGGY]  if(NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  [BUGGY]  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	if(NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }	if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  	non-compiled	[CE]  'else'  without  'if'	5	None	replace
14	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  'else'  without  'if'  [FE]      AssertionFailedError  [CONTEXT]  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  [BUGGY]  if(NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	if(NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }	if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  	non-compiled	[CE]  'else'  without  'if'	5	None	replace
15	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getNext());  }  [CE]  'else'  without  'if'  [FE]        AssertionFailedError  [CONTEXT]  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  [BUGGY]  if(NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getNext());  }  [BUGGY]  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	if(NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getNext());  }	if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  	non-compiled	[CE]  'else'  without  'if'	5	None	replace
16	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(parent)&&  node.getFirstChild()  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  'else'  without  'if'  [FE]          AssertionFailedError  [CONTEXT]  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  [BUGGY]  if(NodeUtil.hasFinally(parent)&&  node.getFirstChild()  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	if(NodeUtil.hasFinally(parent)&&  node.getFirstChild()  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }	if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  	non-compiled	[CE]  'else'  without  'if'	5	None	replace
17	[BUG]  [BUGGY]    Node  node  =  parent.getParent();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError  [CONTEXT]  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  [BUGGY]    Node  node  =  parent.getParent();  [BUGGY]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(node.getNext());  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	    Node  node  =  parent.getParent();		non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	6	None	add
18	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(node.getNext());  [CE]  not  a  statement  [FE]    AssertionFailedError  [CONTEXT]  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(node.getNext());  [BUGGY]  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(node.getNext());	if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  	non-compiled	[CE]  not  a  statement	5	None	replace
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  [BUGGY]  if(NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getFirstChild());  }  [BUGGY]  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	add	if(NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getFirstChild());  }	if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  	compilable	  [FE]  AssertionFailedError  	5	3	replace
20	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getFirstChild());  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  [BUGGY]  if(NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getFirstChild());  }  [BUGGY]  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	if(NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getFirstChild());  }	if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  	compilable	  [FE]  AssertionFailedError  	5	3	replace
21	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(node.getNext());  [CE]  not  a  statement  [FE]        AssertionFailedError  [CONTEXT]  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(node.getNext());  [BUGGY]  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(node.getNext());	if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  	non-compiled	[CE]  not  a  statement	5	None	replace
22	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(parent)&&  node.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  [CE]  'else'  without  'if'  [FE]          AssertionFailedError  [CONTEXT]  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  [BUGGY]  if(NodeUtil.hasFinally(parent)&&  node.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	if(NodeUtil.hasFinally(parent)&&  node.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }	if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  	non-compiled	[CE]  'else'  without  'if'	5	None	replace
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  [BUGGY]  if(NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  [BUGGY]  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	add	if(NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }	if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  	compilable	  [FE]  AssertionFailedError  	5	3	replace
24	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  [BUGGY]  if(NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  [BUGGY]  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	if(NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }	if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  	compilable	  [FE]  AssertionFailedError  	5	3	replace
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  [BUGGY]    Node  nextSibling  =  parent.getFirstChild();  [BUGGY]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(node.getNext());  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	add	    Node  nextSibling  =  parent.getFirstChild();		compilable	  [FE]  AssertionFailedError  	6	3	add
26	[BUG]  [BUGGY]    Node  nextSibling  =  parent.getFirstChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  [BUGGY]    Node  nextSibling  =  parent.getFirstChild();  [BUGGY]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(node.getNext());  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	    Node  nextSibling  =  parent.getFirstChild();		compilable	  [FE]  AssertionFailedError  	6	3	add
