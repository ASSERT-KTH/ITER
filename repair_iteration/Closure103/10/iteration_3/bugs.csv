bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  safeMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  safeMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	safeMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));	  safelyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
2	[BUG]  [BUGGY]  safeMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  safeMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	safeMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));	  safelyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
3	[BUG]  [BUGGY]  finalMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  finalMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	finalMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));	  finallyMap.put(lastJump,    computeFallThrough(curHandler.getFirstChild()));    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
4	[BUG]  [BUGGY]  finallyMap.put(lastJump,  computeFollowNode(curHandler.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  finallyMap.put(lastJump,  computeFollowNode(curHandler.getFirstChild()));  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	finallyMap.put(lastJump,  computeFollowNode(curHandler.getFirstChild()));	  finallyMap.put(lastJump,    computeFallThrough(curHandler.getFirstChild()));    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
5	[BUG]  [BUGGY]  parent!=  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent!=  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent!=  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());	  parent    ==    node)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
6	[BUG]  [BUGGY]  parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild());  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild());	  parent    ==    node)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
7	[BUG]  [BUGGY]  parent.getParent())  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.getParent())  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild());  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.getParent())  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild());	  parent.getParent())    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
8	[BUG]  [BUGGY]  parent.replaceChild(node,  lastJump))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.replaceChild(node,  lastJump))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.replaceChild(node,  lastJump))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());	  parent.getParent())    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
9	[BUG]  [BUGGY]  for(Node  node  :  finallyMap.values())  {  if(!node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  for(Node  node  :  finallyMap.values())  {  if(!node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getLastChild());  }  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	for(Node  node  :  finallyMap.values())  {  if(!node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getLastChild());  }	  for(Node    node    :    finallyMap.values())    {    if(!node.hasChildren())    {    connectToPossibleExceptionHandler(node,    node.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
10	[BUG]  [BUGGY]  For(Node  node  :  finallyMap.values())  {  if(!node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  For(Node  node  :  finallyMap.values())  {  if(!node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	For(Node  node  :  finallyMap.values())  {  if(!node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }	  for(Node    node    :    finallyMap.values())    {    if(!node.hasChildren())    {    connectToPossibleExceptionHandler(node,    node.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
11	[BUG]  [BUGGY]  for(Node  node  :  finallyMap.values())  {  if(!lastJump.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  for(Node  node  :  finallyMap.values())  {  if(!lastJump.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	for(Node  node  :  finallyMap.values())  {  if(!lastJump.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }	  for(Node    node    :    finallyMap.values())    {    if(!node.hasChildren())    {    connectToPossibleExceptionHandler(node,    node.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
12	[BUG]  [BUGGY]  parent.replaceChild(node,  Node.newString(Token.NAME,  curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.replaceChild(node,  Node.newString(Token.NAME,  curHandler.getLastChild()));  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.replaceChild(node,  Node.newString(Token.NAME,  curHandler.getLastChild()));	  parent.replaceChild(node,    Node.newString(Token.NAME,    curHandler.getFirstChild()));    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
13	[BUG]  [BUGGY]  parent.replaceChild(node,  Node.newString(Token.NAME,  curHandler.getFirstChild()),  lastJump);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.replaceChild(node,  Node.newString(Token.NAME,  curHandler.getFirstChild()),  lastJump);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.replaceChild(node,  Node.newString(Token.NAME,  curHandler.getFirstChild()),  lastJump);	  parent.replaceChild(node,    Node.newString(Token.NAME,    curHandler.getFirstChild()));    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
14	[BUG]  [BUGGY]  parent.replaceChild(node,  Node.newString(Token.NAME,  curHandler.getFirstChild()),  node);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.replaceChild(node,  Node.newString(Token.NAME,  curHandler.getFirstChild()),  node);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.replaceChild(node,  Node.newString(Token.NAME,  curHandler.getFirstChild()),  node);	  parent.replaceChild(node,    Node.newString(Token.NAME,    curHandler.getFirstChild()));    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
15	[BUG]  [BUGGY]  parent.replaceChild(node,  Node.newString(Token.NAME,  curHandler.getFirstChild(),  lastJump));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.replaceChild(node,  Node.newString(Token.NAME,  curHandler.getFirstChild(),  lastJump));  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.replaceChild(node,  Node.newString(Token.NAME,  curHandler.getFirstChild(),  lastJump));	  parent.replaceChild(node,    Node.newString(Token.NAME,    curHandler.getFirstChild()));    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
16	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild(),  finallyMap);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild(),  finallyMap);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild(),  finallyMap);	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild(),    finallyMap);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
17	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  computeFallThrough(curHandler.getLastChild()));  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  computeFallThrough(curHandler.getLastChild()));	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild(),    finallyMap);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
18	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  computeFallThrough(curHandler.getLastChild()),  finallyMap);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  computeFallThrough(curHandler.getLastChild()),  finallyMap);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  computeFallThrough(curHandler.getLastChild()),  finallyMap);	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild(),    finallyMap);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
19	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  cacheFallThrough);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  cacheFallThrough);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  cacheFallThrough);	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild(),    finallyMap);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
20	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  node.getLastChild(),  curHandler);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  node.getLastChild(),  curHandler);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  node.getLastChild(),  curHandler);	  connectToPossibleExceptionHandler(node,    node.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
21	[BUG]  [BUGGY]  parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);	  parent    ==    node)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
22	[BUG]  [BUGGY]  parent!=  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent!=  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent!=  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);	  parent    ==    node)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
23	[BUG]  [BUGGY]  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild));  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild));	  parent    ==    node)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
24	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild(),  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild(),  nodePriorities);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild(),  nodePriorities);	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild(),    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
25	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  firstJump);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  firstJump);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  firstJump);	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild(),    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
26	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  iter);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  iter);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  iter);	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild(),    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
27	[BUG]  [BUGGY]  RectangleEdge.createEdge(node,  Branch.UNCOND,  curHandler.getFirstChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  RectangleEdge.createEdge(node,  Branch.UNCOND,  curHandler.getFirstChild());  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	RectangleEdge.createEdge(node,  Branch.UNCOND,  curHandler.getFirstChild());	  RectangleEdge.createEdge(node,    Branch.UNCOND,    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
28	[BUG]  [BUGGY]  RectangleEdge.createEdge(lastJump,  Branch.UNCOND,  curHandler.getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  RectangleEdge.createEdge(lastJump,  Branch.UNCOND,  curHandler.getLastChild());  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	RectangleEdge.createEdge(lastJump,  Branch.UNCOND,  curHandler.getLastChild());	  RectangleEdge.createEdge(node,    Branch.UNCOND,    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
29	[BUG]  [BUGGY]  RectangleEdge.createEdge(node,  Branch.UNCOND,  curHandler.getLastChild(),  node);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  RectangleEdge.createEdge(node,  Branch.UNCOND,  curHandler.getLastChild(),  node);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	RectangleEdge.createEdge(node,  Branch.UNCOND,  curHandler.getLastChild(),  node);	  RectangleEdge.createEdge(node,    Branch.UNCOND,    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
30	[BUG]  [BUGGY]  RectangleEdge.createEdge(node,  Branch.UNCOND,  curHandler.getLastChild(),  lastJump);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  RectangleEdge.createEdge(node,  Branch.UNCOND,  curHandler.getLastChild(),  lastJump);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	RectangleEdge.createEdge(node,  Branch.UNCOND,  curHandler.getLastChild(),  lastJump);	  RectangleEdge.createEdge(node,    Branch.UNCOND,    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
31	[BUG]  [BUGGY]  parent.replaceChild(node,  NodeUtil.getFinally(curHandler),  node);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.replaceChild(node,  NodeUtil.getFinally(curHandler),  node);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.replaceChild(node,  NodeUtil.getFinally(curHandler),  node);	  parent.replaceChild(node,    NodeUtil.getFinally(curHandler));    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
32	[BUG]  [BUGGY]  parent.replaceChild(node,  NodeUtil.getFinally(curHandler),  lastJump);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.replaceChild(node,  NodeUtil.getFinally(curHandler),  lastJump);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.replaceChild(node,  NodeUtil.getFinally(curHandler),  lastJump);	  parent.replaceChild(node,    NodeUtil.getFinally(curHandler));    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
33	[BUG]  [BUGGY]  parent.replaceChild(node,  NodeUtil.getFinally(lastJump));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.replaceChild(node,  NodeUtil.getFinally(lastJump));  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.replaceChild(node,  NodeUtil.getFinally(lastJump));	  parent.replaceChild(node,    NodeUtil.getFinally(curHandler));    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
34	[BUG]  [BUGGY]  parent.replaceChild(node,  NodeUtil.getFinally(curHandler),  this);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.replaceChild(node,  NodeUtil.getFinally(curHandler),  this);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.replaceChild(node,  NodeUtil.getFinally(curHandler),  this);	  parent.replaceChild(node,    NodeUtil.getFinally(curHandler));    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
35	[BUG]  [BUGGY]  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()),  null);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()),  null);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()),  null);	  finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()),    null);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
36	[BUG]  [BUGGY]  parent.replaceChild(node,  lastJump,  curHandler);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.replaceChild(node,  lastJump,  curHandler);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.replaceChild(node,  lastJump,  curHandler);	  parent.replaceChild(node,    lastJump);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
37	[BUG]  [BUGGY]  parent.replaceChild(node,  lastJump,  finallyMap);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.replaceChild(node,  lastJump,  finallyMap);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.replaceChild(node,  lastJump,  finallyMap);	  parent.replaceChild(node,    lastJump);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
38	[BUG]  [BUGGY]  parent.replaceChild(node,  lastJump,  node);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.replaceChild(node,  lastJump,  node);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.replaceChild(node,  lastJump,  node);	  parent.replaceChild(node,    lastJump);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
39	[BUG]  [BUGGY]  parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }	  parent    ==    node)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
40	[BUG]  [BUGGY]  RectangleEdge.this.connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  RectangleEdge.this.connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	RectangleEdge.this.connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler);	  RectangleEdge.this.connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
41	[BUG]  [BUGGY]  RectangleEdge.this.connectToPossibleExceptionHandler(node,  Branch.UNCOND,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  RectangleEdge.this.connectToPossibleExceptionHandler(node,  Branch.UNCOND,  nodePriorities);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	RectangleEdge.this.connectToPossibleExceptionHandler(node,  Branch.UNCOND,  nodePriorities);	  RectangleEdge.this.connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
42	[BUG]  [BUGGY]  RectangleEdge.this.connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  RectangleEdge.this.connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null,  nodePriorities);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	RectangleEdge.this.connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null,  nodePriorities);	  RectangleEdge.this.connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
43	[BUG]  [BUGGY]  RectangleEdge.this.connectToPossibleExceptionHandler(node,  branch.UNCOND,  curHandler);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  RectangleEdge.this.connectToPossibleExceptionHandler(node,  branch.UNCOND,  curHandler);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	RectangleEdge.this.connectToPossibleExceptionHandler(node,  branch.UNCOND,  curHandler);	  RectangleEdge.this.connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
44	[BUG]  [BUGGY]  NeighborUtil.mayHaveSideEffects(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  NeighborUtil.mayHaveSideEffects(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NeighborUtil.mayHaveSideEffects(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());	  NeighborUtil.mayHaveSideEffects(node))    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
45	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NodeUtil.mayHaveSideEffects(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());	  NeighborUtil.mayHaveSideEffects(node))    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
46	[BUG]  [BUGGY]  NeighborUtil.mayHaveSideEffects(lastJump))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  NeighborUtil.mayHaveSideEffects(lastJump))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NeighborUtil.mayHaveSideEffects(lastJump))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());	  NeighborUtil.mayHaveSideEffects(node))    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
47	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(lastJump))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(lastJump))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NodeUtil.mayHaveSideEffects(lastJump))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());	  NeighborUtil.mayHaveSideEffects(node))    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
48	[BUG]  [BUGGY]  NeighborUtil.mayHaveSideEffects(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  NeighborUtil.mayHaveSideEffects(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NeighborUtil.mayHaveSideEffects(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }	  NeighborUtil.mayHaveSideEffects(node))    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
49	[BUG]  [BUGGY]  for(Node  node  :  finallyMap.values())  {  if(lastJump!=  null)  {  connectToPossibleExceptionHandler(node,  node.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  for(Node  node  :  finallyMap.values())  {  if(lastJump!=  null)  {  connectToPossibleExceptionHandler(node,  node.getLastChild());  }  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	for(Node  node  :  finallyMap.values())  {  if(lastJump!=  null)  {  connectToPossibleExceptionHandler(node,  node.getLastChild());  }	  for(Node    node    :    finallyMap.values())    {    if(lastJump!=    null)    {    connectToPossibleExceptionHandler(node,    node.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
50	[BUG]  [BUGGY]  for(Node  node  :  finallyMap.values())  {  if(lastJump  ==  null)  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  for(Node  node  :  finallyMap.values())  {  if(lastJump  ==  null)  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	for(Node  node  :  finallyMap.values())  {  if(lastJump  ==  null)  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }	  for(Node    node    :    finallyMap.values())    {    if(lastJump!=    null)    {    connectToPossibleExceptionHandler(node,    node.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
51	[BUG]  [BUGGY]  for(Node  node  :  finallyMap.values())  {  if(lastJump  ==  null)  {  connectToPossibleExceptionHandler(node,  node.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  for(Node  node  :  finallyMap.values())  {  if(lastJump  ==  null)  {  connectToPossibleExceptionHandler(node,  node.getLastChild());  }  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	for(Node  node  :  finallyMap.values())  {  if(lastJump  ==  null)  {  connectToPossibleExceptionHandler(node,  node.getLastChild());  }	  for(Node    node    :    finallyMap.values())    {    if(lastJump!=    null)    {    connectToPossibleExceptionHandler(node,    node.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
52	[BUG]  [BUGGY]  ConnectToPossibleExceptionHandler(node,  curHandler.getLastChild(),  node);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  ConnectToPossibleExceptionHandler(node,  curHandler.getLastChild(),  node);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	ConnectToPossibleExceptionHandler(node,  curHandler.getLastChild(),  node);	  ConnectToPossibleExceptionHandler(node,    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
53	[BUG]  [BUGGY]  ConnectToPossibleExceptionHandler(node,  curHandler.getLastChild(),  lastJump);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  ConnectToPossibleExceptionHandler(node,  curHandler.getLastChild(),  lastJump);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	ConnectToPossibleExceptionHandler(node,  curHandler.getLastChild(),  lastJump);	  ConnectToPossibleExceptionHandler(node,    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
54	[BUG]  [BUGGY]  for(Node  node  :  curHandler.values())  {  if(node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  for(Node  node  :  curHandler.values())  {  if(node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getLastChild());  }  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	for(Node  node  :  curHandler.values())  {  if(node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getLastChild());  }	  for(Node    node    :    finallyMap.values())    {    if(node.hasChildren())    {    connectToPossibleExceptionHandler(node,    node.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
55	[BUG]  [BUGGY]  for(Node  node  :  finallyMap.values())  {  if(node.getFirstChild())  {  connectToPossibleExceptionHandler(node,  node.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  for(Node  node  :  finallyMap.values())  {  if(node.getFirstChild())  {  connectToPossibleExceptionHandler(node,  node.getLastChild());  }  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	for(Node  node  :  finallyMap.values())  {  if(node.getFirstChild())  {  connectToPossibleExceptionHandler(node,  node.getLastChild());  }	  for(Node    node    :    finallyMap.values())    {    if(node.hasChildren())    {    connectToPossibleExceptionHandler(node,    node.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
56	[BUG]  [BUGGY]  subsequentlyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  subsequentlyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	subsequentlyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));	  previouslyMap.put(lastJump,    computeFollowNode(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
57	[BUG]  [BUGGY]  thenBlock.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  thenBlock.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	thenBlock.put(lastJump,  computeFallThrough(curHandler.getLastChild()));	  previouslyMap.put(lastJump,    computeFollowNode(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
58	[BUG]  [BUGGY]  Node  curHandler  =  node.getLastChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  Node  curHandler  =  node.getLastChild();  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	Node  curHandler  =  node.getLastChild();	  Node    curHandler    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
59	[BUG]  [BUGGY]  Node  curHandler  =  node.getNext();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  Node  curHandler  =  node.getNext();  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	Node  curHandler  =  node.getNext();	  Node    curHandler    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
60	[BUG]  [BUGGY]  Node  curHandler  =  lastJump.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  Node  curHandler  =  lastJump.getFirstChild();  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	Node  curHandler  =  lastJump.getFirstChild();	  Node    curHandler    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
61	[BUG]  [BUGGY]  Node  curHandler  =  node.getParent();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  Node  curHandler  =  node.getParent();  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	Node  curHandler  =  node.getParent();	  Node    curHandler    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
62	[BUG]  [BUGGY]  Node  parent  =  curHandler.getParent();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  Node  parent  =  curHandler.getParent();  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	Node  parent  =  curHandler.getParent();	  Node    parent    =    node.getParent();    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
63	[BUG]  [BUGGY]  Node  parent  =  node.getNext();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  Node  parent  =  node.getNext();  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	Node  parent  =  node.getNext();	  Node    parent    =    node.getParent();    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
64	[BUG]  [BUGGY]  Node  parent  =  node.getLastChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  Node  parent  =  node.getLastChild();  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	Node  parent  =  node.getLastChild();	  Node    parent    =    node.getParent();    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
65	[BUG]  [BUGGY]  Node  parent  =  node.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  Node  parent  =  node.getFirstChild();  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	Node  parent  =  node.getFirstChild();	  Node    parent    =    node.getParent();    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
66	[BUG]  [BUGGY]  fortunatelyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  fortunatelyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	fortunatelyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));	  fortunatelyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
67	[BUG]  [BUGGY]  fortunatelyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()),  node);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  fortunatelyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()),  node);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	fortunatelyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()),  node);	  fortunatelyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
68	[BUG]  [BUGGY]  fortunatelyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()),  null);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  fortunatelyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()),  null);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	fortunatelyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()),  null);	  fortunatelyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
69	[BUG]  [BUGGY]  fortunatelyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()),  curHandler);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  fortunatelyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()),  curHandler);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	fortunatelyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()),  curHandler);	  fortunatelyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
70	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(lastJump,  Branch.UNCOND,  curHandler,  finallyMap);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(lastJump,  Branch.UNCOND,  curHandler,  finallyMap);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(lastJump,  Branch.UNCOND,  curHandler,  finallyMap);	  connectToPossibleExceptionHandler(lastJump,    Branch.UNCOND,    curHandler);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
71	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(lastJump,  Branch.UNCOND,  curHandler,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(lastJump,  Branch.UNCOND,  curHandler,  nodePriorities);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(lastJump,  Branch.UNCOND,  curHandler,  nodePriorities);	  connectToPossibleExceptionHandler(lastJump,    Branch.UNCOND,    curHandler);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
72	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(lastJump,  Branch.UNCOND,  curHandler,  node);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(lastJump,  Branch.UNCOND,  curHandler,  node);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(lastJump,  Branch.UNCOND,  curHandler,  node);	  connectToPossibleExceptionHandler(lastJump,    Branch.UNCOND,    curHandler);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
73	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler,  lastJump);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler,  lastJump);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler,  lastJump);	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
74	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler,  nodePriorities);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler,  nodePriorities);	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
75	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.isFinally(lastJump));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.isFinally(lastJump));  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.isFinally(lastJump));	  connectToPossibleExceptionHandler(node,    NodeUtil.isFinally(curHandler));    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
76	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.isExpressionNode(curHandler));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.isExpressionNode(curHandler));  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.isExpressionNode(curHandler));	  connectToPossibleExceptionHandler(node,    NodeUtil.isFinally(curHandler));    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
77	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.isFinally(curHandler),  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.isFinally(curHandler),  nodePriorities);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.isFinally(curHandler),  nodePriorities);	  connectToPossibleExceptionHandler(node,    NodeUtil.isFinally(curHandler));    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
78	[BUG]  [BUGGY]  parent.replaceChild(node,  curHandler.getLastChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.replaceChild(node,  curHandler.getLastChild());  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.replaceChild(node,  curHandler.getLastChild());	  parent.removeChild(curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
79	[BUG]  [BUGGY]  parent.removeChild(curHandler.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.removeChild(curHandler.getFirstChild());  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.removeChild(curHandler.getFirstChild());	  parent.removeChild(curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
80	[BUG]  [BUGGY]  For(Node  node  :  finallyMap.values())  {  if(lastJump.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  For(Node  node  :  finallyMap.values())  {  if(lastJump.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	For(Node  node  :  finallyMap.values())  {  if(lastJump.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }	  For(Node    node    :    finallyMap.values())    {    if(node.hasChildren())    {    connectToPossibleExceptionHandler(node,    node.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
81	[BUG]  [BUGGY]  For(Node  node  :  finallyMap.values())  {  if(node.hasChildren()  ||  node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  For(Node  node  :  finallyMap.values())  {  if(node.hasChildren()  ||  node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	For(Node  node  :  finallyMap.values())  {  if(node.hasChildren()  ||  node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }	  For(Node    node    :    finallyMap.values())    {    if(node.hasChildren())    {    connectToPossibleExceptionHandler(node,    node.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
82	[BUG]  [BUGGY]  Node  node  =  finallyMap.get(lastJump);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  Node  node  =  finallyMap.get(lastJump);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	Node  node  =  finallyMap.get(lastJump);	  For(Node    node    :    finallyMap.values())    {    if(node.hasChildren())    {    connectToPossibleExceptionHandler(node,    node.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
83	[BUG]  [BUGGY]  parent.replaceChild(node,  curHandler,  finallyMap);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.replaceChild(node,  curHandler,  finallyMap);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.replaceChild(node,  curHandler,  finallyMap);	  parent.replaceChild(node,    curHandler);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
84	[BUG]  [BUGGY]  parent.replaceChild(node,  curHandler,  lastJump);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.replaceChild(node,  curHandler,  lastJump);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.replaceChild(node,  curHandler,  lastJump);	  parent.replaceChild(node,    curHandler);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
85	[BUG]  [BUGGY]  parent.replaceChild(node,  curHandler,  node);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.replaceChild(node,  curHandler,  node);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.replaceChild(node,  curHandler,  node);	  parent.replaceChild(node,    curHandler);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
86	[BUG]  [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild(),  lastJump);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild(),  lastJump);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild(),  lastJump);	  ConnectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild(),    lastJump);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
87	[BUG]  [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  node);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  node);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  node);	  ConnectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild(),    lastJump);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
88	[BUG]  [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  lastJump,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  lastJump,  nodePriorities);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  lastJump,  nodePriorities);	  ConnectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild(),    lastJump);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
89	[BUG]  [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  lastJump,  node);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  lastJump,  node);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  lastJump,  node);	  ConnectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild(),    lastJump);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
90	[BUG]  [BUGGY]  ConnectToPossibleExceptionHandler(lastJump,  Branch.UNCOND,  curHandler.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  ConnectToPossibleExceptionHandler(lastJump,  Branch.UNCOND,  curHandler.getFirstChild());  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	ConnectToPossibleExceptionHandler(lastJump,  Branch.UNCOND,  curHandler.getFirstChild());	  ConnectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
91	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(lastJump),  nodePriorities);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(lastJump),  nodePriorities);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(lastJump),  nodePriorities);	  connectToPossibleExceptionHandler(node,    NodeUtil.getFinally(lastJump));    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
92	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(lastJump),  curHandler);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(lastJump),  curHandler);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(lastJump),  curHandler);	  connectToPossibleExceptionHandler(node,    NodeUtil.getFinally(lastJump));    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
93	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(lastJump,  NodeUtil.getFinally(node));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(lastJump,  NodeUtil.getFinally(node));  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(lastJump,  NodeUtil.getFinally(node));	  connectToPossibleExceptionHandler(node,    NodeUtil.getFinally(lastJump));    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
94	[BUG]  [BUGGY]  Node  curHandler  =  curHandler.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  Node  curHandler  =  curHandler.getFirstChild();  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	Node  curHandler  =  curHandler.getFirstChild();	  Node    curHandler    =    curHandler.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
95	[BUG]  [BUGGY]  Node  curHandler  =  lastJump.getLastChild();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  Node  curHandler  =  lastJump.getLastChild();  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	Node  curHandler  =  lastJump.getLastChild();	  Node    curHandler    =    curHandler.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
96	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  computeFallThrough(curHandler.getLastChild()));	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    lastJump);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
97	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  lastJump,  curHandler);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  lastJump,  curHandler);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  lastJump,  curHandler);	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    lastJump);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
98	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(lastJump,  Branch.UNCOND,  node);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(lastJump,  Branch.UNCOND,  node);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(lastJump,  Branch.UNCOND,  node);	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    lastJump);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
99	[BUG]  [BUGGY]  parent.replaceChild(node,  NodeUtil.hasFinally(curHandler),  node);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.replaceChild(node,  NodeUtil.hasFinally(curHandler),  node);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.replaceChild(node,  NodeUtil.hasFinally(curHandler),  node);	  parent.replaceChild(node,    NodeUtil.hasFinally(curHandler));    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
100	[BUG]  [BUGGY]  parent.replaceChild(node,  NodeUtil.hasFinally(lastJump));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.replaceChild(node,  NodeUtil.hasFinally(lastJump));  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.replaceChild(node,  NodeUtil.hasFinally(lastJump));	  parent.replaceChild(node,    NodeUtil.hasFinally(curHandler));    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
101	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  curHandler.getLastChild(),  lastJump);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  curHandler.getLastChild(),  lastJump);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  curHandler.getLastChild(),  lastJump);	  connectToPossibleExceptionHandler(node,    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
102	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  curHandler.getLastChild(),  node);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  curHandler.getLastChild(),  node);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  curHandler.getLastChild(),  node);	  connectToPossibleExceptionHandler(node,    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
103	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  curHandler.getLastChild(),  null);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  curHandler.getLastChild(),  null);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  curHandler.getLastChild(),  null);	  connectToPossibleExceptionHandler(node,    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
104	[BUG]  [BUGGY]  Node  node  =  curHandler.getLastChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  Node  node  =  curHandler.getLastChild();  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	Node  node  =  curHandler.getLastChild();	  Node    node    =    curHandler.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
105	[BUG]  [BUGGY]  Node  node  =  curHandler.getNext();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  Node  node  =  curHandler.getNext();  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	Node  node  =  curHandler.getNext();	  Node    node    =    curHandler.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
106	[BUG]  [BUGGY]  Node  node  =  lastJump.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  Node  node  =  lastJump.getFirstChild();  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	Node  node  =  lastJump.getFirstChild();	  Node    node    =    curHandler.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
107	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild(),  null);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild(),  null);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild(),  null);	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild(),    null);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
108	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  this);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  this);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  this);	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild(),    null);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
109	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  curHandler.getFirstChild(),  lastJump);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  curHandler.getFirstChild(),  lastJump);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  curHandler.getFirstChild(),  lastJump);	  connectToPossibleExceptionHandler(node,    node.getFirstChild(),    lastJump);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
110	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  node.getLastChild(),  lastJump);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  node.getLastChild(),  lastJump);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  node.getLastChild(),  lastJump);	  connectToPossibleExceptionHandler(node,    node.getFirstChild(),    lastJump);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
111	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  node.getFirstChild(),  curHandler);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  node.getFirstChild(),  curHandler);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  node.getFirstChild(),  curHandler);	  connectToPossibleExceptionHandler(node,    node.getFirstChild(),    lastJump);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
112	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  node.getFirstChild(),  lastJump,  curHandler);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  node.getFirstChild(),  lastJump,  curHandler);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  node.getFirstChild(),  lastJump,  curHandler);	  connectToPossibleExceptionHandler(node,    node.getFirstChild(),    lastJump);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
113	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  lastJump.getFirstChild(),  node);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  lastJump.getFirstChild(),  node);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  lastJump.getFirstChild(),  node);	  connectToPossibleExceptionHandler(node,    node.getFirstChild(),    lastJump);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
114	[BUG]  [BUGGY]  NeighborUtil.mayHaveSideEffects(lastJump))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  NeighborUtil.mayHaveSideEffects(lastJump))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NeighborUtil.mayHaveSideEffects(lastJump))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }	  NeighborUtil.mayHaveSideEffects(node))    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
115	[BUG]  [BUGGY]  NeighborUtil.deepSideEffects(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  NeighborUtil.deepSideEffects(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NeighborUtil.deepSideEffects(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }	  NeighborUtil.mayHaveSideEffects(node))    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
116	[BUG]  [BUGGY]  NeighborUtil.mayHaveSideEffects(node)&&  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  NeighborUtil.mayHaveSideEffects(node)&&  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NeighborUtil.mayHaveSideEffects(node)&&  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());	  NeighborUtil.mayHaveSideEffects(node))    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
117	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  nodePriorities,  finallyMap);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  nodePriorities,  finallyMap);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  nodePriorities,  finallyMap);	  connectToPossibleExceptionHandler(node,    NodeUtil.getFinally(curHandler),    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
118	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  nodePriorities,  firstJump);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  nodePriorities,  firstJump);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  nodePriorities,  firstJump);	  connectToPossibleExceptionHandler(node,    NodeUtil.getFinally(curHandler),    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
119	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Node.UNCOND,  curHandler.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Node.UNCOND,  curHandler.getFirstChild());  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Node.UNCOND,  curHandler.getFirstChild());	  connectToPossibleExceptionHandler(node,    Node.UNCOND,    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
120	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Node.UNCOND,  curHandler.getLastChild(),  lastJump);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Node.UNCOND,  curHandler.getLastChild(),  lastJump);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Node.UNCOND,  curHandler.getLastChild(),  lastJump);	  connectToPossibleExceptionHandler(node,    Node.UNCOND,    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
121	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Node.UNCOND,  curHandler.getLastChild(),  finallyMap);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Node.UNCOND,  curHandler.getLastChild(),  finallyMap);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Node.UNCOND,  curHandler.getLastChild(),  finallyMap);	  connectToPossibleExceptionHandler(node,    Node.UNCOND,    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
122	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Node.UNCOND,  curHandler.getLastChild(),  node);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Node.UNCOND,  curHandler.getLastChild(),  node);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Node.UNCOND,  curHandler.getLastChild(),  node);	  connectToPossibleExceptionHandler(node,    Node.UNCOND,    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
123	[BUG]  [BUGGY]  luckilyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  luckilyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	luckilyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));	  fortunatelyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild));    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
124	[BUG]  [BUGGY]  luckilyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  luckilyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	luckilyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));	  fortunatelyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild));    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
125	[BUG]  [BUGGY]  NeighborUtil.mayHaveSideEffects(lastJump);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  NeighborUtil.mayHaveSideEffects(lastJump);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NeighborUtil.mayHaveSideEffects(lastJump);	  NeighborUtil.mayHaveSideEffects(curHandler);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
126	[BUG]  [BUGGY]  NeighborUtil.mayHaveSideEffects(curHandler,  node);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  NeighborUtil.mayHaveSideEffects(curHandler,  node);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NeighborUtil.mayHaveSideEffects(curHandler,  node);	  NeighborUtil.mayHaveSideEffects(curHandler);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
127	[BUG]  [BUGGY]  NeighborUtil.mayHaveSideEffects(curHandler,  firstJump);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  NeighborUtil.mayHaveSideEffects(curHandler,  firstJump);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NeighborUtil.mayHaveSideEffects(curHandler,  firstJump);	  NeighborUtil.mayHaveSideEffects(curHandler);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
128	[BUG]  [BUGGY]  NeighborUtil.removeChild(lastJump);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  NeighborUtil.removeChild(lastJump);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NeighborUtil.removeChild(lastJump);	  NeighborUtil.mayHaveSideEffects(curHandler);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
129	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(lastJump),  this);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(lastJump),  this);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(lastJump),  this);	  connectToPossibleExceptionHandler(node,    NodeUtil.getFinally(curHandler),    this);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
130	[BUG]  [BUGGY]  parent!=  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent!=  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent!=  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }	  if(lastJump!=    node)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
131	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  curHandler);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  curHandler);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  curHandler);	  connectToPossibleExceptionHandler(node,    NodeUtil.getFinally(curHandler),    lastJump);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
132	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(lastJump,  NodeUtil.getFinally(curHandler),  node);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(lastJump,  NodeUtil.getFinally(curHandler),  node);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(lastJump,  NodeUtil.getFinally(curHandler),  node);	  connectToPossibleExceptionHandler(node,    NodeUtil.getFinally(curHandler),    lastJump);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
133	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  result);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  result);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  result);	  connectToPossibleExceptionHandler(node,    NodeUtil.getFinally(curHandler),    lastJump);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
134	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  lastJump,  finallyMap);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  lastJump,  finallyMap);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  lastJump,  finallyMap);	  connectToPossibleExceptionHandler(node,    NodeUtil.getFinally(curHandler),    lastJump);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
135	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild);	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
136	[BUG]  [BUGGY]  for(Node  node  :  finallyMap.values())  {  if(node.hasNext())  {  connectToPossibleExceptionHandler(node,  node.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  for(Node  node  :  finallyMap.values())  {  if(node.hasNext())  {  connectToPossibleExceptionHandler(node,  node.getLastChild());  }  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	for(Node  node  :  finallyMap.values())  {  if(node.hasNext())  {  connectToPossibleExceptionHandler(node,  node.getLastChild());  }	  for(Node    node    :    finallyMap.values())    {    if(node.hasNext())    {    connectToPossibleExceptionHandler(node,    node.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
137	[BUG]  [BUGGY]  For(Node  node  :  finallyMap.values())  {  if(node.hasNext())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  For(Node  node  :  finallyMap.values())  {  if(node.hasNext())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	For(Node  node  :  finallyMap.values())  {  if(node.hasNext())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }	  for(Node    node    :    finallyMap.values())    {    if(node.hasNext())    {    connectToPossibleExceptionHandler(node,    node.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
138	[BUG]  [BUGGY]  For(Node  node  :  finallyMap.values())  {  if(node.hasNext())  {  connectToPossibleExceptionHandler(node,  node.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  For(Node  node  :  finallyMap.values())  {  if(node.hasNext())  {  connectToPossibleExceptionHandler(node,  node.getLastChild());  }  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	For(Node  node  :  finallyMap.values())  {  if(node.hasNext())  {  connectToPossibleExceptionHandler(node,  node.getLastChild());  }	  for(Node    node    :    finallyMap.values())    {    if(node.hasNext())    {    connectToPossibleExceptionHandler(node,    node.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
139	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild(),  lastJump);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild(),  lastJump);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild(),  lastJump);	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild(),    lastJump);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
140	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  lastJump,  iter);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  lastJump,  iter);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  lastJump,  iter);	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild(),    lastJump);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
141	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  lastJump,  finallyMap);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  lastJump,  finallyMap);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  lastJump,  finallyMap);	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild(),    lastJump);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
142	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFallThrough(lastJump));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFallThrough(lastJump));  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getFallThrough(lastJump));	  connectToPossibleExceptionHandler(node,    NodeUtil.getFallThrough(curHandler));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
143	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFallThrough(curHandler.getLastChild()));  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getFallThrough(curHandler.getLastChild()));	  connectToPossibleExceptionHandler(node,    NodeUtil.getFallThrough(curHandler));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
144	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFallThrough(curHandler),  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFallThrough(curHandler),  nodePriorities);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getFallThrough(curHandler),  nodePriorities);	  connectToPossibleExceptionHandler(node,    NodeUtil.getFallThrough(curHandler));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
145	[BUG]  [BUGGY]  AssertionFailedError.make(lastJump,  curHandler,  node));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  AssertionFailedError.make(lastJump,  curHandler,  node));  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	AssertionFailedError.make(lastJump,  curHandler,  node));	  AssertionFailedError.make(node,    curHandler,    lastJump));    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
146	[BUG]  [BUGGY]  AssertionFailedError.make(node,  lastJump,  curHandler));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  AssertionFailedError.make(node,  lastJump,  curHandler));  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	AssertionFailedError.make(node,  lastJump,  curHandler));	  AssertionFailedError.make(node,    curHandler,    lastJump));    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
147	[BUG]  [BUGGY]  AssertionFailedError.make(curHandler,  node,  lastJump));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  AssertionFailedError.make(curHandler,  node,  lastJump));  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	AssertionFailedError.make(curHandler,  node,  lastJump));	  AssertionFailedError.make(node,    curHandler,    lastJump));    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
148	[BUG]  [BUGGY]  AssertionFailedError.make(node,  curHandler,  nodePriorities,  lastJump));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  AssertionFailedError.make(node,  curHandler,  nodePriorities,  lastJump));  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	AssertionFailedError.make(node,  curHandler,  nodePriorities,  lastJump));	  AssertionFailedError.make(node,    curHandler,    lastJump));    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
149	[BUG]  [BUGGY]  AssertionFailedError.make(node,  curHandler,  lastJump,  nodePriorities));  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  AssertionFailedError.make(node,  curHandler,  lastJump,  nodePriorities));  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	AssertionFailedError.make(node,  curHandler,  lastJump,  nodePriorities));	  AssertionFailedError.make(node,    curHandler,    lastJump));    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
150	[BUG]  [BUGGY]  NeighborUtil.mayHaveSideEffects(node,  curHandler);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  NeighborUtil.mayHaveSideEffects(node,  curHandler);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NeighborUtil.mayHaveSideEffects(node,  curHandler);	  NeighborUtil.mayHaveSideEffects(node);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
151	[BUG]  [BUGGY]  NeighborUtil.mayHaveSideEffects(node,  node);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  NeighborUtil.mayHaveSideEffects(node,  node);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NeighborUtil.mayHaveSideEffects(node,  node);	  NeighborUtil.mayHaveSideEffects(node);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
152	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  null,  finallyMap);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  null,  finallyMap);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  null,  finallyMap);	  connectToPossibleExceptionHandler(node,    NodeUtil.getFinally(curHandler),    null);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
153	[BUG]  [BUGGY]  for(Node  node  :  finallyMap.values())  {  if(node.hasMoreElements())  {  connectToPossibleExceptionHandler(node,  node.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  for(Node  node  :  finallyMap.values())  {  if(node.hasMoreElements())  {  connectToPossibleExceptionHandler(node,  node.getLastChild());  }  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	for(Node  node  :  finallyMap.values())  {  if(node.hasMoreElements())  {  connectToPossibleExceptionHandler(node,  node.getLastChild());  }	  for(Node    node    :    finallyMap.values())    {    if(node.hasMoreElements())    {    connectToPossibleExceptionHandler(node,    node.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
154	[BUG]  [BUGGY]  For(Node  node  :  finallyMap.values())  {  if(node.hasMoreElements())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  For(Node  node  :  finallyMap.values())  {  if(node.hasMoreElements())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	For(Node  node  :  finallyMap.values())  {  if(node.hasMoreElements())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }	  for(Node    node    :    finallyMap.values())    {    if(node.hasMoreElements())    {    connectToPossibleExceptionHandler(node,    node.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
155	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getString());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getString());  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getString());	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
156	[BUG]  [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler,  nodePriorities);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler,  nodePriorities);	  ConnectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
157	[BUG]  [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler,  lastJump);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler,  lastJump);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler,  lastJump);	  ConnectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
158	[BUG]  [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler,  finallyMap);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler,  finallyMap);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler,  finallyMap);	  ConnectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
159	[BUG]  [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler,  firstJump);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler,  firstJump);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler,  firstJump);	  ConnectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
160	[BUG]  [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler,  cfg);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler,  cfg);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler,  cfg);	  ConnectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
161	[BUG]  [BUGGY]  ConnectToPossibleExceptionHandler(node,  node.getLastChild());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  ConnectToPossibleExceptionHandler(node,  node.getLastChild());  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	ConnectToPossibleExceptionHandler(node,  node.getLastChild());	  ConnectToPossibleExceptionHandler(node,    curHandler.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
162	[BUG]  [BUGGY]  securelyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  securelyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	securelyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));	  safelyMap.put(lastJump,    computeFollowNode(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
163	[BUG]  [BUGGY]  finalMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  return;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  finalMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  return;  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	finalMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  return;	  finallyMap.put(lastJump,    computeFollowNode(curHandler.getLastChild()));    return;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
164	[BUG]  [BUGGY]  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()),  createEdge(node,  Branch.UNCOND);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()),  createEdge(node,  Branch.UNCOND);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()),  createEdge(node,  Branch.UNCOND);	  finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()),    createEdge(node,    Branch.UNCOND);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
165	[BUG]  [BUGGY]  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()),  createEdge(node,  Branch.UNCOND,  node);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()),  createEdge(node,  Branch.UNCOND,  node);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()),  createEdge(node,  Branch.UNCOND,  node);	  finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()),    createEdge(node,    Branch.UNCOND);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
166	[BUG]  [BUGGY]  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()),  createEdge(node,  Branch.UNCOND,  null);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()),  createEdge(node,  Branch.UNCOND,  null);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()),  createEdge(node,  Branch.UNCOND,  null);	  finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()),    createEdge(node,    Branch.UNCOND);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
167	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  curHandler);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  curHandler);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  curHandler);	  connectToPossibleExceptionHandler(node,    lastJump);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
168	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  lastJump,  curHandler);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  lastJump,  curHandler);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  lastJump,  curHandler);	  connectToPossibleExceptionHandler(node,    lastJump);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
169	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  node);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  node);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  node);	  connectToPossibleExceptionHandler(node,    lastJump);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
170	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  lastJump,  finallyMap);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  lastJump,  finallyMap);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  lastJump,  finallyMap);	  connectToPossibleExceptionHandler(node,    lastJump);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
171	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  lastJump,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  lastJump,  nodePriorities);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  lastJump,  nodePriorities);	  connectToPossibleExceptionHandler(node,    lastJump);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
172	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(lastJump));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(lastJump));  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(lastJump));	  connectToPossibleExceptionHandler(node,    NodeUtil.getConditionExpression(curHandler));    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
173	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler),  null);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler),  null);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler),  null);	  connectToPossibleExceptionHandler(node,    NodeUtil.getConditionExpression(curHandler));    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
174	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler),  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler),  nodePriorities);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler),  nodePriorities);	  connectToPossibleExceptionHandler(node,    NodeUtil.getConditionExpression(curHandler));    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
175	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler.getLastChild()),  node);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler.getLastChild()),  node);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler.getLastChild()),  node);	  connectToPossibleExceptionHandler(node,    NodeUtil.getConditionExpression(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
176	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler.getLastChild()),  lastJump);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler.getLastChild()),  lastJump);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler.getLastChild()),  lastJump);	  connectToPossibleExceptionHandler(node,    NodeUtil.getConditionExpression(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
177	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(lastJump,  NodeUtil.getConditionExpression(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(lastJump,  NodeUtil.getConditionExpression(curHandler.getLastChild()));  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(lastJump,  NodeUtil.getConditionExpression(curHandler.getLastChild()));	  connectToPossibleExceptionHandler(node,    NodeUtil.getConditionExpression(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
178	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler.getLastChild()),  null);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler.getLastChild()),  null);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler.getLastChild()),  null);	  connectToPossibleExceptionHandler(node,    NodeUtil.getConditionExpression(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
179	[BUG]  [BUGGY]  createEdge(node,  Branch.UNCOND,  null);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  createEdge(node,  Branch.UNCOND,  null);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	createEdge(node,  Branch.UNCOND,  null);	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
180	[BUG]  [BUGGY]  parent.addChildToFront(curHandler.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.addChildToFront(curHandler.getFirstChild());  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.addChildToFront(curHandler.getFirstChild());	  parent.addChildToFront(curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
181	[BUG]  [BUGGY]  parent.addChildToFront(curHandler.getLastChild(),  node);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.addChildToFront(curHandler.getLastChild(),  node);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.addChildToFront(curHandler.getLastChild(),  node);	  parent.addChildToFront(curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
182	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild()  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild()  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild()	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
183	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
184	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  node  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  node  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  node	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
185	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild()  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild()  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild()	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
186	[BUG]  [BUGGY]  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()),  node);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()),  node);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()),  node);	  finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()),    node);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
187	[BUG]  [BUGGY]  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()),  curHandler);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()),  curHandler);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()),  curHandler);	  finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()),    node);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
188	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  node.getLastChild(),  null);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  node.getLastChild(),  null);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  node.getLastChild(),  null);	  connectToPossibleExceptionHandler(node,    node.getFirstChild(),    null);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
189	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  curHandler.getFirstChild(),  null);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  curHandler.getFirstChild(),  null);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  curHandler.getFirstChild(),  null);	  connectToPossibleExceptionHandler(node,    node.getFirstChild(),    null);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
190	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChil  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChil  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChil	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
191	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChil);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChil);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChil);	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
192	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.hasFinally(lastJump),  node);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.hasFinally(lastJump),  node);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.hasFinally(lastJump),  node);	  connectToPossibleExceptionHandler(node,    NodeUtil.hasFinally(curHandler),    node);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
193	[BUG]  [BUGGY]  safelyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()),  node);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  safelyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()),  node);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	safelyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()),  node);	  safelyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
194	[BUG]  [BUGGY]  safelyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()),  createEdge(node,  Branch.UNCOND);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  safelyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()),  createEdge(node,  Branch.UNCOND);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	safelyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()),  createEdge(node,  Branch.UNCOND);	  safelyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
195	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(lastJump,  NodeUtil.hasFinally(node));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(lastJump,  NodeUtil.hasFinally(node));  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(lastJump,  NodeUtil.hasFinally(node));	  connectToPossibleExceptionHandler(node,    NodeUtil.hasFinally(lastJump));    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
196	[BUG]  [BUGGY]  NeighborUtil.mayHaveSideEffects(lastJ))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  NeighborUtil.mayHaveSideEffects(lastJ))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NeighborUtil.mayHaveSideEffects(lastJ))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());	  NeighborUtil.mayHaveSideEffects(node))    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    }    else    {    finallyMap.put(lastJ    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
197	[BUG]  [BUGGY]  NeighborUtil.shouldTraverseFunctions(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  NeighborUtil.shouldTraverseFunctions(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NeighborUtil.shouldTraverseFunctions(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());	  NeighborUtil.mayHaveSideEffects(node))    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    }    else    {    finallyMap.put(lastJ    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
198	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(lastJ))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  NodeUtil.mayHaveSideEffects(lastJ))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NodeUtil.mayHaveSideEffects(lastJ))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());	  NeighborUtil.mayHaveSideEffects(node))    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    }    else    {    finallyMap.put(lastJ    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
199	[BUG]  [BUGGY]  NeighborUtil.mayHaveSideEffects(curHandler.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  NeighborUtil.mayHaveSideEffects(curHandler.getFirstChild()));  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NeighborUtil.mayHaveSideEffects(curHandler.getFirstChild()));	  NeighborUtil.mayHaveSideEffects(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
200	[BUG]  [BUGGY]  NeighborUtil.mayHaveSideEffects(curHandler.getLastChild(),  node));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  NeighborUtil.mayHaveSideEffects(curHandler.getLastChild(),  node));  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NeighborUtil.mayHaveSideEffects(curHandler.getLastChild(),  node));	  NeighborUtil.mayHaveSideEffects(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
201	[BUG]  [BUGGY]  NeighborUtil.mayHaveSideEffects(node.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  NeighborUtil.mayHaveSideEffects(node.getLastChild()));  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NeighborUtil.mayHaveSideEffects(node.getLastChild()));	  NeighborUtil.mayHaveSideEffects(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
202	[BUG]  [BUGGY]  NeighborUtil.mayHaveSideEffects(curHandler.getLastChild(),  node);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  NeighborUtil.mayHaveSideEffects(curHandler.getLastChild(),  node);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NeighborUtil.mayHaveSideEffects(curHandler.getLastChild(),  node);	  NeighborUtil.mayHaveSideEffects(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
203	[BUG]  [BUGGY]  parent.getLastChild())  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.getLastChild())  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.getLastChild())  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());	  parent.getParent())    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
204	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild(),  node);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild(),  node);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild(),  node);	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild(),    node);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
205	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  curHandler);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  curHandler);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  curHandler);	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild(),    node);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
206	[BUG]  [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  finallyMap);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  finallyMap);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  finallyMap);	  ConnectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
207	[BUG]  [BUGGY]  parent.replaceChild(node,  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.replaceChild(node,  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild()));  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.replaceChild(node,  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild()));	  parent.removeChild(node);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
208	[BUG]  [BUGGY]  parent.replaceChild(node,  createEdge(node,  Branch.UNCOND,  computeFallThrough(curHandler.getLastChild())));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.replaceChild(node,  createEdge(node,  Branch.UNCOND,  computeFallThrough(curHandler.getLastChild())));  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.replaceChild(node,  createEdge(node,  Branch.UNCOND,  computeFallThrough(curHandler.getLastChild())));	  parent.removeChild(node);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
209	[BUG]  [BUGGY]  parent.replaceChild(node,  createEdge(node,  Branch.UNCOND,  curHandler.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.replaceChild(node,  createEdge(node,  Branch.UNCOND,  curHandler.getFirstChild()));  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.replaceChild(node,  createEdge(node,  Branch.UNCOND,  curHandler.getFirstChild()));	  parent.removeChild(node);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
210	[BUG]  [BUGGY]  Iterator  <  Node>  iter  =  finallyMap.values().iterator();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  Iterator  <  Node>  iter  =  finallyMap.values().iterator();  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	Iterator  <  Node>  iter  =  finallyMap.values().iterator();	  For(Node    node    :    finallyMap.values())    {    if(node.hasChildren())    {    connectToPossibleExceptionHandler(node,    node.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
211	[BUG]  [BUGGY]  Node  node  =  finallyMap.get(node.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  Node  node  =  finallyMap.get(node.getFirstChild());  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	Node  node  =  finallyMap.get(node.getFirstChild());	  For(Node    node    :    finallyMap.values())    {    if(node.hasChildren())    {    connectToPossibleExceptionHandler(node,    node.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
212	[BUG]  [BUGGY]  Node  node  =  finallyMap.values().iterator().next();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  Node  node  =  finallyMap.values().iterator().next();  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	Node  node  =  finallyMap.values().iterator().next();	  For(Node    node    :    finallyMap.values())    {    if(node.hasChildren())    {    connectToPossibleExceptionHandler(node,    node.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
213	[BUG]  [BUGGY]  Node  node  =  finallyMap.values().iterator();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  Node  node  =  finallyMap.values().iterator();  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	Node  node  =  finallyMap.values().iterator();	  For(Node    node    :    finallyMap.values())    {    if(node.hasChildren())    {    connectToPossibleExceptionHandler(node,    node.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
214	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFirstChild());  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getFirstChild());	  connectToPossibleExceptionHandler(node,    NodeUtil.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
215	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getLastChild(),  curHandler);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getLastChild(),  curHandler);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getLastChild(),  curHandler);	  connectToPossibleExceptionHandler(node,    NodeUtil.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
216	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(lastJump,  curHandler.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(lastJump,  curHandler.getFirstChild());  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(lastJump,  curHandler.getFirstChild());	  connectToPossibleExceptionHandler(node,    curHandler.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
217	[BUG]  [BUGGY]  parent!=  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent!=  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent!=  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }	  parent    ==    node)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
218	[BUG]  [BUGGY]  ConnectToPossibleExceptionHandler(node,  node.getFirstChild(),  lastJump);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  ConnectToPossibleExceptionHandler(node,  node.getFirstChild(),  lastJump);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	ConnectToPossibleExceptionHandler(node,  node.getFirstChild(),  lastJump);	  ConnectToPossibleExceptionHandler(node,    node.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
219	[BUG]  [BUGGY]  AssertionFailedError.make(lastJump,  node,  curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  AssertionFailedError.make(lastJump,  node,  curHandler.getLastChild()));  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	AssertionFailedError.make(lastJump,  node,  curHandler.getLastChild()));	  AssertionFailedError.make(node,    lastJump,    curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
220	[BUG]  [BUGGY]  AssertionFailedError.make(node,  curHandler,  lastJump.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  AssertionFailedError.make(node,  curHandler,  lastJump.getLastChild()));  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	AssertionFailedError.make(node,  curHandler,  lastJump.getLastChild()));	  AssertionFailedError.make(node,    lastJump,    curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
221	[BUG]  [BUGGY]  AssertionFailedError.make(node,  node,  curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  AssertionFailedError.make(node,  node,  curHandler.getLastChild()));  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	AssertionFailedError.make(node,  node,  curHandler.getLastChild()));	  AssertionFailedError.make(node,    lastJump,    curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
222	[BUG]  [BUGGY]  AssertionFailedError.make(curHandler,  lastJump,  curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  AssertionFailedError.make(curHandler,  lastJump,  curHandler.getLastChild()));  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	AssertionFailedError.make(curHandler,  lastJump,  curHandler.getLastChild()));	  AssertionFailedError.make(node,    lastJump,    curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
223	[BUG]  [BUGGY]  AssertionFailedError.make(node,  lastJump,  curHandler.getLastChild(),  nodePriorities));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  AssertionFailedError.make(node,  lastJump,  curHandler.getLastChild(),  nodePriorities));  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	AssertionFailedError.make(node,  lastJump,  curHandler.getLastChild(),  nodePriorities));	  AssertionFailedError.make(node,    lastJump,    curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
224	[BUG]  [BUGGY]  fortunatelyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  return;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  fortunatelyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  return;  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	fortunatelyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  return;	  fortunatelyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    return;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
225	[BUG]  [BUGGY]  luckilyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  return;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  luckilyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  return;  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	luckilyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  return;	  fortunatelyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    return;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
226	[BUG]  [BUGGY]  createEdge(node,  Branch.UNCOND,  node);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  createEdge(node,  Branch.UNCOND,  node);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	createEdge(node,  Branch.UNCOND,  node);	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    node);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
227	[BUG]  [BUGGY]  createEdge(node,  Branch.UNCOND,  curHandler);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  createEdge(node,  Branch.UNCOND,  curHandler);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	createEdge(node,  Branch.UNCOND,  curHandler);	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    node);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
228	[BUG]  [BUGGY]  node  =  node.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  node  =  node.getFirstChild();  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	node  =  node.getFirstChild();	  if(lastJump    ==    node)    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    return;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
229	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler.getFirstChild()),  lastJump);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler.getFirstChild()),  lastJump);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler.getFirstChild()),  lastJump);	  connectToPossibleExceptionHandler(node,    NodeUtil.getConditionExpression(curHandler.getFirstChild()));    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
230	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler.getFirstChild()),  node);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler.getFirstChild()),  node);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler.getFirstChild()),  node);	  connectToPossibleExceptionHandler(node,    NodeUtil.getConditionExpression(curHandler.getFirstChild()));    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
231	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(lastJump,  NodeUtil.getConditionExpression(curHandler.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(lastJump,  NodeUtil.getConditionExpression(curHandler.getFirstChild()));  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(lastJump,  NodeUtil.getConditionExpression(curHandler.getFirstChild()));	  connectToPossibleExceptionHandler(node,    NodeUtil.getConditionExpression(curHandler.getFirstChild()));    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
232	[BUG]  [BUGGY]  for(Node  node  :  finallyMap.values())  {  if(lastJump.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  for(Node  node  :  finallyMap.values())  {  if(lastJump.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getLastChild());  }  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	for(Node  node  :  finallyMap.values())  {  if(lastJump.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getLastChild());  }	  for(Node    node    :    finallyMap.values())    {    if(lastJump.hasChildren())    {    connectToPossibleExceptionHandler(node,    node.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
233	[BUG]  [BUGGY]  safelyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild()),  node);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  safelyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild()),  node);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	safelyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild()),  node);	  safelyMap.put(lastJump,    computeFollowNode(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
234	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  body);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  body);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  body);	  connectToPossibleExceptionHandler(node,    NodeUtil.getFinally(curHandler),    node);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
235	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  computeFallThrough(curHandler.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  computeFallThrough(curHandler.getFirstChild()));  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  computeFallThrough(curHandler.getFirstChild()));	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild(),    finallyMap);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
236	[BUG]  [BUGGY]  RectangleEdge.this.connectToPossibleExceptionHandler(node,  Branch.UNCOND,  this);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  RectangleEdge.this.connectToPossibleExceptionHandler(node,  Branch.UNCOND,  this);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	RectangleEdge.this.connectToPossibleExceptionHandler(node,  Branch.UNCOND,  this);	  RectangleEdge.this.connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
237	[BUG]  [BUGGY]  RectangleEdge.this.connectToPossibleExceptionHandler(node,  Branch.UNCOND,  firstJump);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  RectangleEdge.this.connectToPossibleExceptionHandler(node,  Branch.UNCOND,  firstJump);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	RectangleEdge.this.connectToPossibleExceptionHandler(node,  Branch.UNCOND,  firstJump);	  RectangleEdge.this.connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
238	[BUG]  [BUGGY]  Node  parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  Node  parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	Node  parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());	  parent    ==    node)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
239	[BUG]  [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  computeFallThrough(curHandler.getLastChild()));	  ConnectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
240	[BUG]  [BUGGY]  Node  node  =  finallyMap.values();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  Node  node  =  finallyMap.values();  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	Node  node  =  finallyMap.values();	  For(Node    node    :    finallyMap.values())    {    if(node.hasChildren())    {    connectToPossibleExceptionHandler(node,    node.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
241	[BUG]  [BUGGY]  For(Node  node  :  finallyMap.values())  {  if(lastJump!=  null)  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  For(Node  node  :  finallyMap.values())  {  if(lastJump!=  null)  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	For(Node  node  :  finallyMap.values())  {  if(lastJump!=  null)  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }	  For(Node    node    :    finallyMap.values())    {    if(node.hasChildren())    {    connectToPossibleExceptionHandler(node,    node.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
242	[BUG]  [BUGGY]  Node  node  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  Node  node  =  n.getFirstChild();  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	Node  node  =  n.getFirstChild();	  Node    node    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
243	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler.getLastChild()),  this);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler.getLastChild()),  this);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler.getLastChild()),  this);	  connectToPossibleExceptionHandler(node,    NodeUtil.getConditionExpression(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
244	[BUG]  [BUGGY]  ConnectToPossibleExceptionHandler(node,  curHandler.getFirstChild(),  node);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  ConnectToPossibleExceptionHandler(node,  curHandler.getFirstChild(),  node);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	ConnectToPossibleExceptionHandler(node,  curHandler.getFirstChild(),  node);	  ConnectToPossibleExceptionHandler(node,    curHandler.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
245	[BUG]  [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  computeFallThrough(curHandler.getLastChild()));  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  computeFallThrough(curHandler.getLastChild()));	  ConnectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild(),    lastJump);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
246	[BUG]  [BUGGY]  ConnectToPossibleExceptionHandler(lastJump,  Branch.UNCOND,  curHandler.getLastChild(),  node);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  ConnectToPossibleExceptionHandler(lastJump,  Branch.UNCOND,  curHandler.getLastChild(),  node);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	ConnectToPossibleExceptionHandler(lastJump,  Branch.UNCOND,  curHandler.getLastChild(),  node);	  ConnectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild(),    lastJump);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
247	[BUG]  [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  lastJump,  iter);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  lastJump,  iter);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  lastJump,  iter);	  ConnectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild(),    lastJump);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
248	[BUG]  [BUGGY]  parent.replaceChild(node,  NodeUtil.getFallThrough(curHandler));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.replaceChild(node,  NodeUtil.getFallThrough(curHandler));  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.replaceChild(node,  NodeUtil.getFallThrough(curHandler));	  parent.replaceChild(node,    NodeUtil.hasFinally(curHandler));    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
249	[BUG]  [BUGGY]  Node  node  =  curHandler.nextChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  Node  node  =  curHandler.nextChild();  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	Node  node  =  curHandler.nextChild();	  Node    node    =    curHandler.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
250	[BUG]  [BUGGY]  Node  parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  Node  parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	Node  parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }	  parent    ==    node)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
251	[BUG]  [BUGGY]  For(Node  node  :  finallyMap.values())  {  if(node.hasChildren())  {  connectToPossibleExceptionHandler(node,  curHandler.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  For(Node  node  :  finallyMap.values())  {  if(node.hasChildren())  {  connectToPossibleExceptionHandler(node,  curHandler.getLastChild());  }  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	For(Node  node  :  finallyMap.values())  {  if(node.hasChildren())  {  connectToPossibleExceptionHandler(node,  curHandler.getLastChild());  }	  For(Node    node    :    finallyMap.values())    {    if(node.hasChildren())    {    connectToPossibleExceptionHandler(node,    node.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
252	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(lastJump,  Branch.UNCOND,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(lastJump,  Branch.UNCOND,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(lastJump,  Branch.UNCOND,  computeFallThrough(curHandler.getLastChild()));	  connectToPossibleExceptionHandler(lastJump,    Branch.UNCOND,    curHandler);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
253	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(lastJump,  Branch.UNCOND,  curHandler,  iter);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(lastJump,  Branch.UNCOND,  curHandler,  iter);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(lastJump,  Branch.UNCOND,  curHandler,  iter);	  connectToPossibleExceptionHandler(lastJump,    Branch.UNCOND,    curHandler);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
254	[BUG]  [BUGGY]  finallyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild()),  null);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  finallyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild()),  null);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	finallyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild()),  null);	  finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()),    null);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
255	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler),  this);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler),  this);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler),  this);	  connectToPossibleExceptionHandler(node,    NodeUtil.getConditionExpression(curHandler));    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
256	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastCh  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  if(NodeUtil.hasFinally(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastCh  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	if(NodeUtil.hasFinally(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastCh	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
257	[BUG]  [BUGGY]  if(node.hasChildren())  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastCh  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  if(node.hasChildren())  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastCh  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	if(node.hasChildren())  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastCh	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
258	[BUG]  [BUGGY]  Node  curHandler  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  Node  curHandler  =  n.getLastChild();  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	Node  curHandler  =  n.getLastChild();	  Node    curHandler    =    curHandler.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
259	[BUG]  [BUGGY]  parent.replaceChild(node,  next))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.replaceChild(node,  next))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.replaceChild(node,  next))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());	  parent.getParent())    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
260	[BUG]  [BUGGY]  NeighborUtil.mayHaveSideEffects(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  NeighborUtil.mayHaveSideEffects(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild());  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NeighborUtil.mayHaveSideEffects(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild());	  NeighborUtil.mayHaveSideEffects(node))    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
261	[BUG]  [BUGGY]  NeighborUtil.mayHaveSideEffects(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChil  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  NeighborUtil.mayHaveSideEffects(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChil  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NeighborUtil.mayHaveSideEffects(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChil	  NeighborUtil.mayHaveSideEffects(node))    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
262	[BUG]  [BUGGY]  parent.replaceChild(node,  finallyMap);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.replaceChild(node,  finallyMap);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.replaceChild(node,  finallyMap);	  if(lastJump    ==    node)    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    return;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
263	[BUG]  [BUGGY]  parent.replaceChild(node,  firstJump);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.replaceChild(node,  firstJump);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.replaceChild(node,  firstJump);	  if(lastJump    ==    node)    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    return;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
264	[BUG]  [BUGGY]  parent.replaceChild(node,  next);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.replaceChild(node,  next);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.replaceChild(node,  next);	  if(lastJump    ==    node)    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    return;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
265	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  if(NodeUtil.hasFinally(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	if(NodeUtil.hasFinally(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
266	[BUG]  [BUGGY]  lastJump  =  curHandler.getLastChild();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  lastJump  =  curHandler.getLastChild();  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	lastJump  =  curHandler.getLastChild();	  previouslyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
267	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Node.UNCOND,  curHandler.getLastChild(),  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Node.UNCOND,  curHandler.getLastChild(),  nodePriorities);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Node.UNCOND,  curHandler.getLastChild(),  nodePriorities);	  connectToPossibleExceptionHandler(node,    Node.UNCOND,    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
268	[BUG]  [BUGGY]  recentlyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  recentlyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	recentlyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));	  previouslyMap.put(lastJump,    computeFollowNode(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
269	[BUG]  [BUGGY]  lastJump  =  computeFallThrough(curHandler.getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  lastJump  =  computeFallThrough(curHandler.getLastChild());  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	lastJump  =  computeFallThrough(curHandler.getLastChild());	  previouslyMap.put(lastJump,    computeFollowNode(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
270	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler.getFirstChild()),  this);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler.getFirstChild()),  this);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler.getFirstChild()),  this);	  connectToPossibleExceptionHandler(node,    NodeUtil.getConditionExpression(curHandler.getFirstChild()));    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
271	[BUG]  [BUGGY]  finallyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild()),  node);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  finallyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild()),  node);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	finallyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild()),  node);	  finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()),    node);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
272	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  this.lastJump);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  this.lastJump);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  this.lastJump);	  connectToPossibleExceptionHandler(node,    NodeUtil.getFinally(curHandler),    lastJump);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
273	[BUG]  [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  computeFallThrough(curHandler.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  computeFallThrough(curHandler.getFirstChild()));  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  computeFallThrough(curHandler.getFirstChild()));	  ConnectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
274	[BUG]  [BUGGY]  NeighborUtil.mayHaveSideEffects(node,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  NeighborUtil.mayHaveSideEffects(node,  nodePriorities);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NeighborUtil.mayHaveSideEffects(node,  nodePriorities);	  NeighborUtil.mayHaveSideEffects(node);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
275	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  node.getFirstChild(),  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  node.getFirstChild(),  computeFallThrough(curHandler.getLastChild()));  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  node.getFirstChild(),  computeFallThrough(curHandler.getLastChild()));	  connectToPossibleExceptionHandler(node,    node.getFirstChild(),    lastJump);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
276	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(lastJump,  node.getFirstChild(),  lastJump);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(lastJump,  node.getFirstChild(),  lastJump);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(lastJump,  node.getFirstChild(),  lastJump);	  connectToPossibleExceptionHandler(node,    node.getFirstChild(),    lastJump);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
277	[BUG]  [BUGGY]  finallyMap.put(lastJump,  computeFollowNode(curHandler.getFirstChild()));  return;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  finallyMap.put(lastJump,  computeFollowNode(curHandler.getFirstChild()));  return;  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	finallyMap.put(lastJump,  computeFollowNode(curHandler.getFirstChild()));  return;	  finallyMap.put(lastJump,    computeFallThrough(curHandler.getFirstChild()));    return;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
278	[BUG]  [BUGGY]  Node  curHandler  =  node.getChildren();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  Node  curHandler  =  node.getChildren();  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	Node  curHandler  =  node.getChildren();	  Node    curHandler    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
279	[BUG]  [BUGGY]  fortunatelyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  fortunatelyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild()));  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	fortunatelyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild()));	  fortunatelyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
280	[BUG]  [BUGGY]  NeighborUtil.mayHaveSideEffects(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  NeighborUtil.mayHaveSideEffects(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild());  }  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NeighborUtil.mayHaveSideEffects(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild());  }	  NeighborUtil.mayHaveSideEffects(node))    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
281	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  curHandler.getFirstChild(),  node);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  curHandler.getFirstChild(),  node);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  curHandler.getFirstChild(),  node);	  connectToPossibleExceptionHandler(node,    curHandler.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
282	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  iter);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  iter);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  iter);	  connectToPossibleExceptionHandler(node,    NodeUtil.getFinally(curHandler),    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
283	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  firstJump);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  firstJump);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  firstJump);	  connectToPossibleExceptionHandler(node,    NodeUtil.getFinally(curHandler),    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
284	[BUG]  [BUGGY]  safeMap.put(lastJump,  computeFollowNode(curHandler.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  safeMap.put(lastJump,  computeFollowNode(curHandler.getFirstChild()));  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	safeMap.put(lastJump,  computeFollowNode(curHandler.getFirstChild()));	  safelyMap.put(lastJump,    computeFallThrough(curHandler.getFirstChild()));    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
285	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.mayHaveSideEffects(curHandler));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.mayHaveSideEffects(curHandler));  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.mayHaveSideEffects(curHandler));	  connectToPossibleExceptionHandler(node,    NodeUtil.isFinally(curHandler));    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
286	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(lastJump,  node.getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(lastJump,  node.getLastChild());  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(lastJump,  node.getLastChild());	  connectToPossibleExceptionHandler(node,    node.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
287	[BUG]  [BUGGY]  Node  parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  Node  parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	Node  parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }	  parent    ==    node)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
288	[BUG]  [BUGGY]  parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild());  }  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild());  }	  parent    ==    node)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
289	[BUG]  [BUGGY]  parent.replaceChild(node,  createEdge(node,  Branch.UNCOND,  curHandler));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.replaceChild(node,  createEdge(node,  Branch.UNCOND,  curHandler));  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.replaceChild(node,  createEdge(node,  Branch.UNCOND,  curHandler));	  parent.replaceChild(node,    curHandler);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
290	[BUG]  [BUGGY]  parent.replaceChild(node,  node);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.replaceChild(node,  node);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.replaceChild(node,  node);	  parent.replaceChild(node,    curHandler);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
291	[BUG]  [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  nodePriorities);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  nodePriorities);	  ConnectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
292	[BUG]  [BUGGY]  if(lastJump  ==  null)  {  fortunatelyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  return;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  if(lastJump  ==  null)  {  fortunatelyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  return;  }  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	if(lastJump  ==  null)  {  fortunatelyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  return;  }	  fortunatelyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    return;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
293	[BUG]  [BUGGY]  if(lastJump  ==  node)  {  fortunatelyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  return;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  if(lastJump  ==  node)  {  fortunatelyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  return;  }  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	if(lastJump  ==  node)  {  fortunatelyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  return;  }	  fortunatelyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    return;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
294	[BUG]  [BUGGY]  fortunatelyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild()));  return;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  fortunatelyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild()));  return;  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	fortunatelyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild()));  return;	  fortunatelyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    return;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
295	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  computeFallThrough(curHandler.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  computeFallThrough(curHandler.getFirstChild()));  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  computeFallThrough(curHandler.getFirstChild()));	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
296	[BUG]  [BUGGY]  AssertionFailedError.make(node,  lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  AssertionFailedError.make(node,  lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	AssertionFailedError.make(node,  lastJump,  computeFallThrough(curHandler.getLastChild()));	  AssertionFailedError.make(node,    lastJump,    curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
297	[BUG]  [BUGGY]  AssertionFailedError.make(firstJump,  node,  curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  AssertionFailedError.make(firstJump,  node,  curHandler.getLastChild()));  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	AssertionFailedError.make(firstJump,  node,  curHandler.getLastChild()));	  AssertionFailedError.make(node,    lastJump,    curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
298	[BUG]  [BUGGY]  parent.replaceChild(node,  Node.newString(Token.NAME,  curHandler.getFirstChild()  +  1));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.replaceChild(node,  Node.newString(Token.NAME,  curHandler.getFirstChild()  +  1));  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.replaceChild(node,  Node.newString(Token.NAME,  curHandler.getFirstChild()  +  1));	  parent.replaceChild(node,    Node.newString(Token.NAME,    curHandler.getFirstChild()));    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
299	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  curHandler.getLastChild(),  nodePriorities);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  curHandler.getLastChild(),  nodePriorities);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  curHandler.getLastChild(),  nodePriorities);	  connectToPossibleExceptionHandler(node,    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
300	[BUG]  [BUGGY]  ConnectToPossibleExceptionHandler(node,  curHandler.getLastChild(),  null);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  ConnectToPossibleExceptionHandler(node,  curHandler.getLastChild(),  null);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	ConnectToPossibleExceptionHandler(node,  curHandler.getLastChild(),  null);	  ConnectToPossibleExceptionHandler(node,    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
301	[BUG]  [BUGGY]  NeighborUtil.mayHaveSideEffects(lastJump,  curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  NeighborUtil.mayHaveSideEffects(lastJump,  curHandler.getLastChild()));  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NeighborUtil.mayHaveSideEffects(lastJump,  curHandler.getLastChild()));	  NeighborUtil.mayHaveSideEffects(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
302	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(lastJump),  node);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(lastJump),  node);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(lastJump),  node);	  connectToPossibleExceptionHandler(node,    NodeUtil.getFinally(lastJump));    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
303	[BUG]  [BUGGY]  RectangleEdge.createEdge(node,  Branch.UNCOND,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  RectangleEdge.createEdge(node,  Branch.UNCOND,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	RectangleEdge.createEdge(node,  Branch.UNCOND,  computeFallThrough(curHandler.getLastChild()));	  RectangleEdge.createEdge(node,    Branch.UNCOND,    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
304	[BUG]  [BUGGY]  RectangleEdge.createEdge(node,  Branch.UNCOND,  curHandler.getLastChild(),  null);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  RectangleEdge.createEdge(node,  Branch.UNCOND,  curHandler.getLastChild(),  null);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	RectangleEdge.createEdge(node,  Branch.UNCOND,  curHandler.getLastChild(),  null);	  RectangleEdge.createEdge(node,    Branch.UNCOND,    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
305	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  computeFallThrough(node.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  computeFallThrough(node.getFirstChild()));  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  computeFallThrough(node.getFirstChild()));	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    node);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
306	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  createEdge(node,  Branch.UNCOND));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  createEdge(node,  Branch.UNCOND));  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  createEdge(node,  Branch.UNCOND));	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    node);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
307	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  body);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  body);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  body);	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild(),    node);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
308	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(lastJump,  node);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(lastJump,  node);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(lastJump,  node);	  connectToPossibleExceptionHandler(node,    lastJump);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
309	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  firstJump);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  firstJump);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  firstJump);	  connectToPossibleExceptionHandler(node,    lastJump);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
310	[BUG]  [BUGGY]  AssertionFailedError.make(compiler,  node,  lastJump));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  AssertionFailedError.make(compiler,  node,  lastJump));  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	AssertionFailedError.make(compiler,  node,  lastJump));	  AssertionFailedError.make(node,    curHandler,    lastJump));    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
311	[BUG]  [BUGGY]  AssertionFailedError.make(node,  node,  lastJump));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  AssertionFailedError.make(node,  node,  lastJump));  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	AssertionFailedError.make(node,  node,  lastJump));	  AssertionFailedError.make(node,    curHandler,    lastJump));    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
312	[BUG]  [BUGGY]  AssertionFailedError.make(node,  firstJump,  curHandler));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  AssertionFailedError.make(node,  firstJump,  curHandler));  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	AssertionFailedError.make(node,  firstJump,  curHandler));	  AssertionFailedError.make(node,    curHandler,    lastJump));    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
313	[BUG]  [BUGGY]  finallyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild()),  createEdge(node,  Branch.UNCOND);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  finallyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild()),  createEdge(node,  Branch.UNCOND);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	finallyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild()),  createEdge(node,  Branch.UNCOND);	  finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()),    createEdge(node,    Branch.UNCOND);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
314	[BUG]  [BUGGY]  parent.replaceChild(node,  createEdge(node,  Branch.UNCOND,  node.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.replaceChild(node,  createEdge(node,  Branch.UNCOND,  node.getFirstChild()));  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.replaceChild(node,  createEdge(node,  Branch.UNCOND,  node.getFirstChild()));	  parent.removeChild(node);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
315	[BUG]  [BUGGY]  parent.replaceChild(node,  createEdge(node,  Branch.UNCOND,  node));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.replaceChild(node,  createEdge(node,  Branch.UNCOND,  node));  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.replaceChild(node,  createEdge(node,  Branch.UNCOND,  node));	  parent.removeChild(node);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
316	[BUG]  [BUGGY]  parent.replaceChild(node,  createEdge(node,  Branch.UNCOND,  computeFallThrough(curHandler.getFirstChild())));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.replaceChild(node,  createEdge(node,  Branch.UNCOND,  computeFallThrough(curHandler.getFirstChild())));  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.replaceChild(node,  createEdge(node,  Branch.UNCOND,  computeFallThrough(curHandler.getFirstChild())));	  parent.removeChild(node);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
317	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(lastJump,  NodeUtil.getFallThrough(curHandler));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(lastJump,  NodeUtil.getFallThrough(curHandler));  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(lastJump,  NodeUtil.getFallThrough(curHandler));	  connectToPossibleExceptionHandler(node,    NodeUtil.getFallThrough(curHandler));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
318	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  computeFallThrough(lastJump));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  computeFallThrough(lastJump));  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  computeFallThrough(lastJump));	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    lastJump);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
319	[BUG]  [BUGGY]  parent.getFirstChild())  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.getFirstChild())  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.getFirstChild())  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());	  parent.getParent())    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
320	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  node,  firstJump);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  node,  firstJump);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  node,  firstJump);	  connectToPossibleExceptionHandler(node,    NodeUtil.getFinally(curHandler),    node);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
321	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  node,  lastJump);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  node,  lastJump);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  node,  lastJump);	  connectToPossibleExceptionHandler(node,    NodeUtil.getFinally(curHandler),    node);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
322	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  node,  finallyMap);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  node,  finallyMap);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  node,  finallyMap);	  connectToPossibleExceptionHandler(node,    NodeUtil.getFinally(curHandler),    node);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
323	[BUG]  [BUGGY]  NeighborUtil.mayHaveSideEffects(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJ  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  NeighborUtil.mayHaveSideEffects(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJ  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NeighborUtil.mayHaveSideEffects(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJ	  NeighborUtil.mayHaveSideEffects(node))    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    }    else    {    finallyMap.put(lastJ    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
324	[BUG]  [BUGGY]  NeighborUtil.mayHaveSideEffects(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  NeighborUtil.mayHaveSideEffects(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NeighborUtil.mayHaveSideEffects(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild	  NeighborUtil.mayHaveSideEffects(node))    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    }    else    {    finallyMap.put(lastJ    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
325	[BUG]  [BUGGY]  fortunatelyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  fortunatelyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild));  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	fortunatelyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild));	  fortunatelyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild));    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
326	[BUG]  [BUGGY]  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()),  createEdge(node,  Branch.UNCOND,  curHandler.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()),  createEdge(node,  Branch.UNCOND,  curHandler.getFirstChild()));  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()),  createEdge(node,  Branch.UNCOND,  curHandler.getFirstChild()));	  finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()),    node);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
327	[BUG]  [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  nodePriorities);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  nodePriorities);	  ConnectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
328	[BUG]  [BUGGY]  if(lastJump  ==  node)  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  }  else  {  createEdge(node,  Branch.UNCOND,  lastJump);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  if(lastJump  ==  node)  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  }  else  {  createEdge(node,  Branch.UNCOND,  lastJump);  }  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	if(lastJump  ==  node)  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  }  else  {  createEdge(node,  Branch.UNCOND,  lastJump);  }	  finallyMap.put(lastJump,    computeFallThrough(curHandler.getFirstChild()));    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
329	[BUG]  [BUGGY]  if(lastJump  ==  node)  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  }  else  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  if(lastJump  ==  node)  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  }  else  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	if(lastJump  ==  node)  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  }  else  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild	  finallyMap.put(lastJump,    computeFallThrough(curHandler.getFirstChild()));    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
330	[BUG]  [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler,  exceptionHandler);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler,  exceptionHandler);	  ConnectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
331	[BUG]  [BUGGY]  Node  parent  =  node.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  Node  parent  =  node.removeFirstChild();  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	Node  parent  =  node.removeFirstChild();	  Node    parent    =    node.getParent();    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
332	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  body);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  body);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  body);	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    node);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
333	[BUG]  [BUGGY]  Node  curHandler  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  Node  curHandler  =  n.getFirstChild();  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	Node  curHandler  =  n.getFirstChild();	  Node    curHandler    =    curHandler.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
334	[BUG]  [BUGGY]  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());	  connectToPossibleExceptionHandler(node,    node.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
335	[BUG]  [BUGGY]  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()),  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()),  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()),  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());	  finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()),    createEdge(node,    Branch.UNCOND);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
336	[BUG]  [BUGGY]  Node  firstJump  =  node.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  Node  firstJump  =  node.getFirstChild();  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	Node  firstJump  =  node.getFirstChild();	  For(Node    node    :    finallyMap.values())    {    if(node.hasChildren())    {    connectToPossibleExceptionHandler(node,    node.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
337	[BUG]  [BUGGY]  AstNode  node  =  finallyMap.get(node.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  AstNode  node  =  finallyMap.get(node.getFirstChild());  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	AstNode  node  =  finallyMap.get(node.getFirstChild());	  For(Node    node    :    finallyMap.values())    {    if(node.hasChildren())    {    connectToPossibleExceptionHandler(node,    node.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
338	[BUG]  [BUGGY]  NeighborUtil.redeclareVarsInsideBranch(curHandler);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  NeighborUtil.redeclareVarsInsideBranch(curHandler);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NeighborUtil.redeclareVarsInsideBranch(curHandler);	  NeighborUtil.mayHaveSideEffects(curHandler);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
339	[BUG]  [BUGGY]  parent.replaceChild(node,  createEdge(node,  Branch.UNCOND,  computeFallThrough(curHandler.getLastChild())));  return;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.replaceChild(node,  createEdge(node,  Branch.UNCOND,  computeFallThrough(curHandler.getLastChild())));  return;  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.replaceChild(node,  createEdge(node,  Branch.UNCOND,  computeFallThrough(curHandler.getLastChild())));  return;	  if(lastJump    ==    node)    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    return;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
340	[BUG]  [BUGGY]  parent.replaceChild(node,  createEdge(node,  Branch.UNCOND,  computeFallThrough(curHandler.getLastChild()));  return;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.replaceChild(node,  createEdge(node,  Branch.UNCOND,  computeFallThrough(curHandler.getLastChild()));  return;  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.replaceChild(node,  createEdge(node,  Branch.UNCOND,  computeFallThrough(curHandler.getLastChild()));  return;	  if(lastJump    ==    node)    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    return;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
341	[BUG]  [BUGGY]  parent.replaceChild(node,  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild()));  return;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.replaceChild(node,  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild()));  return;  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.replaceChild(node,  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild()));  return;	  if(lastJump    ==    node)    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    return;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
342	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  nodePriorities,  iter);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  nodePriorities,  iter);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  nodePriorities,  iter);	  connectToPossibleExceptionHandler(node,    NodeUtil.getFinally(curHandler),    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
343	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.isFinally(curHandler),  node);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.isFinally(curHandler),  node);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.isFinally(curHandler),  node);	  connectToPossibleExceptionHandler(node,    NodeUtil.isFinally(curHandler));    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
344	[BUG]  [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  null);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  null);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  null);	  ConnectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
345	[BUG]  [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild(),  node);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild(),  node);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild(),  node);	  ConnectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
346	[BUG]  [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild(),  null);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild(),  null);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild(),  null);	  ConnectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
347	[BUG]  [BUGGY]  for(Node  node  :  finallyMap.values())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  for(Node  node  :  finallyMap.values())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	for(Node  node  :  finallyMap.values())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }	  for(Node    node    :    finallyMap.values())    {    if(lastJump.hasChildren())    {    connectToPossibleExceptionHandler(node,    node.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
348	[BUG]  [BUGGY]  NeighborUtil.redeclareVarsInsideBranch(node);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  NeighborUtil.redeclareVarsInsideBranch(node);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NeighborUtil.redeclareVarsInsideBranch(node);	  NeighborUtil.mayHaveSideEffects(node);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
349	[BUG]  [BUGGY]  NeighborUtil.removeChild(node);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  NeighborUtil.removeChild(node);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NeighborUtil.removeChild(node);	  NeighborUtil.mayHaveSideEffects(node);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
350	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.hasFinally(curHandler)&&  node.getFirstChild()!=  null);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.hasFinally(curHandler)&&  node.getFirstChild()!=  null);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.hasFinally(curHandler)&&  node.getFirstChild()!=  null);	  connectToPossibleExceptionHandler(node,    NodeUtil.hasFinally(curHandler),    node);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
351	[BUG]  [BUGGY]  for(Node  node  :  finallyMap.values())  {  if(node.hasFirstChild())  {  connectToPossibleExceptionHandler(node,  node.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  for(Node  node  :  finallyMap.values())  {  if(node.hasFirstChild())  {  connectToPossibleExceptionHandler(node,  node.getLastChild());  }  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	for(Node  node  :  finallyMap.values())  {  if(node.hasFirstChild())  {  connectToPossibleExceptionHandler(node,  node.getLastChild());  }	  for(Node    node    :    finallyMap.values())    {    if(node.hasChildren())    {    connectToPossibleExceptionHandler(node,    node.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
352	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFallThrough(curHandler),  node);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFallThrough(curHandler),  node);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getFallThrough(curHandler),  node);	  connectToPossibleExceptionHandler(node,    NodeUtil.getFallThrough(curHandler));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
353	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFallThrough(curHandler),  null);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFallThrough(curHandler),  null);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getFallThrough(curHandler),  null);	  connectToPossibleExceptionHandler(node,    NodeUtil.getFallThrough(curHandler));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
354	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(lastJump,  Branch.UNCOND,  curHandler.getLastChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(lastJump,  Branch.UNCOND,  curHandler.getLastChild());  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(lastJump,  Branch.UNCOND,  curHandler.getLastChild());	  connectToPossibleExceptionHandler(lastJump,    Branch.UNCOND,    curHandler);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
355	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(lastJump,  Branch.UNCOND,  curHandler.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(lastJump,  Branch.UNCOND,  curHandler.getFirstChild());  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(lastJump,  Branch.UNCOND,  curHandler.getFirstChild());	  connectToPossibleExceptionHandler(lastJump,    Branch.UNCOND,    curHandler);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
356	[BUG]  [BUGGY]  ConnectToPossibleExceptionHandler(node,  curHandler.getFirstChild(),  null);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  ConnectToPossibleExceptionHandler(node,  curHandler.getFirstChild(),  null);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	ConnectToPossibleExceptionHandler(node,  curHandler.getFirstChild(),  null);	  ConnectToPossibleExceptionHandler(node,    curHandler.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
357	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  null,  iter);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  null,  iter);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  null,  iter);	  connectToPossibleExceptionHandler(node,    NodeUtil.getFinally(curHandler),    null);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
358	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  null,  lastJump);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  null,  lastJump);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  null,  lastJump);	  connectToPossibleExceptionHandler(node,    NodeUtil.getFinally(curHandler),    null);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
359	[BUG]  [BUGGY]  if(lastJump  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  if(lastJump  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	if(lastJump  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
360	[BUG]  [BUGGY]  AssertionFailedError.make(lastJump,  curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  AssertionFailedError.make(lastJump,  curHandler.getLastChild()));  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	AssertionFailedError.make(lastJump,  curHandler.getLastChild()));	  AssertionFailedError.make(node,    lastJump,    curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
361	[BUG]  [BUGGY]  AssertionFailedError.make(lastJump,  lastJump,  curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  AssertionFailedError.make(lastJump,  lastJump,  curHandler.getLastChild()));  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	AssertionFailedError.make(lastJump,  lastJump,  curHandler.getLastChild()));	  AssertionFailedError.make(node,    lastJump,    curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
362	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  this);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  this);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  this);	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
363	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  firstJump);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  firstJump);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  firstJump);	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
364	[BUG]  [BUGGY]  parent.getParent())  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  node);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.getParent())  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  node);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.getParent())  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  node);	  parent.getParent())    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
365	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(lastJump),  null);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(lastJump),  null);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(lastJump),  null);	  connectToPossibleExceptionHandler(node,    NodeUtil.getFinally(lastJump));    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
366	[BUG]  [BUGGY]  Node  node  =  curHandler.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  Node  node  =  curHandler.removeFirstChild();  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	Node  node  =  curHandler.removeFirstChild();	  Node    node    =    curHandler.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
367	[BUG]  [BUGGY]  Node  node  =  curHandler.cloneTree();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  Node  node  =  curHandler.cloneTree();  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	Node  node  =  curHandler.cloneTree();	  Node    node    =    curHandler.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
368	[BUG]  [BUGGY]  NeighborUtil.thenBlock(curHandler.getLastChild())  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  NeighborUtil.thenBlock(curHandler.getLastChild())  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NeighborUtil.thenBlock(curHandler.getLastChild())  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }	  NeighborUtil.mayHaveSideEffects(node))    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
369	[BUG]  [BUGGY]  NeighborUtil.isFunctionDeclaration(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  NeighborUtil.isFunctionDeclaration(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NeighborUtil.isFunctionDeclaration(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }	  NeighborUtil.mayHaveSideEffects(node))    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
370	[BUG]  [BUGGY]  NeighborUtil.isStatementBlock(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  NeighborUtil.isStatementBlock(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NeighborUtil.isStatementBlock(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }	  NeighborUtil.mayHaveSideEffects(node))    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
371	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler)/  this);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler)/  this);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler)/  this);	  connectToPossibleExceptionHandler(node,    NodeUtil.getFinally(curHandler),    this);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
372	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Node.UNCOND,  curHandler.getLastChild(),  null);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Node.UNCOND,  curHandler.getLastChild(),  null);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Node.UNCOND,  curHandler.getLastChild(),  null);	  connectToPossibleExceptionHandler(node,    Node.UNCOND,    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
373	[BUG]  [BUGGY]  parent.replaceChild(node,  Node.newString(Token.NAME,  curHandler.getFirstChild()),  this);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.replaceChild(node,  Node.newString(Token.NAME,  curHandler.getFirstChild()),  this);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.replaceChild(node,  Node.newString(Token.NAME,  curHandler.getFirstChild()),  this);	  parent.replaceChild(node,    Node.newString(Token.NAME,    curHandler.getFirstChild()));    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
374	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler.getFirstChild()),  null);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler.getFirstChild()),  null);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler.getFirstChild()),  null);	  connectToPossibleExceptionHandler(node,    NodeUtil.getConditionExpression(curHandler.getFirstChild()));    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
375	[BUG]  [BUGGY]  NeighborUtil.redeclareVarsInsideBranch(curHandler.getLastChild());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  NeighborUtil.redeclareVarsInsideBranch(curHandler.getLastChild());  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NeighborUtil.redeclareVarsInsideBranch(curHandler.getLastChild());	  NeighborUtil.mayHaveSideEffects(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
376	[BUG]  [BUGGY]  NeighborUtil.removeChild(curHandler.getLastChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  NeighborUtil.removeChild(curHandler.getLastChild());  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NeighborUtil.removeChild(curHandler.getLastChild());	  NeighborUtil.mayHaveSideEffects(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
377	[BUG]  [BUGGY]  parent.replaceChild(node,  createEdge(node,  Branch.UNCOND,  null);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  parent.replaceChild(node,  createEdge(node,  Branch.UNCOND,  null);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.replaceChild(node,  createEdge(node,  Branch.UNCOND,  null);	  if(lastJump!=    null)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
378	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  node.getFirstChild(),  computeFallThrough(curHandler.getLastChild()),  lastJump);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  node.getFirstChild(),  computeFallThrough(curHandler.getLastChild()),  lastJump);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  node.getFirstChild(),  computeFallThrough(curHandler.getLastChild()),  lastJump);	  connectToPossibleExceptionHandler(node,    node.getFirstChild(),    lastJump);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
379	[BUG]  [BUGGY]  if(lastJump  ==  node)  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  if(lastJump  ==  node)  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  return;  }  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	if(lastJump  ==  node)  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  return;  }	  finallyMap.put(lastJump,    computeFallThrough(curHandler.getFirstChild()));    return;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
380	[BUG]  [BUGGY]  for(Node  node  :  finallyMap.values())  {  if(node.hasNext()  ||  node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  for(Node  node  :  finallyMap.values())  {  if(node.hasNext()  ||  node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	for(Node  node  :  finallyMap.values())  {  if(node.hasNext()  ||  node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }	  for(Node    node    :    finallyMap.values())    {    if(node.hasNext())    {    connectToPossibleExceptionHandler(node,    node.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
381	[BUG]  [BUGGY]  for(Node  node  :  finallyMap.values())  {  if(!node.hasNext())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  for(Node  node  :  finallyMap.values())  {  if(!node.hasNext())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	for(Node  node  :  finallyMap.values())  {  if(!node.hasNext())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }	  for(Node    node    :    finallyMap.values())    {    if(node.hasNext())    {    connectToPossibleExceptionHandler(node,    node.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
382	[BUG]  [BUGGY]  for(Node  node  :  finallyMap.values())  {  if(node.hasNext()  ||  node.getFirstChild()!=  null)  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  for(Node  node  :  finallyMap.values())  {  if(node.hasNext()  ||  node.getFirstChild()!=  null)  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	for(Node  node  :  finallyMap.values())  {  if(node.hasNext()  ||  node.getFirstChild()!=  null)  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }	  for(Node    node    :    finallyMap.values())    {    if(node.hasNext())    {    connectToPossibleExceptionHandler(node,    node.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
383	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  curHandler.getLastChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  curHandler.getLastChild());  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  curHandler.getLastChild());	  connectToPossibleExceptionHandler(node,    NodeUtil.getFinally(curHandler),    lastJump);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
384	[BUG]  [BUGGY]  AstNode  node  =  finallyMap.get(node);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  AstNode  node  =  finallyMap.get(node);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	AstNode  node  =  finallyMap.get(node);	  For(Node    node    :    finallyMap.values())    {    if(node.hasChildren())    {    connectToPossibleExceptionHandler(node,    node.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
385	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler),  node);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler),  node);  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler),  node);	  connectToPossibleExceptionHandler(node,    NodeUtil.getConditionExpression(curHandler));    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
386	[BUG]  [BUGGY]  NeighborUtil.thenBlock(curHandler.getLastChild())  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  NeighborUtil.thenBlock(curHandler.getLastChild())  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NeighborUtil.thenBlock(curHandler.getLastChild())  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());	  NeighborUtil.mayHaveSideEffects(node))    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
387	[BUG]  [BUGGY]  NeighborUtil.isFunctionDeclaration(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  NeighborUtil.isFunctionDeclaration(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NeighborUtil.isFunctionDeclaration(curHandler))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());	  NeighborUtil.mayHaveSideEffects(node))    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
388	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getParent());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getParent());  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getParent());	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
389	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChilil  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChilil  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChilil	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
390	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChilil);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChilil);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChilil);	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
391	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChilil());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChilil());  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChilil());	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
392	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild()  +  1  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild()  +  1  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild()  +  1	  connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
393	[BUG]  [BUGGY]  alreadyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  alreadyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]      }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	alreadyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));	  previouslyMap.put(lastJump,    computeFollowNode(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
394	[BUG]  [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  iter);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }      [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  iter);  [BUGGY]        if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  iter);	  ConnectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild(),    lastJump);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
