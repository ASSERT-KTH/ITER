bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());	  if(lastJump    ==    null)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.get    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
2	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild());  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild());	  if(lastJump    ==    null)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.get    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
3	[BUG]  [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild());  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getFirstChild());	  if(lastJump    ==    null)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.get    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
4	[BUG]  [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  lastJump);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  lastJump);  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  lastJump);	  if(lastJump    ==    null)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.get    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
5	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);	      if(lastJump    ==    null)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
6	[BUG]  [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);	      if(lastJump    ==    null)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
7	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  lastJump);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  lastJump);  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  lastJump);	      if(lastJump    ==    null)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
8	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler);  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler);	  if(lastJump    ==    null)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
9	[BUG]  [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler);  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler);	  if(lastJump    ==    null)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
10	[BUG]  [BUGGY]  parent.replaceChild(node,  curHandler);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  parent.replaceChild(node,  curHandler);  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.replaceChild(node,  curHandler);	  if(lastJump    ==    null)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
11	[BUG]  [BUGGY]  parent.replaceChild(node,  lastJump);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  parent.replaceChild(node,  lastJump);  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.replaceChild(node,  lastJump);	  if(lastJump    ==    null)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
12	[BUG]  [BUGGY]  parent.removeChild(node);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  parent.removeChild(node);  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.removeChild(node);	  if(lastJump    ==    null)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
13	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  curHandler.getLastChild());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  connectToPossibleExceptionHandler(node,  curHandler.getLastChild());  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  curHandler.getLastChild());	  if(node.hasChildren())    {    connectToPossibleExceptionHandler(node,    node.getFirstChild());    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastCh    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
14	[BUG]  [BUGGY]  fortunatelyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  fortunatelyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	fortunatelyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));	  if(node.hasChildren())    {    connectToPossibleExceptionHandler(node,    node.getFirstChild());    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastCh    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
15	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  curHandler.getFirstChild());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  connectToPossibleExceptionHandler(node,  curHandler.getFirstChild());  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  curHandler.getFirstChild());	  if(node.hasChildren())    {    connectToPossibleExceptionHandler(node,    node.getFirstChild());    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastCh    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
16	[BUG]  [BUGGY]  fortunatelyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  fortunatelyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild));  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	fortunatelyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild));	  if(node.hasChildren())    {    connectToPossibleExceptionHandler(node,    node.getFirstChild());    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastCh    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
17	[BUG]  [BUGGY]  safelyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  safelyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	safelyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));	      if(lastJump    ==    null)    {    createEdge(node,    Branch.UNCOND,    null);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
18	[BUG]  [BUGGY]  safelyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  safelyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild()));  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	safelyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild()));	      if(lastJump    ==    null)    {    createEdge(node,    Branch.UNCOND,    null);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
19	[BUG]  [BUGGY]  safelyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  safelyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	safelyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }	      if(lastJump    ==    null)    {    createEdge(node,    Branch.UNCOND,    null);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
20	[BUG]  [BUGGY]  parent.removeChild(lastJump);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  parent.removeChild(lastJump);  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.removeChild(lastJump);	      if(lastJump    ==    null)    {    createEdge(node,    Branch.UNCOND,    null);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
21	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  node);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  node);  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  node);	      connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
22	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  finallyMap);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  finallyMap);  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  finallyMap);	      connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
23	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  node.getLastChild());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  connectToPossibleExceptionHandler(node,  node.getLastChild());  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  node.getLastChild());	      connectToPossibleExceptionHandler(node,    node.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
24	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  node.getFirstChild(),  lastJump);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  connectToPossibleExceptionHandler(node,  node.getFirstChild(),  lastJump);  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  node.getFirstChild(),  lastJump);	      connectToPossibleExceptionHandler(node,    node.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
25	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }	  if(lastJump!=    null)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
26	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));	  if(lastJump!=    null)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
27	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild	  if(lastJump!=    null)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
28	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChil  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChil  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChil	  if(lastJump!=    null)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
29	[BUG]  [BUGGY]  ConnectToPossibleExceptionHandler(node,  curHandler.getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  ConnectToPossibleExceptionHandler(node,  curHandler.getLastChild());  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	ConnectToPossibleExceptionHandler(node,  curHandler.getLastChild());	      if(lastJump    ==    null)    {    createEdge(node,    Branch.UNCOND,    curHandler.getLastChild());    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
30	[BUG]  [BUGGY]  ConnectToPossibleExceptionHandler(node,  node.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  ConnectToPossibleExceptionHandler(node,  node.getFirstChild());  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	ConnectToPossibleExceptionHandler(node,  node.getFirstChild());	      if(lastJump    ==    null)    {    createEdge(node,    Branch.UNCOND,    curHandler.getLastChild());    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
31	[BUG]  [BUGGY]  parent.removeChild(curHandler.getLastChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  parent.removeChild(curHandler.getLastChild());  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.removeChild(curHandler.getLastChild());	      if(lastJump    ==    null)    {    createEdge(node,    Branch.UNCOND,    curHandler.getLastChild());    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
32	[BUG]  [BUGGY]  Node  curHandler  =  curHandler.getLastChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  Node  curHandler  =  curHandler.getLastChild();  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	Node  curHandler  =  curHandler.getLastChild();	      if(lastJump    ==    null)    {    createEdge(node,    Branch.UNCOND,    curHandler.getLastChild());    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
33	[BUG]  [BUGGY]  ConnectToPossibleExceptionHandler(node,  curHandler.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  ConnectToPossibleExceptionHandler(node,  curHandler.getFirstChild());  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	ConnectToPossibleExceptionHandler(node,  curHandler.getFirstChild());	      if(lastJump    ==    null)    {    createEdge(node,    Branch.UNCOND,    curHandler.getLastChild());    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
34	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(lastJump));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(lastJump));  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(lastJump));	      connectToPossibleExceptionHandler(node,    NodeUtil.getFinally(curHandler));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
35	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  nodePriorities);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  nodePriorities);  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  nodePriorities);	      connectToPossibleExceptionHandler(node,    NodeUtil.getFinally(curHandler));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
36	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  lastJump);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  lastJump);  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  lastJump);	      connectToPossibleExceptionHandler(node,    NodeUtil.getFinally(curHandler));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
37	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  null);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  null);  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  null);	      connectToPossibleExceptionHandler(node,    NodeUtil.getFinally(curHandler));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
38	[BUG]  [BUGGY]  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));	      finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
39	[BUG]  [BUGGY]  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()),  node);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()),  node);  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()),  node);	      finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
40	[BUG]  [BUGGY]  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()),  createEdge(node,  Branch.UNCOND);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()),  createEdge(node,  Branch.UNCOND);  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()),  createEdge(node,  Branch.UNCOND);	      finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
41	[BUG]  [BUGGY]  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()),  null);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()),  null);  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()),  null);	      finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
42	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  lastJump);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  lastJump);  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  lastJump);	      if(lastJump    ==    null)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    node);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
43	[BUG]  [BUGGY]  AssertionFailedError.make(node,  lastJump,  curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  AssertionFailedError.make(node,  lastJump,  curHandler.getLastChild()));  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	AssertionFailedError.make(node,  lastJump,  curHandler.getLastChild()));	  if(lastJump    ==    null)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
44	[BUG]  [BUGGY]  Node  curHandler  =  node.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  Node  curHandler  =  node.getFirstChild();  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	Node  curHandler  =  node.getFirstChild();	  if(lastJump    ==    null)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
45	[BUG]  [BUGGY]  AssertionFailedError.make(node,  curHandler,  lastJump));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  AssertionFailedError.make(node,  curHandler,  lastJump));  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	AssertionFailedError.make(node,  curHandler,  lastJump));	  if(lastJump    ==    null)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
46	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.hasFinally(lastJump));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.hasFinally(lastJump));  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.hasFinally(lastJump));	      connectToPossibleExceptionHandler(node,    NodeUtil.hasFinally(curHandler));    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
47	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.isFinally(curHandler));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.isFinally(curHandler));  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.isFinally(curHandler));	      connectToPossibleExceptionHandler(node,    NodeUtil.hasFinally(curHandler));    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
48	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getLastChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getLastChild());  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getLastChild());	      connectToPossibleExceptionHandler(node,    NodeUtil.hasFinally(curHandler));    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
49	[BUG]  [BUGGY]  NeighborUtil.mayHaveSideEffects(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  NeighborUtil.mayHaveSideEffects(curHandler.getLastChild()));  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NeighborUtil.mayHaveSideEffects(curHandler.getLastChild()));	      if(lastJump    ==    null)    {    createEdge(node,    Branch.UNCOND,    curHandler.getLastChild());    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastCh    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
50	[BUG]  [BUGGY]  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  return;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  return;  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	finallyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  return;	      finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    return;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
51	[BUG]  [BUGGY]  fortunatelyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  return;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  fortunatelyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  return;  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	fortunatelyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  return;	      finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    return;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
52	[BUG]  [BUGGY]  for(Node  node  :  finallyMap.values())  {  if(node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  for(Node  node  :  finallyMap.values())  {  if(node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getLastChild());  }  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	for(Node  node  :  finallyMap.values())  {  if(node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getLastChild());  }	  for(Node    node    :    finallyMap.values())    {    if(node.hasChildren())    {    connectToPossibleExceptionHandler(node,    node.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
53	[BUG]  [BUGGY]  For(Node  node  :  finallyMap.values())  {  if(node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  For(Node  node  :  finallyMap.values())  {  if(node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	For(Node  node  :  finallyMap.values())  {  if(node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }	  for(Node    node    :    finallyMap.values())    {    if(node.hasChildren())    {    connectToPossibleExceptionHandler(node,    node.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
54	[BUG]  [BUGGY]  For(Node  node  :  finallyMap.values())  {  if(node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  For(Node  node  :  finallyMap.values())  {  if(node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getLastChild());  }  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	For(Node  node  :  finallyMap.values())  {  if(node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getLastChild());  }	  for(Node    node    :    finallyMap.values())    {    if(node.hasChildren())    {    connectToPossibleExceptionHandler(node,    node.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
55	[BUG]  [BUGGY]  for(Node  node  :  finallyMap.values())  {  if(lastJump.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  for(Node  node  :  finallyMap.values())  {  if(lastJump.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	for(Node  node  :  finallyMap.values())  {  if(lastJump.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }	  for(Node    node    :    finallyMap.values())    {    if(node.hasChildren())    {    connectToPossibleExceptionHandler(node,    node.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
56	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  node.getFirstChild(),  null);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  connectToPossibleExceptionHandler(node,  node.getFirstChild(),  null);  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  node.getFirstChild(),  null);	      connectToPossibleExceptionHandler(node,    node.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
57	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild	      if(lastJump    ==    null)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
58	[BUG]  [BUGGY]  Node  node  =  curHandler.getFirstChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  Node  node  =  curHandler.getFirstChild();  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	Node  node  =  curHandler.getFirstChild();	  if(lastJump    ==    null)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
59	[BUG]  [BUGGY]  NeighborUtil.mayHaveSideEffects(curHandler);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  NeighborUtil.mayHaveSideEffects(curHandler);  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NeighborUtil.mayHaveSideEffects(curHandler);	  if(lastJump    ==    null)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
60	[BUG]  [BUGGY]  NeighborUtil.mayHaveSideEffects(node);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  NeighborUtil.mayHaveSideEffects(node);  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NeighborUtil.mayHaveSideEffects(node);	  if(lastJump    ==    null)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
61	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler));  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler));	      connectToPossibleExceptionHandler(node,    NodeUtil.hasFinally(curHandler));    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
62	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFallThrough(curHandler));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFallThrough(curHandler));  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getFallThrough(curHandler));	      connectToPossibleExceptionHandler(node,    NodeUtil.hasFinally(curHandler));    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
63	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  Node  node  =  node.getFirstChild();  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	Node  node  =  node.getFirstChild();	  if(node.hasChildren())    {    connectToPossibleExceptionHandler(node,    node.getFirstChild());    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastCh    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
64	[BUG]  [BUGGY]  RectangleEdge.createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  RectangleEdge.createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	RectangleEdge.createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());	  if(node.hasChildren())    {    connectToPossibleExceptionHandler(node,    node.getFirstChild());    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastCh    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
65	[BUG]  [BUGGY]  finallyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild()));  return;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  finallyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild()));  return;  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	finallyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild()));  return;	      finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    return;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
66	[BUG]  [BUGGY]  safelyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  safelyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	safelyMap.put(lastJump,  computeFallThrough(curHandler.getFirstChild()));	  if(lastJump    ==    null)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
67	[BUG]  [BUGGY]  NeighborUtil.mayHaveSideEffects(node))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  NeighborUtil.mayHaveSideEffects(node))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NeighborUtil.mayHaveSideEffects(node))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());	      if(lastJump    ==    node)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
68	[BUG]  [BUGGY]  NeighborUtil.mayHaveSideEffects(node))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  NeighborUtil.mayHaveSideEffects(node))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NeighborUtil.mayHaveSideEffects(node))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }	      if(lastJump    ==    node)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
69	[BUG]  [BUGGY]  NeighborUtil.mayHaveSideEffects(node))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJ  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  NeighborUtil.mayHaveSideEffects(node))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJ  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	NeighborUtil.mayHaveSideEffects(node))  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJ	      if(lastJump    ==    node)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
70	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  node);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  node);  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  node);	      connectToPossibleExceptionHandler(node,    NodeUtil.getFinally(curHandler));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
71	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  node);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  node);  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  node);	      if(lastJump    ==    null)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    node);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
72	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  nodePriorities);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  nodePriorities);  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  nodePriorities);	      connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
73	[BUG]  [BUGGY]  RectangleEdge.this.connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  RectangleEdge.this.connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	RectangleEdge.this.connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);	  if(lastJump    ==    null)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
74	[BUG]  [BUGGY]  finallyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  finallyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild()));  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	finallyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild()));	      finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
75	[BUG]  [BUGGY]  safelyMap.put(lastJump,  computeFollowNode(curHandler.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  safelyMap.put(lastJump,  computeFollowNode(curHandler.getFirstChild()));  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	safelyMap.put(lastJump,  computeFollowNode(curHandler.getFirstChild()));	  if(lastJump    ==    null)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
76	[BUG]  [BUGGY]  for(Node  node  :  finallyMap.values())  {  if(!node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  for(Node  node  :  finallyMap.values())  {  if(!node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	for(Node  node  :  finallyMap.values())  {  if(!node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }	  for(Node    node    :    finallyMap.values())    {    if(node.hasChildren())    {    connectToPossibleExceptionHandler(node,    node.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
77	[BUG]  [BUGGY]  for(Node  node  :  finallyMap.values())  {  if(lastJump!=  null)  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  for(Node  node  :  finallyMap.values())  {  if(lastJump!=  null)  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	for(Node  node  :  finallyMap.values())  {  if(lastJump!=  null)  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }	  for(Node    node    :    finallyMap.values())    {    if(node.hasChildren())    {    connectToPossibleExceptionHandler(node,    node.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
78	[BUG]  [BUGGY]  parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.	      if(lastJump    ==    node)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
79	[BUG]  [BUGGY]  parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }	      if(lastJump    ==    node)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
80	[BUG]  [BUGGY]  parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());	      if(lastJump    ==    node)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
81	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Node.UNCOND,  curHandler.getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  connectToPossibleExceptionHandler(node,  Node.UNCOND,  curHandler.getLastChild());  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Node.UNCOND,  curHandler.getLastChild());	      if(lastJump    ==    null)    {    createEdge(node,    Branch.UNCOND,    curHandler.getLastChild());    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
82	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler.getLastChild()));  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler.getLastChild()));	      if(lastJump    ==    null)    {    createEdge(node,    Branch.UNCOND,    curHandler.getLastChild());    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
83	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler.getFirstChild()));  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getConditionExpression(curHandler.getFirstChild()));	      if(lastJump    ==    null)    {    createEdge(node,    Branch.UNCOND,    curHandler.getLastChild());    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
84	[BUG]  [BUGGY]  if(lastJump  ==  node)  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  if(lastJump  ==  node)  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  return;  }  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	if(lastJump  ==  node)  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  return;  }	      finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    return;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
85	[BUG]  [BUGGY]  if(lastJump!=  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  if(lastJump!=  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	if(lastJump!=  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }	  if(lastJump    ==    null)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
86	[BUG]  [BUGGY]  if(lastJump!=  null)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  if(lastJump!=  null)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	if(lastJump!=  null)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }	  if(lastJump    ==    null)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
87	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  null);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  null);  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild(),  null);	      connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
88	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.hasFinally(curHandler),  node);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.hasFinally(curHandler),  node);  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.hasFinally(curHandler),  node);	      connectToPossibleExceptionHandler(node,    NodeUtil.hasFinally(curHandler));    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
89	[BUG]  [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	ConnectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }	  if(lastJump!=    null)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
90	[BUG]  [BUGGY]  for(Node  node  :  finallyMap.values())  {  if(node.hasNext())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  for(Node  node  :  finallyMap.values())  {  if(node.hasNext())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	for(Node  node  :  finallyMap.values())  {  if(node.hasNext())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }	  for(Node    node    :    finallyMap.values())    {    if(node.hasChildren())    {    connectToPossibleExceptionHandler(node,    node.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
91	[BUG]  [BUGGY]  for(Node  node  :  finallyMap.values())  {  if(node.hasMoreElements())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  for(Node  node  :  finallyMap.values())  {  if(node.hasMoreElements())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	for(Node  node  :  finallyMap.values())  {  if(node.hasMoreElements())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }	  for(Node    node    :    finallyMap.values())    {    if(node.hasChildren())    {    connectToPossibleExceptionHandler(node,    node.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
92	[BUG]  [BUGGY]  parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild())  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild())  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild())	      if(lastJump    ==    null)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild())    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
93	[BUG]  [BUGGY]  parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild	      if(lastJump    ==    null)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild())    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
94	[BUG]  [BUGGY]  parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChil  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChil  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChil	      if(lastJump    ==    null)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild())    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
95	[BUG]  [BUGGY]  parent.getParent())  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  parent.getParent())  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.getParent())  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.	      if(lastJump    ==    null)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
96	[BUG]  [BUGGY]  parent.getParent())  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  parent.getParent())  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.getParent())  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());	      if(lastJump    ==    null)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler.getLastChild());    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
97	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  lastJump);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  connectToPossibleExceptionHandler(node,  lastJump);  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  lastJump);	  if(node.hasChildren())    {    connectToPossibleExceptionHandler(node,    node.getFirstChild());    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastCh    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
98	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  this);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  this);  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler),  this);	      connectToPossibleExceptionHandler(node,    NodeUtil.getFinally(curHandler));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
99	[BUG]  [BUGGY]  previouslyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  previouslyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	previouslyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));	      if(lastJump    ==    null)    {    createEdge(node,    Branch.UNCOND,    null);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
100	[BUG]  [BUGGY]  previouslyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  previouslyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild()));  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	previouslyMap.put(lastJump,  computeFollowNode(curHandler.getLastChild()));	      if(lastJump    ==    null)    {    createEdge(node,    Branch.UNCOND,    null);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
101	[BUG]  [BUGGY]  parent.addChildToFront(curHandler.getLastChild());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  parent.addChildToFront(curHandler.getLastChild());  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.addChildToFront(curHandler.getLastChild());	      if(lastJump    ==    null)    {    createEdge(node,    Branch.UNCOND,    null);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
102	[BUG]  [BUGGY]  Node  parent  =  node.getParent();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  Node  parent  =  node.getParent();  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	Node  parent  =  node.getParent();	  if(lastJump    ==    null)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
103	[BUG]  [BUGGY]  connectToPossibleExceptionHandler(lastJump,  Branch.UNCOND,  curHandler);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  connectToPossibleExceptionHandler(lastJump,  Branch.UNCOND,  curHandler);  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	connectToPossibleExceptionHandler(lastJump,  Branch.UNCOND,  curHandler);	  if(lastJump    ==    null)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
104	[BUG]  [BUGGY]  parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }	      if(lastJump    ==    node)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
105	[BUG]  [BUGGY]  parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastCh  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastCh  [BUGGY]    }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastCh	      if(lastJump    ==    node)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    null);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
106	[BUG]  [BUGGY]  parent.replaceChild(node,  Node.newString(Token.NAME,  curHandler.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  parent.replaceChild(node,  Node.newString(Token.NAME,  curHandler.getFirstChild()));  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.replaceChild(node,  Node.newString(Token.NAME,  curHandler.getFirstChild()));	  if(lastJump    ==    null)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
107	[BUG]  [BUGGY]  parent.replaceChild(node,  NodeUtil.hasFinally(curHandler));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  parent.replaceChild(node,  NodeUtil.hasFinally(curHandler));  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.replaceChild(node,  NodeUtil.hasFinally(curHandler));	  if(lastJump    ==    null)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
108	[BUG]  [BUGGY]  parent.replaceChild(node,  NodeUtil.getFinally(curHandler));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }    [BUGGY]  parent.replaceChild(node,  NodeUtil.getFinally(curHandler));  [BUGGY]      if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	parent.replaceChild(node,  NodeUtil.getFinally(curHandler));	  if(lastJump    ==    null)    {    connectToPossibleExceptionHandler(node,    Branch.UNCOND,    curHandler);    }    else    {    finallyMap.put(lastJump,    computeFallThrough(curHandler.getLastChild()));    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
