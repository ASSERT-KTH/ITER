bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  [BUGGY]    finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  [BUGGY]  }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	    finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));		non-compiled	[CE]  illegal  start  of  expression	20	None	add
2	[BUG]  [BUGGY]    connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler));  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  [BUGGY]    connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler));  [BUGGY]  }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	    connectToPossibleExceptionHandler(node,  NodeUtil.getFinally(curHandler));		non-compiled	[CE]  illegal  start  of  expression	20	None	add
3	[BUG]  [BUGGY]    connectToPossibleExceptionHandler(node,  node.getFirstChild());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  [BUGGY]    connectToPossibleExceptionHandler(node,  node.getFirstChild());  [BUGGY]  }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	    connectToPossibleExceptionHandler(node,  node.getFirstChild());		non-compiled	[CE]  illegal  start  of  expression	20	None	add
4	[BUG]  [BUGGY]    connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  [BUGGY]    connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  [BUGGY]  }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	    connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());		non-compiled	[CE]  illegal  start  of  expression	20	None	add
5	[BUG]  [BUGGY]    connectToPossibleExceptionHandler(node,  NodeUtil.hasFinally(curHandler));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  [BUGGY]    connectToPossibleExceptionHandler(node,  NodeUtil.hasFinally(curHandler));  [BUGGY]  }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	    connectToPossibleExceptionHandler(node,  NodeUtil.hasFinally(curHandler));		non-compiled	[CE]  illegal  start  of  expression	20	None	add
6	[BUG]  [BUGGY]    finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  return;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError  [CONTEXT]  }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  [BUGGY]    finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  return;  [BUGGY]  }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	    finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  return;		non-compiled	[CE]  illegal  start  of  expression	20	None	add
7	[BUG]  [BUGGY]  if(lastJump  ==  null)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  [BUGGY]  if(lastJump  ==  null)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  [BUGGY]    if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	if(lastJump  ==  null)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }	}  	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
8	[BUG]  [BUGGY]  if(lastJump!=  null)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  [BUGGY]  if(lastJump!=  null)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  [BUGGY]    if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	if(lastJump!=  null)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }	}  	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
9	[BUG]  [BUGGY]  if(lastJump  ==  null)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  [BUGGY]  if(lastJump  ==  null)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  [BUGGY]    if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	if(lastJump  ==  null)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }	}  	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
10	[BUG]  [BUGGY]  if(lastJump  ==  null)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  [BUGGY]  if(lastJump  ==  null)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild  [BUGGY]    if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	if(lastJump  ==  null)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild	}  	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
11	[BUG]  [BUGGY]  if(lastJump  ==  null)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.get  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  [BUGGY]  if(lastJump  ==  null)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.get  [BUGGY]    if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	if(lastJump  ==  null)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.get	}  	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
12	[BUG]  [BUGGY]    if(lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  [BUGGY]    if(lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  [BUGGY]  }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	    if(lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
13	[BUG]  [BUGGY]    if(lastJump  ==  null)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  [BUGGY]    if(lastJump  ==  null)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild  [BUGGY]  }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	    if(lastJump  ==  null)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild		non-compiled	[CE]  illegal  start  of  expression	20	None	add
14	[BUG]  [BUGGY]    if(lastJump  ==  null)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  node);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  [BUGGY]    if(lastJump  ==  null)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  node);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  [BUGGY]  }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	    if(lastJump  ==  null)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  node);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
15	[BUG]  [BUGGY]    if(lastJump  ==  null)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild())  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  [BUGGY]    if(lastJump  ==  null)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild())  [BUGGY]  }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	    if(lastJump  ==  null)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild())		non-compiled	[CE]  illegal  start  of  expression	20	None	add
16	[BUG]  [BUGGY]  if(node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastCh  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  [BUGGY]  if(node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastCh  [BUGGY]    if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	if(node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastCh	}  	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
17	[BUG]  [BUGGY]  for(Node  node  :  finallyMap.values())  {  if(node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  [BUGGY]  for(Node  node  :  finallyMap.values())  {  if(node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  [BUGGY]    if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	for(Node  node  :  finallyMap.values())  {  if(node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }	}  	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
18	[BUG]  [BUGGY]  if(lastJump  ==  null)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  [BUGGY]  if(lastJump  ==  null)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  [BUGGY]    if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	if(lastJump  ==  null)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }	}  	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
19	[BUG]  [BUGGY]    if(lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastCh  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  [BUGGY]    if(lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastCh  [BUGGY]  }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	    if(lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastCh		non-compiled	[CE]  illegal  start  of  expression	20	None	add
20	[BUG]  [BUGGY]    if(lastJump  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  [BUGGY]    if(lastJump  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  [BUGGY]  }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	    if(lastJump  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
21	[BUG]  [BUGGY]    if(lastJump  ==  null)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  [BUGGY]    if(lastJump  ==  null)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.  [BUGGY]  }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	    if(lastJump  ==  null)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.		non-compiled	[CE]  illegal  start  of  expression	20	None	add
22	[BUG]  [BUGGY]    if(lastJump  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  [BUGGY]    if(lastJump  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.  [BUGGY]  }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	    if(lastJump  ==  node)  {  connectToPossibleExceptionHandler(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.		non-compiled	[CE]  illegal  start  of  expression	20	None	add
23	[BUG]  [BUGGY]    if(lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChil  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  }  if  (NodeUtil.hasFinally(curHandler))  {  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChild()));  }  lastJump  =  curHandler;  }  [BUGGY]    if(lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChil  [BUGGY]  }  if  (node.hasChildren())  {  connectToPossibleExceptionHandler(node,  node.getFirstChild());  }  if  (lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  null);  }  else  {  finallyMap.put(lastJump,  null);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  handleReturn  [RETURN_TYPE]  void  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	    if(lastJump  ==  null)  {  createEdge(node,  Branch.UNCOND,  curHandler.getLastChild());  }  else  {  finallyMap.put(lastJump,  computeFallThrough(curHandler.getLastChil		non-compiled	[CE]  illegal  start  of  expression	20	None	add
