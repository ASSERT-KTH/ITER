bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] preClose(); [FE] arrays first differed [CONTEXT] private void closeCopiedEntry(final boolean phased) throws IOException { [BUGGY] preClose(); [BUGGY] entry.bytesRead = entry.entry.getSize(); final Zip64Mode effectiveMode = getEffectiveZip64Mode(entry.entry); final boolean actuallyNeedsZip64 = checkIfNeedsZip64(effectiveMode); closeEntry(actuallyNeedsZip64, phased); } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] closeCopiedEntry [RETURN_TYPE] void  final boolean phased [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode zip64Mode String DEFAULT_ENCODING comment encoding n name StreamCompressor _streamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED count level method long bytesRead bytesWritten cdLength cdOffset dataStart localDataStart offset realCrc byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG copyBuffer SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry entry ze List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	530	530	1	replace	
2	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] private void closeCopiedEntry(final boolean phased) throws IOException { [BUGGY] [BUGGY] preClose(); entry.bytesRead = entry.entry.getSize(); final Zip64Mode effectiveMode = getEffectiveZip64Mode(entry.entry); final boolean actuallyNeedsZip64 = checkIfNeedsZip64(effectiveMode); closeEntry(actuallyNeedsZip64, phased); } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] closeCopiedEntry [RETURN_TYPE] void  final boolean phased [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode zip64Mode String DEFAULT_ENCODING comment encoding n name StreamCompressor _streamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED count level method long bytesRead bytesWritten cdLength cdOffset dataStart localDataStart offset realCrc byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG copyBuffer SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry entry ze List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	530	530	1	add	
3	[BUG] [BUGGY] entry.bytesRead = entry.entry.getSize(); [FE] arrays first differed [CONTEXT] private void closeCopiedEntry(final boolean phased) throws IOException { preClose(); [BUGGY] entry.bytesRead = entry.entry.getSize(); [BUGGY] final Zip64Mode effectiveMode = getEffectiveZip64Mode(entry.entry); final boolean actuallyNeedsZip64 = checkIfNeedsZip64(effectiveMode); closeEntry(actuallyNeedsZip64, phased); } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] closeCopiedEntry [RETURN_TYPE] void  final boolean phased [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode zip64Mode String DEFAULT_ENCODING comment encoding n name StreamCompressor _streamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED count level method long bytesRead bytesWritten cdLength cdOffset dataStart localDataStart offset realCrc byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG copyBuffer SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry entry ze List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	531	531	1	replace	
4	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] private void closeCopiedEntry(final boolean phased) throws IOException { preClose(); [BUGGY] [BUGGY] entry.bytesRead = entry.entry.getSize(); final Zip64Mode effectiveMode = getEffectiveZip64Mode(entry.entry); final boolean actuallyNeedsZip64 = checkIfNeedsZip64(effectiveMode); closeEntry(actuallyNeedsZip64, phased); } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] closeCopiedEntry [RETURN_TYPE] void  final boolean phased [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode zip64Mode String DEFAULT_ENCODING comment encoding n name StreamCompressor _streamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED count level method long bytesRead bytesWritten cdLength cdOffset dataStart localDataStart offset realCrc byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG copyBuffer SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry entry ze List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	531	531	1	add	
5	[BUG] [BUGGY] final Zip64Mode effectiveMode = getEffectiveZip64Mode(entry.entry); [FE] arrays first differed [CONTEXT] private void closeCopiedEntry(final boolean phased) throws IOException { preClose(); entry.bytesRead = entry.entry.getSize(); [BUGGY] final Zip64Mode effectiveMode = getEffectiveZip64Mode(entry.entry); [BUGGY] final boolean actuallyNeedsZip64 = checkIfNeedsZip64(effectiveMode); closeEntry(actuallyNeedsZip64, phased); } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] closeCopiedEntry [RETURN_TYPE] void  final boolean phased [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode zip64Mode String DEFAULT_ENCODING comment encoding n name StreamCompressor _streamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED count level method long bytesRead bytesWritten cdLength cdOffset dataStart localDataStart offset realCrc byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG copyBuffer SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry entry ze List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	532	532	1	replace	
6	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] private void closeCopiedEntry(final boolean phased) throws IOException { preClose(); entry.bytesRead = entry.entry.getSize(); [BUGGY] [BUGGY] final Zip64Mode effectiveMode = getEffectiveZip64Mode(entry.entry); final boolean actuallyNeedsZip64 = checkIfNeedsZip64(effectiveMode); closeEntry(actuallyNeedsZip64, phased); } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] closeCopiedEntry [RETURN_TYPE] void  final boolean phased [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode zip64Mode String DEFAULT_ENCODING comment encoding n name StreamCompressor _streamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED count level method long bytesRead bytesWritten cdLength cdOffset dataStart localDataStart offset realCrc byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG copyBuffer SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry entry ze List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	532	532	1	add	
7	[BUG] [BUGGY] final boolean actuallyNeedsZip64 = checkIfNeedsZip64(effectiveMode); [FE] arrays first differed [CONTEXT] private void closeCopiedEntry(final boolean phased) throws IOException { preClose(); entry.bytesRead = entry.entry.getSize(); final Zip64Mode effectiveMode = getEffectiveZip64Mode(entry.entry); [BUGGY] final boolean actuallyNeedsZip64 = checkIfNeedsZip64(effectiveMode); [BUGGY] closeEntry(actuallyNeedsZip64, phased); } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] closeCopiedEntry [RETURN_TYPE] void  final boolean phased [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode zip64Mode String DEFAULT_ENCODING comment encoding n name StreamCompressor _streamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED count level method long bytesRead bytesWritten cdLength cdOffset dataStart localDataStart offset realCrc byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG copyBuffer SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry entry ze List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	533	533	1	replace	
8	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] private void closeCopiedEntry(final boolean phased) throws IOException { preClose(); entry.bytesRead = entry.entry.getSize(); final Zip64Mode effectiveMode = getEffectiveZip64Mode(entry.entry); [BUGGY] [BUGGY] final boolean actuallyNeedsZip64 = checkIfNeedsZip64(effectiveMode); closeEntry(actuallyNeedsZip64, phased); } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] closeCopiedEntry [RETURN_TYPE] void  final boolean phased [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode zip64Mode String DEFAULT_ENCODING comment encoding n name StreamCompressor _streamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED count level method long bytesRead bytesWritten cdLength cdOffset dataStart localDataStart offset realCrc byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG copyBuffer SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry entry ze List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	533	533	1	add	
9	[BUG] [BUGGY] closeEntry(actuallyNeedsZip64, phased); [FE] arrays first differed [CONTEXT] private void closeCopiedEntry(final boolean phased) throws IOException { preClose(); entry.bytesRead = entry.entry.getSize(); final Zip64Mode effectiveMode = getEffectiveZip64Mode(entry.entry); final boolean actuallyNeedsZip64 = checkIfNeedsZip64(effectiveMode); [BUGGY] closeEntry(actuallyNeedsZip64, phased); [BUGGY] } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] closeCopiedEntry [RETURN_TYPE] void  final boolean phased [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode zip64Mode String DEFAULT_ENCODING comment encoding n name StreamCompressor _streamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED count level method long bytesRead bytesWritten cdLength cdOffset dataStart localDataStart offset realCrc byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG copyBuffer SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry entry ze List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	
10	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] private void closeCopiedEntry(final boolean phased) throws IOException { preClose(); entry.bytesRead = entry.entry.getSize(); final Zip64Mode effectiveMode = getEffectiveZip64Mode(entry.entry); final boolean actuallyNeedsZip64 = checkIfNeedsZip64(effectiveMode); [BUGGY] [BUGGY] closeEntry(actuallyNeedsZip64, phased); } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] closeCopiedEntry [RETURN_TYPE] void  final boolean phased [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode zip64Mode String DEFAULT_ENCODING comment encoding n name StreamCompressor _streamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED count level method long bytesRead bytesWritten cdLength cdOffset dataStart localDataStart offset realCrc byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG copyBuffer SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry entry ze List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	add	
11	[BUG] [BUGGY] } [FE] arrays first differed [CONTEXT] private void closeCopiedEntry(final boolean phased) throws IOException { preClose(); entry.bytesRead = entry.entry.getSize(); final Zip64Mode effectiveMode = getEffectiveZip64Mode(entry.entry); final boolean actuallyNeedsZip64 = checkIfNeedsZip64(effectiveMode); closeEntry(actuallyNeedsZip64, phased); [BUGGY] } [BUGGY]  [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] closeCopiedEntry [RETURN_TYPE] void  final boolean phased [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode zip64Mode String DEFAULT_ENCODING comment encoding n name StreamCompressor _streamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED count level method long bytesRead bytesWritten cdLength cdOffset dataStart localDataStart offset realCrc byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG copyBuffer SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry entry ze List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	535	535	1	replace	
12	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] private void closeCopiedEntry(final boolean phased) throws IOException { preClose(); entry.bytesRead = entry.entry.getSize(); final Zip64Mode effectiveMode = getEffectiveZip64Mode(entry.entry); final boolean actuallyNeedsZip64 = checkIfNeedsZip64(effectiveMode); closeEntry(actuallyNeedsZip64, phased); [BUGGY] [BUGGY] } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] closeCopiedEntry [RETURN_TYPE] void  final boolean phased [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode zip64Mode String DEFAULT_ENCODING comment encoding n name StreamCompressor _streamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED count level method long bytesRead bytesWritten cdLength cdOffset dataStart localDataStart offset realCrc byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG copyBuffer SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry entry ze List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	535	535	1	add	
13	[BUG] [BUGGY] final ZipArchiveEntry ae = new ZipArchiveEntry(entry); [FE] arrays first differed [CONTEXT] public void addRawArchiveEntry(final ZipArchiveEntry entry, final InputStream rawStream) throws IOException { [BUGGY] final ZipArchiveEntry ae = new ZipArchiveEntry(entry); [BUGGY] if (hasZip64Extra(ae)) {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID); } final boolean is2PhaseSource = ae.getCrc() != ZipArchiveEntry.CRC_UNKNOWN && ae.getSize() != ArchiveEntry.SIZE_UNKNOWN && ae.getCompressedSize() != ArchiveEntry.SIZE_UNKNOWN; putArchiveEntry(ae, is2PhaseSource); [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] addRawArchiveEntry [RETURN_TYPE] void  ZipArchiveEntry entry InputStream rawStream [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields InputStream rawStream OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode zip64Mode String DEFAULT_ENCODING comment encoding n name StreamCompressor _streamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED count level method long bytesRead bytesWritten cdLength cdOffset dataStart localDataStart offset realCrc byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG copyBuffer SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten is2PhaseSource phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry ae entry ze List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	577	577	1	replace	
14	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] public void addRawArchiveEntry(final ZipArchiveEntry entry, final InputStream rawStream) throws IOException { [BUGGY] [BUGGY] final ZipArchiveEntry ae = new ZipArchiveEntry(entry); if (hasZip64Extra(ae)) {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID); } final boolean is2PhaseSource = ae.getCrc() != ZipArchiveEntry.CRC_UNKNOWN && ae.getSize() != ArchiveEntry.SIZE_UNKNOWN && ae.getCompressedSize() != ArchiveEntry.SIZE_UNKNOWN; putArchiveEntry(ae, is2PhaseSource); [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] addRawArchiveEntry [RETURN_TYPE] void  ZipArchiveEntry entry InputStream rawStream [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields InputStream rawStream OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode zip64Mode String DEFAULT_ENCODING comment encoding n name StreamCompressor _streamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED count level method long bytesRead bytesWritten cdLength cdOffset dataStart localDataStart offset realCrc byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG copyBuffer SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten is2PhaseSource phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry ae entry ze List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	577	577	1	add	
15	[BUG] [BUGGY] if (hasZip64Extra(ae)) { [FE] arrays first differed [CONTEXT] public void addRawArchiveEntry(final ZipArchiveEntry entry, final InputStream rawStream) throws IOException { final ZipArchiveEntry ae = new ZipArchiveEntry(entry); [BUGGY] if (hasZip64Extra(ae)) { [BUGGY]    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID); } final boolean is2PhaseSource = ae.getCrc() != ZipArchiveEntry.CRC_UNKNOWN && ae.getSize() != ArchiveEntry.SIZE_UNKNOWN && ae.getCompressedSize() != ArchiveEntry.SIZE_UNKNOWN; putArchiveEntry(ae, is2PhaseSource); copyFromZipInputStream(rawStream); [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] addRawArchiveEntry [RETURN_TYPE] void  ZipArchiveEntry entry InputStream rawStream [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields InputStream rawStream OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode zip64Mode String DEFAULT_ENCODING comment encoding n name StreamCompressor _streamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED count level method long bytesRead bytesWritten cdLength cdOffset dataStart localDataStart offset realCrc byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG copyBuffer SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten is2PhaseSource phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry ae entry ze List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	
16	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] public void addRawArchiveEntry(final ZipArchiveEntry entry, final InputStream rawStream) throws IOException { final ZipArchiveEntry ae = new ZipArchiveEntry(entry); [BUGGY] [BUGGY] if (hasZip64Extra(ae)) {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID); } final boolean is2PhaseSource = ae.getCrc() != ZipArchiveEntry.CRC_UNKNOWN && ae.getSize() != ArchiveEntry.SIZE_UNKNOWN && ae.getCompressedSize() != ArchiveEntry.SIZE_UNKNOWN; putArchiveEntry(ae, is2PhaseSource); copyFromZipInputStream(rawStream); [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] addRawArchiveEntry [RETURN_TYPE] void  ZipArchiveEntry entry InputStream rawStream [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields InputStream rawStream OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode zip64Mode String DEFAULT_ENCODING comment encoding n name StreamCompressor _streamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED count level method long bytesRead bytesWritten cdLength cdOffset dataStart localDataStart offset realCrc byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG copyBuffer SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten is2PhaseSource phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry ae entry ze List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	add	
17	[BUG] [BUGGY] final boolean is2PhaseSource = ae.getCrc() != ZipArchiveEntry.CRC_UNKNOWN && ae.getSize() != ArchiveEntry.SIZE_UNKNOWN  && ae.getCompressedSize() != ArchiveEntry.SIZE_UNKNOWN; [FE] arrays first differed [CONTEXT] public void addRawArchiveEntry(final ZipArchiveEntry entry, final InputStream rawStream) throws IOException { final ZipArchiveEntry ae = new ZipArchiveEntry(entry); if (hasZip64Extra(ae)) {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID); } [BUGGY] final boolean is2PhaseSource = ae.getCrc() != ZipArchiveEntry.CRC_UNKNOWN    && ae.getSize() != ArchiveEntry.SIZE_UNKNOWN        && ae.getCompressedSize() != ArchiveEntry.SIZE_UNKNOWN; [BUGGY] && ae.getSize() != ArchiveEntry.SIZE_UNKNOWN && ae.getCompressedSize() != ArchiveEntry.SIZE_UNKNOWN; putArchiveEntry(ae, is2PhaseSource); copyFromZipInputStream(rawStream); closeCopiedEntry(is2PhaseSource); } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] addRawArchiveEntry [RETURN_TYPE] void  ZipArchiveEntry entry InputStream rawStream [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields InputStream rawStream OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode zip64Mode String DEFAULT_ENCODING comment encoding n name StreamCompressor _streamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED count level method long bytesRead bytesWritten cdLength cdOffset dataStart localDataStart offset realCrc byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG copyBuffer SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten is2PhaseSource phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry ae entry ze List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	
18	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] public void addRawArchiveEntry(final ZipArchiveEntry entry, final InputStream rawStream) throws IOException { final ZipArchiveEntry ae = new ZipArchiveEntry(entry); if (hasZip64Extra(ae)) {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID); } [BUGGY] [BUGGY] final boolean is2PhaseSource = ae.getCrc() != ZipArchiveEntry.CRC_UNKNOWN    && ae.getSize() != ArchiveEntry.SIZE_UNKNOWN        && ae.getCompressedSize() != ArchiveEntry.SIZE_UNKNOWN; && ae.getSize() != ArchiveEntry.SIZE_UNKNOWN && ae.getCompressedSize() != ArchiveEntry.SIZE_UNKNOWN; putArchiveEntry(ae, is2PhaseSource); copyFromZipInputStream(rawStream); closeCopiedEntry(is2PhaseSource); } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] addRawArchiveEntry [RETURN_TYPE] void  ZipArchiveEntry entry InputStream rawStream [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields InputStream rawStream OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode zip64Mode String DEFAULT_ENCODING comment encoding n name StreamCompressor _streamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED count level method long bytesRead bytesWritten cdLength cdOffset dataStart localDataStart offset realCrc byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG copyBuffer SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten is2PhaseSource phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry ae entry ze List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	add	
19	[BUG] [BUGGY] putArchiveEntry(ae, is2PhaseSource); [FE] arrays first differed [CONTEXT] final ZipArchiveEntry ae = new ZipArchiveEntry(entry); if (hasZip64Extra(ae)) {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID); } final boolean is2PhaseSource = ae.getCrc() != ZipArchiveEntry.CRC_UNKNOWN && ae.getSize() != ArchiveEntry.SIZE_UNKNOWN && ae.getCompressedSize() != ArchiveEntry.SIZE_UNKNOWN; [BUGGY] putArchiveEntry(ae, is2PhaseSource); [BUGGY] copyFromZipInputStream(rawStream); closeCopiedEntry(is2PhaseSource); } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] addRawArchiveEntry [RETURN_TYPE] void  ZipArchiveEntry entry InputStream rawStream [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields InputStream rawStream OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode zip64Mode String DEFAULT_ENCODING comment encoding n name StreamCompressor _streamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED count level method long bytesRead bytesWritten cdLength cdOffset dataStart localDataStart offset realCrc byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG copyBuffer SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten is2PhaseSource phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry ae entry ze List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	587	587	1	replace	
20	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] final ZipArchiveEntry ae = new ZipArchiveEntry(entry); if (hasZip64Extra(ae)) {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID); } final boolean is2PhaseSource = ae.getCrc() != ZipArchiveEntry.CRC_UNKNOWN && ae.getSize() != ArchiveEntry.SIZE_UNKNOWN && ae.getCompressedSize() != ArchiveEntry.SIZE_UNKNOWN; [BUGGY] [BUGGY] putArchiveEntry(ae, is2PhaseSource); copyFromZipInputStream(rawStream); closeCopiedEntry(is2PhaseSource); } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] addRawArchiveEntry [RETURN_TYPE] void  ZipArchiveEntry entry InputStream rawStream [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields InputStream rawStream OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode zip64Mode String DEFAULT_ENCODING comment encoding n name StreamCompressor _streamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED count level method long bytesRead bytesWritten cdLength cdOffset dataStart localDataStart offset realCrc byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG copyBuffer SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten is2PhaseSource phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry ae entry ze List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	587	587	1	add	
21	[BUG] [BUGGY] copyFromZipInputStream(rawStream); [FE] arrays first differed [CONTEXT] if (hasZip64Extra(ae)) {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID); } final boolean is2PhaseSource = ae.getCrc() != ZipArchiveEntry.CRC_UNKNOWN && ae.getSize() != ArchiveEntry.SIZE_UNKNOWN && ae.getCompressedSize() != ArchiveEntry.SIZE_UNKNOWN; putArchiveEntry(ae, is2PhaseSource); [BUGGY] copyFromZipInputStream(rawStream); [BUGGY] closeCopiedEntry(is2PhaseSource); } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] addRawArchiveEntry [RETURN_TYPE] void  ZipArchiveEntry entry InputStream rawStream [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields InputStream rawStream OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode zip64Mode String DEFAULT_ENCODING comment encoding n name StreamCompressor _streamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED count level method long bytesRead bytesWritten cdLength cdOffset dataStart localDataStart offset realCrc byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG copyBuffer SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten is2PhaseSource phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry ae entry ze List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	588	588	1	replace	
22	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] if (hasZip64Extra(ae)) {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID); } final boolean is2PhaseSource = ae.getCrc() != ZipArchiveEntry.CRC_UNKNOWN && ae.getSize() != ArchiveEntry.SIZE_UNKNOWN && ae.getCompressedSize() != ArchiveEntry.SIZE_UNKNOWN; putArchiveEntry(ae, is2PhaseSource); [BUGGY] [BUGGY] copyFromZipInputStream(rawStream); closeCopiedEntry(is2PhaseSource); } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] addRawArchiveEntry [RETURN_TYPE] void  ZipArchiveEntry entry InputStream rawStream [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields InputStream rawStream OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode zip64Mode String DEFAULT_ENCODING comment encoding n name StreamCompressor _streamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED count level method long bytesRead bytesWritten cdLength cdOffset dataStart localDataStart offset realCrc byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG copyBuffer SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten is2PhaseSource phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry ae entry ze List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	588	588	1	add	
23	[BUG] [BUGGY] closeCopiedEntry(is2PhaseSource); [FE] arrays first differed [CONTEXT]    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID); } final boolean is2PhaseSource = ae.getCrc() != ZipArchiveEntry.CRC_UNKNOWN && ae.getSize() != ArchiveEntry.SIZE_UNKNOWN && ae.getCompressedSize() != ArchiveEntry.SIZE_UNKNOWN; putArchiveEntry(ae, is2PhaseSource); copyFromZipInputStream(rawStream); [BUGGY] closeCopiedEntry(is2PhaseSource); [BUGGY] } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] addRawArchiveEntry [RETURN_TYPE] void  ZipArchiveEntry entry InputStream rawStream [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields InputStream rawStream OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode zip64Mode String DEFAULT_ENCODING comment encoding n name StreamCompressor _streamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED count level method long bytesRead bytesWritten cdLength cdOffset dataStart localDataStart offset realCrc byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG copyBuffer SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten is2PhaseSource phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry ae entry ze List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	589	589	1	replace	
24	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT]    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID); } final boolean is2PhaseSource = ae.getCrc() != ZipArchiveEntry.CRC_UNKNOWN && ae.getSize() != ArchiveEntry.SIZE_UNKNOWN && ae.getCompressedSize() != ArchiveEntry.SIZE_UNKNOWN; putArchiveEntry(ae, is2PhaseSource); copyFromZipInputStream(rawStream); [BUGGY] [BUGGY] closeCopiedEntry(is2PhaseSource); } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] addRawArchiveEntry [RETURN_TYPE] void  ZipArchiveEntry entry InputStream rawStream [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields InputStream rawStream OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode zip64Mode String DEFAULT_ENCODING comment encoding n name StreamCompressor _streamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED count level method long bytesRead bytesWritten cdLength cdOffset dataStart localDataStart offset realCrc byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG copyBuffer SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten is2PhaseSource phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry ae entry ze List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	589	589	1	add	
25	[BUG] [BUGGY] } [FE] arrays first differed [CONTEXT]   ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID); } final boolean is2PhaseSource = ae.getCrc() != ZipArchiveEntry.CRC_UNKNOWN && ae.getSize() != ArchiveEntry.SIZE_UNKNOWN && ae.getCompressedSize() != ArchiveEntry.SIZE_UNKNOWN; putArchiveEntry(ae, is2PhaseSource); copyFromZipInputStream(rawStream); closeCopiedEntry(is2PhaseSource); [BUGGY] } [BUGGY]  [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] addRawArchiveEntry [RETURN_TYPE] void  ZipArchiveEntry entry InputStream rawStream [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields InputStream rawStream OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode zip64Mode String DEFAULT_ENCODING comment encoding n name StreamCompressor _streamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED count level method long bytesRead bytesWritten cdLength cdOffset dataStart localDataStart offset realCrc byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG copyBuffer SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten is2PhaseSource phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry ae entry ze List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	
26	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT]   ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID); } final boolean is2PhaseSource = ae.getCrc() != ZipArchiveEntry.CRC_UNKNOWN && ae.getSize() != ArchiveEntry.SIZE_UNKNOWN && ae.getCompressedSize() != ArchiveEntry.SIZE_UNKNOWN; putArchiveEntry(ae, is2PhaseSource); copyFromZipInputStream(rawStream); closeCopiedEntry(is2PhaseSource); [BUGGY] [BUGGY] } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] addRawArchiveEntry [RETURN_TYPE] void  ZipArchiveEntry entry InputStream rawStream [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields InputStream rawStream OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode zip64Mode String DEFAULT_ENCODING comment encoding n name StreamCompressor _streamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED count level method long bytesRead bytesWritten cdLength cdOffset dataStart localDataStart offset realCrc byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG copyBuffer SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten is2PhaseSource phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry ae entry ze List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	add	
27	[BUG] [BUGGY] if (entry == null) { [FE] arrays first differed [CONTEXT] private void copyFromZipInputStream(final InputStream src) throws IOException { [BUGGY] if (entry == null) { [BUGGY] throw new IllegalStateException("No current entry"); } ZipUtil.checkRequestedFeatures(entry.entry); entry.hasWritten = true; int length; while ((length = src.read(copyBuffer)) >= 0 ) { streamCompressor.writeCounted(copyBuffer, 0, length); count( length ); } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] copyFromZipInputStream [RETURN_TYPE] void  InputStream src [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields InputStream src OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode requestedMode zip64Mode String DEFAULT_ENCODING comment encoding n name StreamCompressor _streamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED count length level method nameLen offset long bytesRead bytesWritten cdLength cdOffset crc dataStart localDataStart offset realCrc save writtenThisTime byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG b copyBuffer data SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten is2PhaseSource phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry ae entry entry1 zae ze zipArchiveEntry List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	936	936	1	replace	
28	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] private void copyFromZipInputStream(final InputStream src) throws IOException { [BUGGY] [BUGGY] if (entry == null) { throw new IllegalStateException("No current entry"); } ZipUtil.checkRequestedFeatures(entry.entry); entry.hasWritten = true; int length; while ((length = src.read(copyBuffer)) >= 0 ) { streamCompressor.writeCounted(copyBuffer, 0, length); count( length ); } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] copyFromZipInputStream [RETURN_TYPE] void  InputStream src [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields InputStream src OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode requestedMode zip64Mode String DEFAULT_ENCODING comment encoding n name StreamCompressor _streamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED count length level method nameLen offset long bytesRead bytesWritten cdLength cdOffset crc dataStart localDataStart offset realCrc save writtenThisTime byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG b copyBuffer data SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten is2PhaseSource phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry ae entry entry1 zae ze zipArchiveEntry List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	936	936	1	add	
29	[BUG] [BUGGY] ZipUtil.checkRequestedFeatures(entry.entry); [FE] arrays first differed [CONTEXT] private void copyFromZipInputStream(final InputStream src) throws IOException { if (entry == null) { throw new IllegalStateException("No current entry"); } [BUGGY] ZipUtil.checkRequestedFeatures(entry.entry); [BUGGY] entry.hasWritten = true; int length; while ((length = src.read(copyBuffer)) >= 0 ) { streamCompressor.writeCounted(copyBuffer, 0, length); count( length ); } } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] copyFromZipInputStream [RETURN_TYPE] void  InputStream src [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields InputStream src OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode requestedMode zip64Mode String DEFAULT_ENCODING comment encoding n name StreamCompressor _streamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED count length level method nameLen offset long bytesRead bytesWritten cdLength cdOffset crc dataStart localDataStart offset realCrc save writtenThisTime byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG b copyBuffer data SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten is2PhaseSource phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry ae entry entry1 zae ze zipArchiveEntry List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	939	939	1	replace	
30	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] private void copyFromZipInputStream(final InputStream src) throws IOException { if (entry == null) { throw new IllegalStateException("No current entry"); } [BUGGY] [BUGGY] ZipUtil.checkRequestedFeatures(entry.entry); entry.hasWritten = true; int length; while ((length = src.read(copyBuffer)) >= 0 ) { streamCompressor.writeCounted(copyBuffer, 0, length); count( length ); } } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] copyFromZipInputStream [RETURN_TYPE] void  InputStream src [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields InputStream src OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode requestedMode zip64Mode String DEFAULT_ENCODING comment encoding n name StreamCompressor _streamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED count length level method nameLen offset long bytesRead bytesWritten cdLength cdOffset crc dataStart localDataStart offset realCrc save writtenThisTime byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG b copyBuffer data SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten is2PhaseSource phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry ae entry entry1 zae ze zipArchiveEntry List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	939	939	1	add	
31	[BUG] [BUGGY] entry.hasWritten = true; [FE] arrays first differed [CONTEXT] private void copyFromZipInputStream(final InputStream src) throws IOException { if (entry == null) { throw new IllegalStateException("No current entry"); } ZipUtil.checkRequestedFeatures(entry.entry); [BUGGY] entry.hasWritten = true; [BUGGY] int length; while ((length = src.read(copyBuffer)) >= 0 ) { streamCompressor.writeCounted(copyBuffer, 0, length); count( length ); } } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] copyFromZipInputStream [RETURN_TYPE] void  InputStream src [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields InputStream src OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode requestedMode zip64Mode String DEFAULT_ENCODING comment encoding n name StreamCompressor _streamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED count length level method nameLen offset long bytesRead bytesWritten cdLength cdOffset crc dataStart localDataStart offset realCrc save writtenThisTime byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG b copyBuffer data SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten is2PhaseSource phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry ae entry entry1 zae ze zipArchiveEntry List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	940	940	1	replace	
32	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] private void copyFromZipInputStream(final InputStream src) throws IOException { if (entry == null) { throw new IllegalStateException("No current entry"); } ZipUtil.checkRequestedFeatures(entry.entry); [BUGGY] [BUGGY] entry.hasWritten = true; int length; while ((length = src.read(copyBuffer)) >= 0 ) { streamCompressor.writeCounted(copyBuffer, 0, length); count( length ); } } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] copyFromZipInputStream [RETURN_TYPE] void  InputStream src [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields InputStream src OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode requestedMode zip64Mode String DEFAULT_ENCODING comment encoding n name StreamCompressor _streamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED count length level method nameLen offset long bytesRead bytesWritten cdLength cdOffset crc dataStart localDataStart offset realCrc save writtenThisTime byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG b copyBuffer data SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten is2PhaseSource phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry ae entry entry1 zae ze zipArchiveEntry List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	940	940	1	add	
33	[BUG] [BUGGY] while ((length = src.read(copyBuffer)) >= 0 ) { [FE] arrays first differed [CONTEXT] private void copyFromZipInputStream(final InputStream src) throws IOException { if (entry == null) { throw new IllegalStateException("No current entry"); } ZipUtil.checkRequestedFeatures(entry.entry); entry.hasWritten = true; int length; [BUGGY] while ((length = src.read(copyBuffer)) >= 0 )  { [BUGGY] { streamCompressor.writeCounted(copyBuffer, 0, length); count( length ); } } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] copyFromZipInputStream [RETURN_TYPE] void  InputStream src [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields InputStream src OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode requestedMode zip64Mode String DEFAULT_ENCODING comment encoding n name StreamCompressor _streamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED count length level method nameLen offset long bytesRead bytesWritten cdLength cdOffset crc dataStart localDataStart offset realCrc save writtenThisTime byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG b copyBuffer data SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten is2PhaseSource phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry ae entry entry1 zae ze zipArchiveEntry List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	942	943	1	replace	
34	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] private void copyFromZipInputStream(final InputStream src) throws IOException { if (entry == null) { throw new IllegalStateException("No current entry"); } ZipUtil.checkRequestedFeatures(entry.entry); entry.hasWritten = true; int length; [BUGGY] [BUGGY] while ((length = src.read(copyBuffer)) >= 0 )  { { streamCompressor.writeCounted(copyBuffer, 0, length); count( length ); } } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] copyFromZipInputStream [RETURN_TYPE] void  InputStream src [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields InputStream src OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode requestedMode zip64Mode String DEFAULT_ENCODING comment encoding n name StreamCompressor _streamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED count length level method nameLen offset long bytesRead bytesWritten cdLength cdOffset crc dataStart localDataStart offset realCrc save writtenThisTime byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG b copyBuffer data SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten is2PhaseSource phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry ae entry entry1 zae ze zipArchiveEntry List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	942	943	1	add	
35	[BUG] [BUGGY] streamCompressor.writeCounted(copyBuffer, 0, length); [FE] arrays first differed [CONTEXT] private void copyFromZipInputStream(final InputStream src) throws IOException { if (entry == null) { throw new IllegalStateException("No current entry"); } ZipUtil.checkRequestedFeatures(entry.entry); entry.hasWritten = true; int length; while ((length = src.read(copyBuffer)) >= 0 ) { [BUGGY] streamCompressor.writeCounted(copyBuffer, 0, length); [BUGGY] count( length ); } } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] copyFromZipInputStream [RETURN_TYPE] void  InputStream src [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields InputStream src OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode requestedMode zip64Mode String DEFAULT_ENCODING comment encoding n name StreamCompressor _streamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED count length level method nameLen offset long bytesRead bytesWritten cdLength cdOffset crc dataStart localDataStart offset realCrc save writtenThisTime byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG b copyBuffer data SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten is2PhaseSource phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry ae entry entry1 zae ze zipArchiveEntry List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	944	944	1	replace	
36	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] private void copyFromZipInputStream(final InputStream src) throws IOException { if (entry == null) { throw new IllegalStateException("No current entry"); } ZipUtil.checkRequestedFeatures(entry.entry); entry.hasWritten = true; int length; while ((length = src.read(copyBuffer)) >= 0 ) { [BUGGY] [BUGGY] streamCompressor.writeCounted(copyBuffer, 0, length); count( length ); } } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] copyFromZipInputStream [RETURN_TYPE] void  InputStream src [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields InputStream src OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode requestedMode zip64Mode String DEFAULT_ENCODING comment encoding n name StreamCompressor _streamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED count length level method nameLen offset long bytesRead bytesWritten cdLength cdOffset crc dataStart localDataStart offset realCrc save writtenThisTime byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG b copyBuffer data SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten is2PhaseSource phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry ae entry entry1 zae ze zipArchiveEntry List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	944	944	1	add	
37	[BUG] [BUGGY] count( length ); [FE] arrays first differed [CONTEXT] private void copyFromZipInputStream(final InputStream src) throws IOException { if (entry == null) { throw new IllegalStateException("No current entry"); } ZipUtil.checkRequestedFeatures(entry.entry); entry.hasWritten = true; int length; while ((length = src.read(copyBuffer)) >= 0 ) { streamCompressor.writeCounted(copyBuffer, 0, length); [BUGGY] count( length ); [BUGGY] } } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] copyFromZipInputStream [RETURN_TYPE] void  InputStream src [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields InputStream src OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode requestedMode zip64Mode String DEFAULT_ENCODING comment encoding n name StreamCompressor _streamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED count length level method nameLen offset long bytesRead bytesWritten cdLength cdOffset crc dataStart localDataStart offset realCrc save writtenThisTime byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG b copyBuffer data SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten is2PhaseSource phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry ae entry entry1 zae ze zipArchiveEntry List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	945	945	1	replace	
38	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] private void copyFromZipInputStream(final InputStream src) throws IOException { if (entry == null) { throw new IllegalStateException("No current entry"); } ZipUtil.checkRequestedFeatures(entry.entry); entry.hasWritten = true; int length; while ((length = src.read(copyBuffer)) >= 0 ) { streamCompressor.writeCounted(copyBuffer, 0, length); [BUGGY] [BUGGY] count( length ); } } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] copyFromZipInputStream [RETURN_TYPE] void  InputStream src [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields InputStream src OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode requestedMode zip64Mode String DEFAULT_ENCODING comment encoding n name StreamCompressor _streamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED count length level method nameLen offset long bytesRead bytesWritten cdLength cdOffset crc dataStart localDataStart offset realCrc save writtenThisTime byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG b copyBuffer data SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten is2PhaseSource phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry ae entry entry1 zae ze zipArchiveEntry List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	945	945	1	add	
39	[BUG] [BUGGY] } [FE] arrays first differed [CONTEXT] throw new IllegalStateException("No current entry"); } ZipUtil.checkRequestedFeatures(entry.entry); entry.hasWritten = true; int length; while ((length = src.read(copyBuffer)) >= 0 ) { streamCompressor.writeCounted(copyBuffer, 0, length); count( length ); } [BUGGY] } [BUGGY]  [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] copyFromZipInputStream [RETURN_TYPE] void  InputStream src [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields InputStream src OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode requestedMode zip64Mode String DEFAULT_ENCODING comment encoding n name StreamCompressor _streamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED count length level method nameLen offset long bytesRead bytesWritten cdLength cdOffset crc dataStart localDataStart offset realCrc save writtenThisTime byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG b copyBuffer data SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten is2PhaseSource phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry ae entry entry1 zae ze zipArchiveEntry List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	947	947	1	replace	
40	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] throw new IllegalStateException("No current entry"); } ZipUtil.checkRequestedFeatures(entry.entry); entry.hasWritten = true; int length; while ((length = src.read(copyBuffer)) >= 0 ) { streamCompressor.writeCounted(copyBuffer, 0, length); count( length ); } [BUGGY] [BUGGY] } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] copyFromZipInputStream [RETURN_TYPE] void  InputStream src [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields InputStream src OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode requestedMode zip64Mode String DEFAULT_ENCODING comment encoding n name StreamCompressor _streamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED count length level method nameLen offset long bytesRead bytesWritten cdLength cdOffset crc dataStart localDataStart offset realCrc save writtenThisTime byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG b copyBuffer data SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten is2PhaseSource phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry ae entry entry1 zae ze zipArchiveEntry List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	947	947	1	add	
41	[BUG] [BUGGY] putLong(ze.getCrc(), buf, LFH_CRC_OFFSET); [FE] arrays first differed [CONTEXT] final GeneralPurposeBit generalPurposeBit = getGeneralPurposeBits(!encodable && fallbackToUTF8, dataDescriptor); generalPurposeBit.encode(buf, LFH_GPB_OFFSET);  putShort(zipMethod, buf, LFH_METHOD_OFFSET); ZipUtil.toDosTime(calendarInstance, ze.getTime(), buf, LFH_TIME_OFFSET);  if (phased){ [BUGGY] putLong(ze.getCrc(), buf, LFH_CRC_OFFSET); [BUGGY] } else if (zipMethod == DEFLATED || channel != null) { System.arraycopy(LZERO, 0, buf, LFH_CRC_OFFSET, WORD); } else { putLong(ze.getCrc(), buf, LFH_CRC_OFFSET); }   if (hasZip64Extra(entry.entry)){  [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] createLocalFileHeader [RETURN_TYPE] byte[]  ZipArchiveEntry ze ByteBuffer name final boolean encodable final boolean phased long archiveOffset [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode requestedMode zip64Mode ResourceAlignmentExtraField oldAlignmentEx String DEFAULT_ENCODING comment encoding n name GeneralPurposeBit generalPurposeBit StreamCompressor _streamCompressor streamCompressor ByteBuffer name int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED alignment count len length level method nameLen offset oldLength padding zipMethod long archiveOffset bytesRead bytesWritten cdLength cdOffset crc dataStart localDataStart localHeaderStart offset realCrc save writtenThisTime byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG b buf copyBuffer data extra localHeader SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 dataDescriptor encodable fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten is2PhaseSource phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry ae entry entry1 zae ze zipArchiveEntry List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	1089	1089	1	replace	
42	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] final GeneralPurposeBit generalPurposeBit = getGeneralPurposeBits(!encodable && fallbackToUTF8, dataDescriptor); generalPurposeBit.encode(buf, LFH_GPB_OFFSET);  putShort(zipMethod, buf, LFH_METHOD_OFFSET); ZipUtil.toDosTime(calendarInstance, ze.getTime(), buf, LFH_TIME_OFFSET);  if (phased){ [BUGGY] [BUGGY] putLong(ze.getCrc(), buf, LFH_CRC_OFFSET); } else if (zipMethod == DEFLATED || channel != null) { System.arraycopy(LZERO, 0, buf, LFH_CRC_OFFSET, WORD); } else { putLong(ze.getCrc(), buf, LFH_CRC_OFFSET); }   if (hasZip64Extra(entry.entry)){  [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] createLocalFileHeader [RETURN_TYPE] byte[]  ZipArchiveEntry ze ByteBuffer name final boolean encodable final boolean phased long archiveOffset [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode requestedMode zip64Mode ResourceAlignmentExtraField oldAlignmentEx String DEFAULT_ENCODING comment encoding n name GeneralPurposeBit generalPurposeBit StreamCompressor _streamCompressor streamCompressor ByteBuffer name int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED alignment count len length level method nameLen offset oldLength padding zipMethod long archiveOffset bytesRead bytesWritten cdLength cdOffset crc dataStart localDataStart localHeaderStart offset realCrc save writtenThisTime byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG b buf copyBuffer data extra localHeader SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 dataDescriptor encodable fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten is2PhaseSource phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry ae entry entry1 zae ze zipArchiveEntry List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	1089	1089	1	add	
43	[BUG] [BUGGY] putLong(ze.getCompressedSize(), buf, LFH_COMPRESSED_SIZE_OFFSET); [FE] arrays first differed [CONTEXT]   if (hasZip64Extra(entry.entry)){    ZipLong.ZIP64_MAGIC.putLong(buf, LFH_COMPRESSED_SIZE_OFFSET); ZipLong.ZIP64_MAGIC.putLong(buf, LFH_ORIGINAL_SIZE_OFFSET); } else if (phased) { [BUGGY] putLong(ze.getCompressedSize(), buf, LFH_COMPRESSED_SIZE_OFFSET); [BUGGY] putLong(ze.getSize(), buf, LFH_ORIGINAL_SIZE_OFFSET); } else if (zipMethod == DEFLATED || channel != null) { System.arraycopy(LZERO, 0, buf, LFH_COMPRESSED_SIZE_OFFSET, WORD); System.arraycopy(LZERO, 0, buf, LFH_ORIGINAL_SIZE_OFFSET, WORD); } else { // Stored putLong(ze.getSize(), buf, LFH_COMPRESSED_SIZE_OFFSET); putLong(ze.getSize(), buf, LFH_ORIGINAL_SIZE_OFFSET); }  putShort(nameLen, buf, LFH_FILENAME_LENGTH_OFFSET); [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] createLocalFileHeader [RETURN_TYPE] byte[]  ZipArchiveEntry ze ByteBuffer name final boolean encodable final boolean phased long archiveOffset [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode requestedMode zip64Mode ResourceAlignmentExtraField oldAlignmentEx String DEFAULT_ENCODING comment encoding n name GeneralPurposeBit generalPurposeBit StreamCompressor _streamCompressor streamCompressor ByteBuffer name int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED alignment count len length level method nameLen offset oldLength padding zipMethod long archiveOffset bytesRead bytesWritten cdLength cdOffset crc dataStart localDataStart localHeaderStart offset realCrc save writtenThisTime byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG b buf copyBuffer data extra localHeader SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 dataDescriptor encodable fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten is2PhaseSource phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry ae entry entry1 zae ze zipArchiveEntry List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	1105	1105	1	replace	
44	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT]   if (hasZip64Extra(entry.entry)){    ZipLong.ZIP64_MAGIC.putLong(buf, LFH_COMPRESSED_SIZE_OFFSET); ZipLong.ZIP64_MAGIC.putLong(buf, LFH_ORIGINAL_SIZE_OFFSET); } else if (phased) { [BUGGY] [BUGGY] putLong(ze.getCompressedSize(), buf, LFH_COMPRESSED_SIZE_OFFSET); putLong(ze.getSize(), buf, LFH_ORIGINAL_SIZE_OFFSET); } else if (zipMethod == DEFLATED || channel != null) { System.arraycopy(LZERO, 0, buf, LFH_COMPRESSED_SIZE_OFFSET, WORD); System.arraycopy(LZERO, 0, buf, LFH_ORIGINAL_SIZE_OFFSET, WORD); } else { // Stored putLong(ze.getSize(), buf, LFH_COMPRESSED_SIZE_OFFSET); putLong(ze.getSize(), buf, LFH_ORIGINAL_SIZE_OFFSET); }  putShort(nameLen, buf, LFH_FILENAME_LENGTH_OFFSET); [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] createLocalFileHeader [RETURN_TYPE] byte[]  ZipArchiveEntry ze ByteBuffer name final boolean encodable final boolean phased long archiveOffset [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode requestedMode zip64Mode ResourceAlignmentExtraField oldAlignmentEx String DEFAULT_ENCODING comment encoding n name GeneralPurposeBit generalPurposeBit StreamCompressor _streamCompressor streamCompressor ByteBuffer name int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED alignment count len length level method nameLen offset oldLength padding zipMethod long archiveOffset bytesRead bytesWritten cdLength cdOffset crc dataStart localDataStart localHeaderStart offset realCrc save writtenThisTime byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG b buf copyBuffer data extra localHeader SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 dataDescriptor encodable fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten is2PhaseSource phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry ae entry entry1 zae ze zipArchiveEntry List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	1105	1105	1	add	
45	[BUG] [BUGGY] putLong(ze.getSize(), buf, LFH_ORIGINAL_SIZE_OFFSET); [FE] arrays first differed [CONTEXT]   if (hasZip64Extra(entry.entry)){    ZipLong.ZIP64_MAGIC.putLong(buf, LFH_COMPRESSED_SIZE_OFFSET); ZipLong.ZIP64_MAGIC.putLong(buf, LFH_ORIGINAL_SIZE_OFFSET); } else if (phased) { putLong(ze.getCompressedSize(), buf, LFH_COMPRESSED_SIZE_OFFSET); [BUGGY] putLong(ze.getSize(), buf, LFH_ORIGINAL_SIZE_OFFSET); [BUGGY] } else if (zipMethod == DEFLATED || channel != null) { System.arraycopy(LZERO, 0, buf, LFH_COMPRESSED_SIZE_OFFSET, WORD); System.arraycopy(LZERO, 0, buf, LFH_ORIGINAL_SIZE_OFFSET, WORD); } else { // Stored putLong(ze.getSize(), buf, LFH_COMPRESSED_SIZE_OFFSET); putLong(ze.getSize(), buf, LFH_ORIGINAL_SIZE_OFFSET); }  putShort(nameLen, buf, LFH_FILENAME_LENGTH_OFFSET);  [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] createLocalFileHeader [RETURN_TYPE] byte[]  ZipArchiveEntry ze ByteBuffer name final boolean encodable final boolean phased long archiveOffset [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode requestedMode zip64Mode ResourceAlignmentExtraField oldAlignmentEx String DEFAULT_ENCODING comment encoding n name GeneralPurposeBit generalPurposeBit StreamCompressor _streamCompressor streamCompressor ByteBuffer name int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED alignment count len length level method nameLen offset oldLength padding zipMethod long archiveOffset bytesRead bytesWritten cdLength cdOffset crc dataStart localDataStart localHeaderStart offset realCrc save writtenThisTime byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG b buf copyBuffer data extra localHeader SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 dataDescriptor encodable fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten is2PhaseSource phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry ae entry entry1 zae ze zipArchiveEntry List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	1106	1106	1	replace	
46	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT]   if (hasZip64Extra(entry.entry)){    ZipLong.ZIP64_MAGIC.putLong(buf, LFH_COMPRESSED_SIZE_OFFSET); ZipLong.ZIP64_MAGIC.putLong(buf, LFH_ORIGINAL_SIZE_OFFSET); } else if (phased) { putLong(ze.getCompressedSize(), buf, LFH_COMPRESSED_SIZE_OFFSET); [BUGGY] [BUGGY] putLong(ze.getSize(), buf, LFH_ORIGINAL_SIZE_OFFSET); } else if (zipMethod == DEFLATED || channel != null) { System.arraycopy(LZERO, 0, buf, LFH_COMPRESSED_SIZE_OFFSET, WORD); System.arraycopy(LZERO, 0, buf, LFH_ORIGINAL_SIZE_OFFSET, WORD); } else { // Stored putLong(ze.getSize(), buf, LFH_COMPRESSED_SIZE_OFFSET); putLong(ze.getSize(), buf, LFH_ORIGINAL_SIZE_OFFSET); }  putShort(nameLen, buf, LFH_FILENAME_LENGTH_OFFSET);  [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] createLocalFileHeader [RETURN_TYPE] byte[]  ZipArchiveEntry ze ByteBuffer name final boolean encodable final boolean phased long archiveOffset [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode requestedMode zip64Mode ResourceAlignmentExtraField oldAlignmentEx String DEFAULT_ENCODING comment encoding n name GeneralPurposeBit generalPurposeBit StreamCompressor _streamCompressor streamCompressor ByteBuffer name int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED alignment count len length level method nameLen offset oldLength padding zipMethod long archiveOffset bytesRead bytesWritten cdLength cdOffset crc dataStart localDataStart localHeaderStart offset realCrc save writtenThisTime byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG b buf copyBuffer data extra localHeader SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 dataDescriptor encodable fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten is2PhaseSource phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry ae entry entry1 zae ze zipArchiveEntry List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	1106	1106	1	add	
47	[BUG] [BUGGY] public ZipArchiveOutputStream(final OutputStream out) { [FE] arrays first differed [CONTEXT] [BUGGY] public ZipArchiveOutputStream(final OutputStream out) { [BUGGY] this.out = out; this.channel = null; def = new Deflater(level, true); streamCompressor = StreamCompressor.create(out, def); } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] <init> [RETURN_TYPE] OutputStream)  OutputStream out [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE createUnicodeExtraFields OutputStream out Calendar calendarInstance Zip64Mode zip64Mode String DEFAULT_ENCODING comment encoding name StreamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET STORED level method long bytesRead cdLength cdOffset dataStart localDataStart offset byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG copyBuffer SeekableByteChannel channel CurrentEntry entry boolean causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry entry List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	273	273	1	replace	
48	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] [BUGGY] [BUGGY] public ZipArchiveOutputStream(final OutputStream out) { this.out = out; this.channel = null; def = new Deflater(level, true); streamCompressor = StreamCompressor.create(out, def); } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] <init> [RETURN_TYPE] OutputStream)  OutputStream out [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE createUnicodeExtraFields OutputStream out Calendar calendarInstance Zip64Mode zip64Mode String DEFAULT_ENCODING comment encoding name StreamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET STORED level method long bytesRead cdLength cdOffset dataStart localDataStart offset byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG copyBuffer SeekableByteChannel channel CurrentEntry entry boolean causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry entry List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	273	273	1	add	
49	[BUG] [BUGGY] protected boolean finished = false; [FE] arrays first differed [CONTEXT] [BUGGY] protected boolean finished = false; [BUGGY]  [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData  [VARIABLES] 	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	116	116	1	replace	
50	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] [BUGGY] [BUGGY] protected boolean finished = false; [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData  [VARIABLES] 	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	116	116	1	add	
51	[BUG] [BUGGY] private String comment = ""; [FE] arrays first differed [CONTEXT] [BUGGY] private String comment = ""; [BUGGY]  [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData  [VARIABLES] 	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	156	156	1	replace	
52	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] [BUGGY] [BUGGY] private String comment = ""; [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData  [VARIABLES] 	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	156	156	1	add	
53	[BUG] [BUGGY] private int level = DEFAULT_COMPRESSION; [FE] arrays first differed [CONTEXT] [BUGGY] private int level = DEFAULT_COMPRESSION; [BUGGY]  [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData  [VARIABLES] 	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	161	161	1	replace	
54	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] [BUGGY] [BUGGY] private int level = DEFAULT_COMPRESSION; [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData  [VARIABLES] 	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	161	161	1	add	
55	[BUG] [BUGGY] private boolean hasCompressionLevelChanged = false; [FE] arrays first differed [CONTEXT] [BUGGY] private boolean hasCompressionLevelChanged = false; [BUGGY]  [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData  [VARIABLES] 	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	167	167	1	replace	
56	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] [BUGGY] [BUGGY] private boolean hasCompressionLevelChanged = false; [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData  [VARIABLES] 	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	167	167	1	add	
57	[BUG] [BUGGY] private int method = java.util.zip.ZipEntry.DEFLATED; [FE] arrays first differed [CONTEXT] [BUGGY] private int method = java.util.zip.ZipEntry.DEFLATED; [BUGGY]  [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData  [VARIABLES] 	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	172	172	1	replace	
58	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] [BUGGY] [BUGGY] private int method = java.util.zip.ZipEntry.DEFLATED; [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData  [VARIABLES] 	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	172	172	1	add	
59	[BUG] [BUGGY] private final List<ZipArchiveEntry> entries = new LinkedList<>(); [FE] arrays first differed [CONTEXT] [BUGGY] private final List<ZipArchiveEntry> entries =  new LinkedList<>(); [BUGGY] new LinkedList<>(); [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData  [VARIABLES] 	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	177	178	1	replace	
60	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] [BUGGY] [BUGGY] private final List<ZipArchiveEntry> entries =  new LinkedList<>(); new LinkedList<>(); [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData  [VARIABLES] 	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	177	178	1	add	
61	[BUG] [BUGGY] private long cdOffset = 0; [FE] arrays first differed [CONTEXT] [BUGGY] private long cdOffset = 0; [BUGGY]  [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData  [VARIABLES] 	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	185	185	1	replace	
62	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] [BUGGY] [BUGGY] private long cdOffset = 0; [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData  [VARIABLES] 	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	185	185	1	add	
63	[BUG] [BUGGY] private long cdLength = 0; [FE] arrays first differed [CONTEXT] [BUGGY] private long cdLength = 0; [BUGGY]  [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData  [VARIABLES] 	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	190	190	1	replace	
64	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] [BUGGY] [BUGGY] private long cdLength = 0; [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData  [VARIABLES] 	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	190	190	1	add	
65	[BUG] [BUGGY] private final Map<ZipArchiveEntry, EntryMetaData> metaData = new HashMap<>(); [FE] arrays first differed [CONTEXT] [BUGGY] private final Map<ZipArchiveEntry, EntryMetaData> metaData =  new HashMap<>(); [BUGGY] new HashMap<>(); [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData  [VARIABLES] 	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	207	208	1	replace	
66	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] [BUGGY] [BUGGY] private final Map<ZipArchiveEntry, EntryMetaData> metaData =  new HashMap<>(); new HashMap<>(); [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData  [VARIABLES] 	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	207	208	1	add	
67	[BUG] [BUGGY] private String encoding = DEFAULT_ENCODING; [FE] arrays first differed [CONTEXT] [BUGGY] private String encoding = DEFAULT_ENCODING; [BUGGY]  [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData  [VARIABLES] 	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	217	217	1	replace	
68	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] [BUGGY] [BUGGY] private String encoding = DEFAULT_ENCODING; [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData  [VARIABLES] 	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	217	217	1	add	
69	[BUG] [BUGGY] private ZipEncoding zipEncoding = ZipEncodingHelper.getZipEncoding(DEFAULT_ENCODING); [FE] arrays first differed [CONTEXT] [BUGGY] private ZipEncoding zipEncoding =  ZipEncodingHelper.getZipEncoding(DEFAULT_ENCODING); [BUGGY] ZipEncodingHelper.getZipEncoding(DEFAULT_ENCODING); [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData  [VARIABLES] 	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	225	226	1	replace	
70	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] [BUGGY] [BUGGY] private ZipEncoding zipEncoding =  ZipEncodingHelper.getZipEncoding(DEFAULT_ENCODING); ZipEncodingHelper.getZipEncoding(DEFAULT_ENCODING); [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData  [VARIABLES] 	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	225	226	1	add	
71	[BUG] [BUGGY] private boolean useUTF8Flag = true; [FE] arrays first differed [CONTEXT] [BUGGY] private boolean useUTF8Flag = true; [BUGGY]  [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData  [VARIABLES] 	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	245	245	1	replace	
72	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] [BUGGY] [BUGGY] private boolean useUTF8Flag = true; [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData  [VARIABLES] 	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	245	245	1	add	
73	[BUG] [BUGGY] private boolean fallbackToUTF8 = false; [FE] arrays first differed [CONTEXT] [BUGGY] private boolean fallbackToUTF8 = false; [BUGGY]  [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData  [VARIABLES] 	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	250	250	1	replace	
74	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] [BUGGY] [BUGGY] private boolean fallbackToUTF8 = false; [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData  [VARIABLES] 	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	250	250	1	add	
75	[BUG] [BUGGY] private UnicodeExtraFieldPolicy createUnicodeExtraFields = UnicodeExtraFieldPolicy.NEVER; [FE] arrays first differed [CONTEXT] [BUGGY] private UnicodeExtraFieldPolicy createUnicodeExtraFields = UnicodeExtraFieldPolicy.NEVER; [BUGGY]  [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData  [VARIABLES] 	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	255	255	1	replace	
76	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] [BUGGY] [BUGGY] private UnicodeExtraFieldPolicy createUnicodeExtraFields = UnicodeExtraFieldPolicy.NEVER; [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData  [VARIABLES] 	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	255	255	1	add	
77	[BUG] [BUGGY] private boolean hasUsedZip64 = false; [FE] arrays first differed [CONTEXT] [BUGGY] private boolean hasUsedZip64 = false; [BUGGY]  [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData  [VARIABLES] 	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	262	262	1	replace	
78	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] [BUGGY] [BUGGY] private boolean hasUsedZip64 = false; [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData  [VARIABLES] 	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	262	262	1	add	
79	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] private boolean hasUsedZip64 = false; [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData  [VARIABLES] 	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	264	264	1	replace	
80	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] private boolean hasUsedZip64 = false; [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData  [VARIABLES] 	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	264	264	1	add	
81	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] private Zip64Mode zip64Mode = Zip64Mode.AsNeeded; [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData  [VARIABLES] 	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	266	266	1	replace	
82	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] private Zip64Mode zip64Mode = Zip64Mode.AsNeeded; [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData  [VARIABLES] 	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	266	266	1	add	
83	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] private final byte[] copyBuffer = new byte[32768]; [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData  [VARIABLES] 	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	267	267	1	replace	
84	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] private final byte[] copyBuffer = new byte[32768]; [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData  [VARIABLES] 	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	267	267	1	add	
85	[BUG] [BUGGY] this.out = out; [FE] arrays first differed [CONTEXT] public ZipArchiveOutputStream(final OutputStream out) { [BUGGY] this.out = out; [BUGGY] this.channel = null; def = new Deflater(level, true); streamCompressor = StreamCompressor.create(out, def); } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] <init> [RETURN_TYPE] OutputStream)  OutputStream out [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE createUnicodeExtraFields OutputStream out Calendar calendarInstance Zip64Mode zip64Mode String DEFAULT_ENCODING comment encoding name StreamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET STORED level method long bytesRead cdLength cdOffset dataStart localDataStart offset byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG copyBuffer SeekableByteChannel channel CurrentEntry entry boolean causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry entry List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	274	274	1	replace	
86	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] public ZipArchiveOutputStream(final OutputStream out) { [BUGGY] [BUGGY] this.out = out; this.channel = null; def = new Deflater(level, true); streamCompressor = StreamCompressor.create(out, def); } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] <init> [RETURN_TYPE] OutputStream)  OutputStream out [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE createUnicodeExtraFields OutputStream out Calendar calendarInstance Zip64Mode zip64Mode String DEFAULT_ENCODING comment encoding name StreamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET STORED level method long bytesRead cdLength cdOffset dataStart localDataStart offset byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG copyBuffer SeekableByteChannel channel CurrentEntry entry boolean causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry entry List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	274	274	1	add	
87	[BUG] [BUGGY] this.channel = null; [FE] arrays first differed [CONTEXT] public ZipArchiveOutputStream(final OutputStream out) { this.out = out; [BUGGY] this.channel = null; [BUGGY] def = new Deflater(level, true); streamCompressor = StreamCompressor.create(out, def); } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] <init> [RETURN_TYPE] OutputStream)  OutputStream out [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE createUnicodeExtraFields OutputStream out Calendar calendarInstance Zip64Mode zip64Mode String DEFAULT_ENCODING comment encoding name StreamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET STORED level method long bytesRead cdLength cdOffset dataStart localDataStart offset byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG copyBuffer SeekableByteChannel channel CurrentEntry entry boolean causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry entry List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	275	275	1	replace	
88	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] public ZipArchiveOutputStream(final OutputStream out) { this.out = out; [BUGGY] [BUGGY] this.channel = null; def = new Deflater(level, true); streamCompressor = StreamCompressor.create(out, def); } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] <init> [RETURN_TYPE] OutputStream)  OutputStream out [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE createUnicodeExtraFields OutputStream out Calendar calendarInstance Zip64Mode zip64Mode String DEFAULT_ENCODING comment encoding name StreamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET STORED level method long bytesRead cdLength cdOffset dataStart localDataStart offset byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG copyBuffer SeekableByteChannel channel CurrentEntry entry boolean causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry entry List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	275	275	1	add	
89	[BUG] [BUGGY] def = new Deflater(level, true); [FE] arrays first differed [CONTEXT] public ZipArchiveOutputStream(final OutputStream out) { this.out = out; this.channel = null; [BUGGY] def = new Deflater(level, true); [BUGGY] streamCompressor = StreamCompressor.create(out, def); } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] <init> [RETURN_TYPE] OutputStream)  OutputStream out [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE createUnicodeExtraFields OutputStream out Calendar calendarInstance Zip64Mode zip64Mode String DEFAULT_ENCODING comment encoding name StreamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET STORED level method long bytesRead cdLength cdOffset dataStart localDataStart offset byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG copyBuffer SeekableByteChannel channel CurrentEntry entry boolean causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry entry List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	276	276	1	replace	
90	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] public ZipArchiveOutputStream(final OutputStream out) { this.out = out; this.channel = null; [BUGGY] [BUGGY] def = new Deflater(level, true); streamCompressor = StreamCompressor.create(out, def); } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] <init> [RETURN_TYPE] OutputStream)  OutputStream out [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE createUnicodeExtraFields OutputStream out Calendar calendarInstance Zip64Mode zip64Mode String DEFAULT_ENCODING comment encoding name StreamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET STORED level method long bytesRead cdLength cdOffset dataStart localDataStart offset byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG copyBuffer SeekableByteChannel channel CurrentEntry entry boolean causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry entry List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	276	276	1	add	
91	[BUG] [BUGGY] streamCompressor = StreamCompressor.create(out, def); [FE] arrays first differed [CONTEXT] public ZipArchiveOutputStream(final OutputStream out) { this.out = out; this.channel = null; def = new Deflater(level, true); [BUGGY] streamCompressor = StreamCompressor.create(out, def); [BUGGY] } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] <init> [RETURN_TYPE] OutputStream)  OutputStream out [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE createUnicodeExtraFields OutputStream out Calendar calendarInstance Zip64Mode zip64Mode String DEFAULT_ENCODING comment encoding name StreamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET STORED level method long bytesRead cdLength cdOffset dataStart localDataStart offset byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG copyBuffer SeekableByteChannel channel CurrentEntry entry boolean causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry entry List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	277	277	1	replace	
92	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] public ZipArchiveOutputStream(final OutputStream out) { this.out = out; this.channel = null; def = new Deflater(level, true); [BUGGY] [BUGGY] streamCompressor = StreamCompressor.create(out, def); } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] <init> [RETURN_TYPE] OutputStream)  OutputStream out [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE createUnicodeExtraFields OutputStream out Calendar calendarInstance Zip64Mode zip64Mode String DEFAULT_ENCODING comment encoding name StreamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET STORED level method long bytesRead cdLength cdOffset dataStart localDataStart offset byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG copyBuffer SeekableByteChannel channel CurrentEntry entry boolean causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry entry List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	277	277	1	add	
93	[BUG] [BUGGY] } [FE] arrays first differed [CONTEXT] public ZipArchiveOutputStream(final OutputStream out) { this.out = out; this.channel = null; def = new Deflater(level, true); streamCompressor = StreamCompressor.create(out, def); [BUGGY] } [BUGGY]  [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] <init> [RETURN_TYPE] OutputStream)  OutputStream out [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE createUnicodeExtraFields OutputStream out Calendar calendarInstance Zip64Mode zip64Mode String DEFAULT_ENCODING comment encoding name StreamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET STORED level method long bytesRead cdLength cdOffset dataStart localDataStart offset byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG copyBuffer SeekableByteChannel channel CurrentEntry entry boolean causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry entry List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	278	278	1	replace	
94	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] public ZipArchiveOutputStream(final OutputStream out) { this.out = out; this.channel = null; def = new Deflater(level, true); streamCompressor = StreamCompressor.create(out, def); [BUGGY] [BUGGY] } [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] <init> [RETURN_TYPE] OutputStream)  OutputStream out [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE createUnicodeExtraFields OutputStream out Calendar calendarInstance Zip64Mode zip64Mode String DEFAULT_ENCODING comment encoding name StreamCompressor streamCompressor int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET STORED level method long bytesRead cdLength cdOffset dataStart localDataStart offset byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG copyBuffer SeekableByteChannel channel CurrentEntry entry boolean causedUseOfZip64 fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry entry List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	278	278	1	add	
95	[BUG] [BUGGY] } else if (phased) { [FE] arrays first differed [CONTEXT] }   if (hasZip64Extra(entry.entry)){    ZipLong.ZIP64_MAGIC.putLong(buf, LFH_COMPRESSED_SIZE_OFFSET); ZipLong.ZIP64_MAGIC.putLong(buf, LFH_ORIGINAL_SIZE_OFFSET); [BUGGY] } else if (phased) { [BUGGY] putLong(ze.getCompressedSize(), buf, LFH_COMPRESSED_SIZE_OFFSET); putLong(ze.getSize(), buf, LFH_ORIGINAL_SIZE_OFFSET); } else if (zipMethod == DEFLATED || channel != null) { System.arraycopy(LZERO, 0, buf, LFH_COMPRESSED_SIZE_OFFSET, WORD); System.arraycopy(LZERO, 0, buf, LFH_ORIGINAL_SIZE_OFFSET, WORD); } else { // Stored putLong(ze.getSize(), buf, LFH_COMPRESSED_SIZE_OFFSET); putLong(ze.getSize(), buf, LFH_ORIGINAL_SIZE_OFFSET); }  [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] createLocalFileHeader [RETURN_TYPE] byte[]  ZipArchiveEntry ze ByteBuffer name final boolean encodable final boolean phased long archiveOffset [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode requestedMode zip64Mode ResourceAlignmentExtraField oldAlignmentEx String DEFAULT_ENCODING comment encoding n name GeneralPurposeBit generalPurposeBit StreamCompressor _streamCompressor streamCompressor ByteBuffer name int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED alignment count len length level method nameLen offset oldLength padding zipMethod long archiveOffset bytesRead bytesWritten cdLength cdOffset crc dataStart localDataStart localHeaderStart offset realCrc save writtenThisTime byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG b buf copyBuffer data extra localHeader SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 dataDescriptor encodable fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten is2PhaseSource phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry ae entry entry1 zae ze zipArchiveEntry List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	1104	1104	1	replace	
96	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] }   if (hasZip64Extra(entry.entry)){    ZipLong.ZIP64_MAGIC.putLong(buf, LFH_COMPRESSED_SIZE_OFFSET); ZipLong.ZIP64_MAGIC.putLong(buf, LFH_ORIGINAL_SIZE_OFFSET); [BUGGY] [BUGGY] } else if (phased) { putLong(ze.getCompressedSize(), buf, LFH_COMPRESSED_SIZE_OFFSET); putLong(ze.getSize(), buf, LFH_ORIGINAL_SIZE_OFFSET); } else if (zipMethod == DEFLATED || channel != null) { System.arraycopy(LZERO, 0, buf, LFH_COMPRESSED_SIZE_OFFSET, WORD); System.arraycopy(LZERO, 0, buf, LFH_ORIGINAL_SIZE_OFFSET, WORD); } else { // Stored putLong(ze.getSize(), buf, LFH_COMPRESSED_SIZE_OFFSET); putLong(ze.getSize(), buf, LFH_ORIGINAL_SIZE_OFFSET); }  [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] createLocalFileHeader [RETURN_TYPE] byte[]  ZipArchiveEntry ze ByteBuffer name final boolean encodable final boolean phased long archiveOffset [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode requestedMode zip64Mode ResourceAlignmentExtraField oldAlignmentEx String DEFAULT_ENCODING comment encoding n name GeneralPurposeBit generalPurposeBit StreamCompressor _streamCompressor streamCompressor ByteBuffer name int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED alignment count len length level method nameLen offset oldLength padding zipMethod long archiveOffset bytesRead bytesWritten cdLength cdOffset crc dataStart localDataStart localHeaderStart offset realCrc save writtenThisTime byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG b buf copyBuffer data extra localHeader SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 dataDescriptor encodable fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten is2PhaseSource phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry ae entry entry1 zae ze zipArchiveEntry List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	1104	1104	1	add	
97	[BUG] [BUGGY] } else if (zipMethod == DEFLATED || channel != null) { [FE] arrays first differed [CONTEXT]  if (hasZip64Extra(entry.entry)){    ZipLong.ZIP64_MAGIC.putLong(buf, LFH_COMPRESSED_SIZE_OFFSET); ZipLong.ZIP64_MAGIC.putLong(buf, LFH_ORIGINAL_SIZE_OFFSET); } else if (phased) { putLong(ze.getCompressedSize(), buf, LFH_COMPRESSED_SIZE_OFFSET); putLong(ze.getSize(), buf, LFH_ORIGINAL_SIZE_OFFSET); [BUGGY] } else if (zipMethod == DEFLATED || channel != null) { [BUGGY] System.arraycopy(LZERO, 0, buf, LFH_COMPRESSED_SIZE_OFFSET, WORD); System.arraycopy(LZERO, 0, buf, LFH_ORIGINAL_SIZE_OFFSET, WORD); } else { // Stored putLong(ze.getSize(), buf, LFH_COMPRESSED_SIZE_OFFSET); putLong(ze.getSize(), buf, LFH_ORIGINAL_SIZE_OFFSET); }  putShort(nameLen, buf, LFH_FILENAME_LENGTH_OFFSET);   [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] createLocalFileHeader [RETURN_TYPE] byte[]  ZipArchiveEntry ze ByteBuffer name final boolean encodable final boolean phased long archiveOffset [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode requestedMode zip64Mode ResourceAlignmentExtraField oldAlignmentEx String DEFAULT_ENCODING comment encoding n name GeneralPurposeBit generalPurposeBit StreamCompressor _streamCompressor streamCompressor ByteBuffer name int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED alignment count len length level method nameLen offset oldLength padding zipMethod long archiveOffset bytesRead bytesWritten cdLength cdOffset crc dataStart localDataStart localHeaderStart offset realCrc save writtenThisTime byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG b buf copyBuffer data extra localHeader SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 dataDescriptor encodable fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten is2PhaseSource phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry ae entry entry1 zae ze zipArchiveEntry List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	1107	1107	1	replace	
98	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT]  if (hasZip64Extra(entry.entry)){    ZipLong.ZIP64_MAGIC.putLong(buf, LFH_COMPRESSED_SIZE_OFFSET); ZipLong.ZIP64_MAGIC.putLong(buf, LFH_ORIGINAL_SIZE_OFFSET); } else if (phased) { putLong(ze.getCompressedSize(), buf, LFH_COMPRESSED_SIZE_OFFSET); putLong(ze.getSize(), buf, LFH_ORIGINAL_SIZE_OFFSET); [BUGGY] [BUGGY] } else if (zipMethod == DEFLATED || channel != null) { System.arraycopy(LZERO, 0, buf, LFH_COMPRESSED_SIZE_OFFSET, WORD); System.arraycopy(LZERO, 0, buf, LFH_ORIGINAL_SIZE_OFFSET, WORD); } else { // Stored putLong(ze.getSize(), buf, LFH_COMPRESSED_SIZE_OFFSET); putLong(ze.getSize(), buf, LFH_ORIGINAL_SIZE_OFFSET); }  putShort(nameLen, buf, LFH_FILENAME_LENGTH_OFFSET);   [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] createLocalFileHeader [RETURN_TYPE] byte[]  ZipArchiveEntry ze ByteBuffer name final boolean encodable final boolean phased long archiveOffset [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode requestedMode zip64Mode ResourceAlignmentExtraField oldAlignmentEx String DEFAULT_ENCODING comment encoding n name GeneralPurposeBit generalPurposeBit StreamCompressor _streamCompressor streamCompressor ByteBuffer name int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED alignment count len length level method nameLen offset oldLength padding zipMethod long archiveOffset bytesRead bytesWritten cdLength cdOffset crc dataStart localDataStart localHeaderStart offset realCrc save writtenThisTime byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG b buf copyBuffer data extra localHeader SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 dataDescriptor encodable fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten is2PhaseSource phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry ae entry entry1 zae ze zipArchiveEntry List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	1107	1107	1	add	
99	[BUG] [BUGGY] System.arraycopy(LZERO, 0, buf, LFH_COMPRESSED_SIZE_OFFSET, WORD); [FE] arrays first differed [CONTEXT] if (hasZip64Extra(entry.entry)){    ZipLong.ZIP64_MAGIC.putLong(buf, LFH_COMPRESSED_SIZE_OFFSET); ZipLong.ZIP64_MAGIC.putLong(buf, LFH_ORIGINAL_SIZE_OFFSET); } else if (phased) { putLong(ze.getCompressedSize(), buf, LFH_COMPRESSED_SIZE_OFFSET); putLong(ze.getSize(), buf, LFH_ORIGINAL_SIZE_OFFSET); } else if (zipMethod == DEFLATED || channel != null) { [BUGGY] System.arraycopy(LZERO, 0, buf, LFH_COMPRESSED_SIZE_OFFSET, WORD); [BUGGY] System.arraycopy(LZERO, 0, buf, LFH_ORIGINAL_SIZE_OFFSET, WORD); } else { // Stored putLong(ze.getSize(), buf, LFH_COMPRESSED_SIZE_OFFSET); putLong(ze.getSize(), buf, LFH_ORIGINAL_SIZE_OFFSET); }  putShort(nameLen, buf, LFH_FILENAME_LENGTH_OFFSET);  putShort(extra.length, buf, LFH_EXTRA_LENGTH_OFFSET); [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] createLocalFileHeader [RETURN_TYPE] byte[]  ZipArchiveEntry ze ByteBuffer name final boolean encodable final boolean phased long archiveOffset [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode requestedMode zip64Mode ResourceAlignmentExtraField oldAlignmentEx String DEFAULT_ENCODING comment encoding n name GeneralPurposeBit generalPurposeBit StreamCompressor _streamCompressor streamCompressor ByteBuffer name int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED alignment count len length level method nameLen offset oldLength padding zipMethod long archiveOffset bytesRead bytesWritten cdLength cdOffset crc dataStart localDataStart localHeaderStart offset realCrc save writtenThisTime byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG b buf copyBuffer data extra localHeader SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 dataDescriptor encodable fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten is2PhaseSource phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry ae entry entry1 zae ze zipArchiveEntry List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	1108	1108	1	replace	
100	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] if (hasZip64Extra(entry.entry)){    ZipLong.ZIP64_MAGIC.putLong(buf, LFH_COMPRESSED_SIZE_OFFSET); ZipLong.ZIP64_MAGIC.putLong(buf, LFH_ORIGINAL_SIZE_OFFSET); } else if (phased) { putLong(ze.getCompressedSize(), buf, LFH_COMPRESSED_SIZE_OFFSET); putLong(ze.getSize(), buf, LFH_ORIGINAL_SIZE_OFFSET); } else if (zipMethod == DEFLATED || channel != null) { [BUGGY] [BUGGY] System.arraycopy(LZERO, 0, buf, LFH_COMPRESSED_SIZE_OFFSET, WORD); System.arraycopy(LZERO, 0, buf, LFH_ORIGINAL_SIZE_OFFSET, WORD); } else { // Stored putLong(ze.getSize(), buf, LFH_COMPRESSED_SIZE_OFFSET); putLong(ze.getSize(), buf, LFH_ORIGINAL_SIZE_OFFSET); }  putShort(nameLen, buf, LFH_FILENAME_LENGTH_OFFSET);  putShort(extra.length, buf, LFH_EXTRA_LENGTH_OFFSET); [CLASS] ZipArchiveOutputStream UnicodeExtraFieldPolicy CurrentEntry EntryMetaData [METHOD] createLocalFileHeader [RETURN_TYPE] byte[]  ZipArchiveEntry ze ByteBuffer name final boolean encodable final boolean phased long archiveOffset [VARIABLES] ZipEncoding zipEncoding UnicodeExtraFieldPolicy ALWAYS NEVER NOT_ENCODEABLE b createUnicodeExtraFields OutputStream o out Calendar calendarInstance Zip64Mode effectiveMode mode requestedMode zip64Mode ResourceAlignmentExtraField oldAlignmentEx String DEFAULT_ENCODING comment encoding n name GeneralPurposeBit generalPurposeBit StreamCompressor _streamCompressor streamCompressor ByteBuffer name int BUFFER_SIZE CFH_COMMENT_LENGTH_OFFSET CFH_COMPRESSED_SIZE_OFFSET CFH_CRC_OFFSET CFH_DISK_NUMBER_OFFSET CFH_EXTERNAL_ATTRIBUTES_OFFSET CFH_EXTRA_LENGTH_OFFSET CFH_FILENAME_LENGTH_OFFSET CFH_FILENAME_OFFSET CFH_GPB_OFFSET CFH_INTERNAL_ATTRIBUTES_OFFSET CFH_LFH_OFFSET CFH_METHOD_OFFSET CFH_ORIGINAL_SIZE_OFFSET CFH_SIG_OFFSET CFH_TIME_OFFSET CFH_VERSION_MADE_BY_OFFSET CFH_VERSION_NEEDED_OFFSET DEFAULT_COMPRESSION DEFLATED EFS_FLAG LFH_COMPRESSED_SIZE_OFFSET LFH_CRC_OFFSET LFH_EXTRA_LENGTH_OFFSET LFH_FILENAME_LENGTH_OFFSET LFH_FILENAME_OFFSET LFH_GPB_OFFSET LFH_METHOD_OFFSET LFH_ORIGINAL_SIZE_OFFSET LFH_SIG_OFFSET LFH_TIME_OFFSET LFH_VERSION_NEEDED_OFFSET NUM_PER_WRITE STORED alignment count len length level method nameLen offset oldLength padding zipMethod long archiveOffset bytesRead bytesWritten cdLength cdOffset crc dataStart localDataStart localHeaderStart offset realCrc save writtenThisTime byte[] CFH_SIG DD_SIG EMPTY EOCD_SIG LFH_SIG LZERO ONE ZERO ZIP64_EOCD_LOC_SIG ZIP64_EOCD_SIG b buf copyBuffer data extra localHeader SeekableByteChannel _channel channel CurrentEntry entry boolean actuallyNeedsZip64 b causedUseOfZip64 dataDescriptor encodable fallbackToUTF8 finished hasCompressionLevelChanged hasUsedZip64 hasWritten is2PhaseSource phased useUTF8Flag usesDataDescriptor Deflater def ZipArchiveEntry ae entry entry1 zae ze zipArchiveEntry List entries Map metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.7071067811865475	1108	1108	1	add	
