bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
2	[BUG]  [BUGGY]  if(ae!=  null  ||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  ||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  ||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
3	[BUG]  [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
4	[BUG]  [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
5	[BUG]  [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
6	[BUG]  [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae,  rawStream))  {	  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
7	[BUG]  [BUGGY]  if(ae!=  null  &&!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae))  {	  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
8	[BUG]  [BUGGY]  if(is2PhaseSource  ||  hasZip64ExtendedInformationExtraFields(ae))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  ||  hasZip64ExtendedInformationExtraFields(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  ||  hasZip64ExtendedInformationExtraFields(ae))  {	  if(is2PhaseSource    &&    hasZip64ExtendedInformationExtraFields(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
9	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraFields(entry))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraFields(entry))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraFields(entry))  {	  if(is2PhaseSource    &&    hasZip64ExtendedInformationExtraFields(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
10	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraFields(ae,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraFields(ae,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraFields(ae,  rawStream))  {	  if(is2PhaseSource    &&    hasZip64ExtendedInformationExtraFields(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
11	[BUG]  [BUGGY]  if(!is2PhaseSource  &&  hasZip64ExtendedInformationExtraFields(ae))  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!is2PhaseSource  &&  hasZip64ExtendedInformationExtraFields(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!is2PhaseSource  &&  hasZip64ExtendedInformationExtraFields(ae))  {	  if(is2PhaseSource    &&    hasZip64ExtendedInformationExtraFields(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
12	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraFields(entry.getKey()))  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraFields(entry.getKey()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraFields(entry.getKey()))  {	  if(is2PhaseSource    &&    hasZip64ExtendedInformationExtraFields(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
13	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraFields(ae.getCrc()))  {  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraFields(ae.getCrc()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraFields(ae.getCrc()))  {	  if(is2PhaseSource    &&    hasZip64ExtendedInformationExtraFields(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
14	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraFields(ae.getChronology()))  {  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraFields(ae.getChronology()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraFields(ae.getChronology()))  {	  if(is2PhaseSource    &&    hasZip64ExtendedInformationExtraFields(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
15	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae!=  null)  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae!=  null)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae!=  null)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    ae!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
16	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae  ==  null)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae  ==  null)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    ae!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
17	[BUG]  [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae!=  null)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae!=  null)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    ae!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
18	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    ae!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
19	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae!=  null)  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae!=  null)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae!=  null)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    ae!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
20	[BUG]  [BUGGY]  ae.setCompressedSize(Zip64ExtendedInformationExtraField.HEADER_ID  +  1);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.setCompressedSize(Zip64ExtendedInformationExtraField.HEADER_ID  +  1);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.setCompressedSize(Zip64ExtendedInformationExtraField.HEADER_ID  +  1);	  ae.setCompressedSize(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
21	[BUG]  [BUGGY]  ae.setCompressedSize(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.setCompressedSize(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.setCompressedSize(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);	  ae.setCompressedSize(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
22	[BUG]  [BUGGY]  ae.setCompressedSize(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue());  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.setCompressedSize(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue());  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.setCompressedSize(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue());	  ae.setCompressedSize(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
23	[BUG]  [BUGGY]  ae.setCompressedSize(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getName());  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.setCompressedSize(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getName());  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.setCompressedSize(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getName());	  ae.setCompressedSize(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
24	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae,  zipEncoding))  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae,  zipEncoding))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae,  zipEncoding))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae,    zipEncoding))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
25	[BUG]  [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae,  zipEncoding))  {  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae,  zipEncoding))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae,  zipEncoding))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae,    zipEncoding))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
26	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae,  this.zipEncoding))  {  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae,  this.zipEncoding))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae,  this.zipEncoding))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae,    zipEncoding))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
27	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae,  source))  {  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae,  source))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae,  source))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae,    zipEncoding))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
28	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae,  fileEncoding))  {  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae,  fileEncoding))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae,  fileEncoding))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae,    zipEncoding))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
29	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(ae,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(ae,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(ae,  rawStream))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64ExtendedInformationExtraField(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
30	[BUG]  [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(ae))  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(ae))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64ExtendedInformationExtraField(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
31	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(ae,  zipEncoding))  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(ae,  zipEncoding))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(ae,  zipEncoding))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64ExtendedInformationExtraField(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
32	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(ae,  source))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(ae,  source))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(ae,  source))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64ExtendedInformationExtraField(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
33	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(ae)||  hasZip64ExtendedInformationExtraField(ae))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(ae)||  hasZip64ExtendedInformationExtraField(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(ae)||  hasZip64ExtendedInformationExtraField(ae))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64ExtendedInformationExtraField(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
34	[BUG]  [BUGGY]  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
35	[BUG]  [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
36	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
37	[BUG]  [BUGGY]  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
38	[BUG]  [BUGGY]  if(ae!=  null  &&!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae))  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae))  {	  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
39	[BUG]  [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae,  rawStream))  {	  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
40	[BUG]  [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue()  +  1);  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue()  +  1);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue()  +  1);	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    entry.getValue());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
41	[BUG]  [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getKey());  [CE]  illegal  start  of  expression  [FE]                                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getKey());  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getKey());	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    entry.getValue());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
42	[BUG]  [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream.getValue());  [CE]  illegal  start  of  expression  [FE]                                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream.getValue());  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream.getValue());	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    entry.getValue());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
43	[BUG]  [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue(),  rawStream);  [CE]  illegal  start  of  expression  [FE]                                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue(),  rawStream);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue(),  rawStream);	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    entry.getValue());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
44	[BUG]  [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue()  -  1);  [CE]  illegal  start  of  expression  [FE]                                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue()  -  1);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue()  -  1);	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    entry.getValue());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
45	[BUG]  [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  zipEncoding.getValue());  [CE]  illegal  start  of  expression  [FE]                                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  zipEncoding.getValue());  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  zipEncoding.getValue());	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    entry.getValue());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
46	[BUG]  [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
47	[BUG]  [BUGGY]  if(ae!=  null  ||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  ||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  ||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
48	[BUG]  [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
49	[BUG]  [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
50	[BUG]  [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
51	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(rawStream,  ae))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(rawStream,  ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(rawStream,  ae))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
52	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(entry,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(entry,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(entry,  rawStream))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
53	[BUG]  [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(rawStream,  zipEncoding))  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(rawStream,  zipEncoding))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(rawStream,  zipEncoding))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
54	[BUG]  [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(rawStream,  zip64Mode))  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(rawStream,  zip64Mode))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(rawStream,  zip64Mode))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
55	[BUG]  [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64Extra(ae)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
56	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64Extra(ae)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
57	[BUG]  [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64Extra(ae)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
58	[BUG]  [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64Extra(ae)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
59	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64Extra(ae)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
60	[BUG]  [BUGGY]  if(ae!=  null  ||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  ||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  ||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64Extra(ae)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
61	[BUG]  [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
62	[BUG]  [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&!hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&!hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&!hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
63	[BUG]  [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
64	[BUG]  [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
65	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  is2PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  is2PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  is2PhaseSource)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
66	[BUG]  [BUGGY]  if(ae!=  null  ||  ae.getSize()  ==  ArchiveEntry.HEADER_ID)  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  ||  ae.getSize()  ==  ArchiveEntry.HEADER_ID)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  ||  ae.getSize()  ==  ArchiveEntry.HEADER_ID)  {	  if(ae!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
67	[BUG]  [BUGGY]  if(ae!=  null  ||  ae.getCompressedSize()  ==  ArchiveEntry.HEADER_ID)  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  ||  ae.getCompressedSize()  ==  ArchiveEntry.HEADER_ID)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  ||  ae.getCompressedSize()  ==  ArchiveEntry.HEADER_ID)  {	  if(ae!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
68	[BUG]  [BUGGY]  if(ae!=  null  ||  ae.getCrc()  ==  ZipArchiveEntry.HEADER_ID)  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  ||  ae.getCrc()  ==  ZipArchiveEntry.HEADER_ID)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  ||  ae.getCrc()  ==  ZipArchiveEntry.HEADER_ID)  {	  if(ae!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
69	[BUG]  [BUGGY]  if(ae  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae  ==  null)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae  ==  null)  {	  if(ae!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
70	[BUG]  [BUGGY]  if(ae!=  null  ||  ae.getCompressedSize()!=  ArchiveEntry.HEADER_ID)  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  ||  ae.getCompressedSize()!=  ArchiveEntry.HEADER_ID)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  ||  ae.getCompressedSize()!=  ArchiveEntry.HEADER_ID)  {	  if(ae!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
71	[BUG]  [BUGGY]  if(ae!=  null  ||  ae.getCrc()  ==  ArchiveEntry.HEADER_ID)  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  ||  ae.getCrc()  ==  ArchiveEntry.HEADER_ID)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  ||  ae.getCrc()  ==  ArchiveEntry.HEADER_ID)  {	  if(ae!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
72	[BUG]  [BUGGY]  if(hasExtraField(entry)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(entry)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(entry)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasZip64ExtendedInformationExtraField(entry)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
73	[BUG]  [BUGGY]  if(!hasZip64ExtendedInformationExtraField(entry)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasZip64ExtendedInformationExtraField(entry)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasZip64ExtendedInformationExtraField(entry)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasZip64ExtendedInformationExtraField(entry)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
74	[BUG]  [BUGGY]  if(!hasZip64ExtendedInformationExtraField(entry)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasZip64ExtendedInformationExtraField(entry)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasZip64ExtendedInformationExtraField(entry)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasZip64ExtendedInformationExtraField(entry)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
75	[BUG]  [BUGGY]  if(!hasExtraField(entry)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(entry)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(entry)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasZip64ExtendedInformationExtraField(entry)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
76	[BUG]  [BUGGY]  if(ae!=  null  ||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  ||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  ||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae))  {	  if(ae!=    null    &&    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
77	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(entry))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(entry))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(entry))  {	  if(ae!=    null    &&    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
78	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(zip64Mode))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(zip64Mode))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(zip64Mode))  {	  if(ae!=    null    &&    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
79	[BUG]  [BUGGY]  if(ae  ==  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae))  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae  ==  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae  ==  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae))  {	  if(ae!=    null    &&    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
80	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae,  rawStream))  {	  if(ae!=    null    &&    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
81	[BUG]  [BUGGY]  ae.addRawField(Zip64ExtendedInformationExtraField.HEADER_ID);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.addRawField(Zip64ExtendedInformationExtraField.HEADER_ID);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.addRawField(Zip64ExtendedInformationExtraField.HEADER_ID);	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
82	[BUG]  [BUGGY]  ae.addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
83	[BUG]  [BUGGY]  ae.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
84	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
85	[BUG]  [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
86	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE,  rawStream))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
87	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE),  rawStream)  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE),  rawStream)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE),  rawStream)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
88	[BUG]  [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
89	[BUG]  [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
90	[BUG]  [BUGGY]  if(ae!=  null  ||!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  ||!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  ||!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
91	[BUG]  [BUGGY]  if(ae!=  null  &&!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
92	[BUG]  [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);	  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
93	[BUG]  [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {	  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
94	[BUG]  [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {	  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
95	[BUG]  [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {	  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
96	[BUG]  [BUGGY]  if(entry.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(entry.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(entry.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae))  {	  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
97	[BUG]  [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(rawStream))  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(rawStream))  {	  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
98	[BUG]  [BUGGY]  if(!ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae))  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae))  {	  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
99	[BUG]  [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(entry))  {  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(entry))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(entry))  {	  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
100	[BUG]  [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(zipEncoding))  {  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(zipEncoding))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(zipEncoding))  {	  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
101	[BUG]  [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(zip64Mode))  {  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(zip64Mode))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(zip64Mode))  {	  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
102	[BUG]  [BUGGY]  if(ae!=  null  &&  is2PhaseSource  ||  hasZip64Extra(is2PhaseSource))  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  is2PhaseSource  ||  hasZip64Extra(is2PhaseSource))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  is2PhaseSource  ||  hasZip64Extra(is2PhaseSource))  {	  if(ae!=    null    &&    is2PhaseSource    ||    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
103	[BUG]  [BUGGY]  if(ae!=  null  &&  is2PhaseSource  &&  hasZip64Extra(is2PhaseSource))  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  is2PhaseSource  &&  hasZip64Extra(is2PhaseSource))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  is2PhaseSource  &&  hasZip64Extra(is2PhaseSource))  {	  if(ae!=    null    &&    is2PhaseSource    ||    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
104	[BUG]  [BUGGY]  if(ae!=  null  &&  is2PhaseSource  ||  hasZip64Extra(rawStream))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  is2PhaseSource  ||  hasZip64Extra(rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  is2PhaseSource  ||  hasZip64Extra(rawStream))  {	  if(ae!=    null    &&    is2PhaseSource    ||    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
105	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64ExtendedInformationExtraField(ae,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64ExtendedInformationExtraField(ae,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64ExtendedInformationExtraField(ae,  rawStream))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64ExtendedInformationExtraField(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
106	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64ExtendedInformationExtraField(ae,  zipEncoding))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64ExtendedInformationExtraField(ae,  zipEncoding))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64ExtendedInformationExtraField(ae,  zipEncoding))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64ExtendedInformationExtraField(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
107	[BUG]  [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64ExtendedInformationExtraField(ae))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64ExtendedInformationExtraField(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64ExtendedInformationExtraField(ae))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64ExtendedInformationExtraField(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
108	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64ExtendedInformationExtraField(ae,  source))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64ExtendedInformationExtraField(ae,  source))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64ExtendedInformationExtraField(ae,  source))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64ExtendedInformationExtraField(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
109	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
110	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HE  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HE  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HE	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
111	[BUG]  [BUGGY]  if(!is2PhaseSource  &&  hasZip64ExtendedInformationExtraField(ae))  {  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!is2PhaseSource  &&  hasZip64ExtendedInformationExtraField(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!is2PhaseSource  &&  hasZip64ExtendedInformationExtraField(ae))  {	  if(is2PhaseSource    ||    hasZip64ExtendedInformationExtraField(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
112	[BUG]  [BUGGY]  if(is2PhaseSource  ||  hasZip64ExtendedInformationExtraField(ae,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  ||  hasZip64ExtendedInformationExtraField(ae,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  ||  hasZip64ExtendedInformationExtraField(ae,  rawStream))  {	  if(is2PhaseSource    ||    hasZip64ExtendedInformationExtraField(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
113	[BUG]  [BUGGY]  if(ae!=  null  ||  hasZip64ExtendedInformationExtraField(is2PhaseSource))  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  ||  hasZip64ExtendedInformationExtraField(is2PhaseSource))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  ||  hasZip64ExtendedInformationExtraField(is2PhaseSource))  {	  if(is2PhaseSource    ||    hasZip64ExtendedInformationExtraField(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
114	[BUG]  [BUGGY]  if(is2PhaseSource  ||  hasZip64ExtendedInformationExtraField(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  ||  hasZip64ExtendedInformationExtraField(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  ||  hasZip64ExtendedInformationExtraField(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(is2PhaseSource    ||    hasZip64ExtendedInformationExtraField(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
115	[BUG]  [BUGGY]  if(is2PhaseSource  ||  hasZip64ExtendedInformationExtraField(entry))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  ||  hasZip64ExtendedInformationExtraField(entry))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  ||  hasZip64ExtendedInformationExtraField(entry))  {	  if(is2PhaseSource    ||    hasZip64ExtendedInformationExtraField(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
116	[BUG]  [BUGGY]  if(is2PhaseSource  ||  hasZip64ExtendedInformationExtraField(ae.getCrc()))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  ||  hasZip64ExtendedInformationExtraField(ae.getCrc()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  ||  hasZip64ExtendedInformationExtraField(ae.getCrc()))  {	  if(is2PhaseSource    ||    hasZip64ExtendedInformationExtraField(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
117	[BUG]  [BUGGY]  if(is2PhaseSource  ||  hasZip64ExtendedInformationExtraField(ae)||  is2PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  ||  hasZip64ExtendedInformationExtraField(ae)||  is2PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  ||  hasZip64ExtendedInformationExtraField(ae)||  is2PhaseSource)  {	  if(hasZip64ExtendedInformationExtraField(ae)||    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
118	[BUG]  [BUGGY]  if(hasZip64ExtendedInformationExtraField(ae)&&  is2PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasZip64ExtendedInformationExtraField(ae)&&  is2PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasZip64ExtendedInformationExtraField(ae)&&  is2PhaseSource)  {	  if(hasZip64ExtendedInformationExtraField(ae)||    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
119	[BUG]  [BUGGY]  if(hasZip64ExtendedInformationExtraField(entry)||  is2PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasZip64ExtendedInformationExtraField(entry)||  is2PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasZip64ExtendedInformationExtraField(entry)||  is2PhaseSource)  {	  if(hasZip64ExtendedInformationExtraField(ae)||    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
120	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  is2PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  is2PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  is2PhaseSource)  {	  if(hasZip64ExtendedInformationExtraField(ae)||    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
121	[BUG]  [BUGGY]  if(!hasZip64ExtendedInformationExtraField(ae)&&  is2PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasZip64ExtendedInformationExtraField(ae)&&  is2PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasZip64ExtendedInformationExtraField(ae)&&  is2PhaseSource)  {	  if(hasZip64ExtendedInformationExtraField(ae)||    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
122	[BUG]  [BUGGY]  if(hasZip64ExtendedInformationExtraField(ae)||  is2PhaseSource  ||  zipEncoding)  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasZip64ExtendedInformationExtraField(ae)||  is2PhaseSource  ||  zipEncoding)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasZip64ExtendedInformationExtraField(ae)||  is2PhaseSource  ||  zipEncoding)  {	  if(hasZip64ExtendedInformationExtraField(ae)||    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
123	[BUG]  [BUGGY]  if(hasExtraField(ae)||  is2PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(ae)||  is2PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(ae)||  is2PhaseSource)  {	  if(hasZip64ExtendedInformationExtraField(ae)||    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
124	[BUG]  [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
125	[BUG]  [BUGGY]  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
126	[BUG]  [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
127	[BUG]  [BUGGY]  if(ae!=  null  ||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  ||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  ||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
128	[BUG]  [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
129	[BUG]  [BUGGY]  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
130	[BUG]  [BUGGY]  if(ae!=  null  &&  is2PhaseSource  &&  hasZip64Extra(rawStream))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  is2PhaseSource  &&  hasZip64Extra(rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  is2PhaseSource  &&  hasZip64Extra(rawStream))  {	  if(ae!=    null    &&    is2PhaseSource    &&    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
131	[BUG]  [BUGGY]  if(ae!=  null  &&  is2PhaseSource  &&  hasZip64Extra(entry))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  is2PhaseSource  &&  hasZip64Extra(entry))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  is2PhaseSource  &&  hasZip64Extra(entry))  {	  if(ae!=    null    &&    is2PhaseSource    &&    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
132	[BUG]  [BUGGY]  if(is2PhaseSource  &&  is2PhaseSource  &&  hasZip64Extra(ae))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  is2PhaseSource  &&  hasZip64Extra(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  is2PhaseSource  &&  hasZip64Extra(ae))  {	  if(ae!=    null    &&    is2PhaseSource    &&    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
133	[BUG]  [BUGGY]  if(is2PhaseSource  &&  is2PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  is2PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  is2PhaseSource)  {	  if(ae!=    null    &&    is2PhaseSource    &&    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
134	[BUG]  [BUGGY]  if(is2PhaseSource  ||  hasZip64Extra(ae)&&  is2PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  ||  hasZip64Extra(ae)&&  is2PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  ||  hasZip64Extra(ae)&&  is2PhaseSource)  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)||    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
135	[BUG]  [BUGGY]  if(ae!=  null  ||  hasZip64Extra(ae)||  is2PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  ||  hasZip64Extra(ae)||  is2PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  ||  hasZip64Extra(ae)||  is2PhaseSource)  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)||    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
136	[BUG]  [BUGGY]  if(is2PhaseSource  ||  hasZip64Extra(entry)||  is2PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  ||  hasZip64Extra(entry)||  is2PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  ||  hasZip64Extra(entry)||  is2PhaseSource)  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)||    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
137	[BUG]  [BUGGY]  if(isCrc  ||  hasZip64Extra(ae)||  is2PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(isCrc  ||  hasZip64Extra(ae)||  is2PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(isCrc  ||  hasZip64Extra(ae)||  is2PhaseSource)  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)||    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
138	[BUG]  [BUGGY]  if(ae  ==  null  ||  hasZip64Extra(ae)||  is2PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae  ==  null  ||  hasZip64Extra(ae)||  is2PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae  ==  null  ||  hasZip64Extra(ae)||  is2PhaseSource)  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)||    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
139	[BUG]  [BUGGY]  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
140	[BUG]  [BUGGY]  if(!ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
141	[BUG]  [BUGGY]  if(ae!=  null  &&  ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
142	[BUG]  [BUGGY]  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)	  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
143	[BUG]  [BUGGY]  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  entry.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  entry.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  entry.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
144	[BUG]  [BUGGY]  if(entry.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(entry.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(entry.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
145	[BUG]  [BUGGY]  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID),  rawStream)  {  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID),  rawStream)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID),  rawStream)  {	  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
146	[BUG]  [BUGGY]  if(is2PhaseSource  ||  hasZip64Extra(entry))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  ||  hasZip64Extra(entry))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  ||  hasZip64Extra(entry))  {	  if(is2PhaseSource    &&    hasZip64Extra(entry))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
147	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(rawStream))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64Extra(rawStream))  {	  if(is2PhaseSource    &&    hasZip64Extra(entry))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
148	[BUG]  [BUGGY]  if(!is2PhaseSource  &&  hasZip64Extra(rawStream))  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!is2PhaseSource  &&  hasZip64Extra(rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!is2PhaseSource  &&  hasZip64Extra(rawStream))  {	  if(is2PhaseSource    &&    hasZip64Extra(entry))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
149	[BUG]  [BUGGY]  if(!is2PhaseSource  &&  hasZip64Extra(entry))  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!is2PhaseSource  &&  hasZip64Extra(entry))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!is2PhaseSource  &&  hasZip64Extra(entry))  {	  if(is2PhaseSource    &&    hasZip64Extra(entry))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
150	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(entry.getKey()))  {  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(entry.getKey()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64Extra(entry.getKey()))  {	  if(is2PhaseSource    &&    hasZip64Extra(entry))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
151	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(rawStream,  is2PhaseSource))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(rawStream,  is2PhaseSource))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64Extra(rawStream,  is2PhaseSource))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
152	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(entry,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(entry,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64Extra(entry,  rawStream))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
153	[BUG]  [BUGGY]  if(!is2PhaseSource  &&  hasZip64Extra(ae,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!is2PhaseSource  &&  hasZip64Extra(ae,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!is2PhaseSource  &&  hasZip64Extra(ae,  rawStream))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
154	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae,  rawStream.getCharset()))  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae,  rawStream.getCharset()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64Extra(ae,  rawStream.getCharset()))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
155	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae,  rawStream.readLine()))  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae,  rawStream.readLine()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64Extra(ae,  rawStream.readLine()))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
156	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae,  rawStream.getVersion()))  {  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae,  rawStream.getVersion()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64Extra(ae,  rawStream.getVersion()))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
157	[BUG]  [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae!=  null)  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae!=  null)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae!=  null)  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    ae!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
158	[BUG]  [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    ae!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
159	[BUG]  [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae  ==  null)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae  ==  null)  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    ae!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
160	[BUG]  [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    ae!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
161	[BUG]  [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae!=  null)  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae!=  null)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae!=  null)  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    ae!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
162	[BUG]  [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    ae!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
163	[BUG]  [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream  +  1);  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream  +  1);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream  +  1);	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
164	[BUG]  [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  entry.getValue());  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  entry.getValue());  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  entry.getValue());	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
165	[BUG]  [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  source);  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  source);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  source);	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
166	[BUG]  [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  entry.getVersion());  [CE]  illegal  start  of  expression  [FE]                                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  entry.getVersion());  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  entry.getVersion());	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
167	[BUG]  [BUGGY]  if(is2PhaseSource  ||  hasZip64Extra(ae.getCompressedSize()))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  ||  hasZip64Extra(ae.getCompressedSize()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  ||  hasZip64Extra(ae.getCompressedSize()))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae.getCompressedSize()))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
168	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae.getSize()))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae.getSize()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64Extra(ae.getSize()))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae.getCompressedSize()))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
169	[BUG]  [BUGGY]  if(!is2PhaseSource  &&  hasZip64Extra(ae.getCompressedSize()))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!is2PhaseSource  &&  hasZip64Extra(ae.getCompressedSize()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!is2PhaseSource  &&  hasZip64Extra(ae.getCompressedSize()))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae.getCompressedSize()))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
170	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(entry.getCompressedSize()))  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(entry.getCompressedSize()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64Extra(entry.getCompressedSize()))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae.getCompressedSize()))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
171	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae.getCompressedSize()  +  1))  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae.getCompressedSize()  +  1))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64Extra(ae.getCompressedSize()  +  1))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae.getCompressedSize()))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
172	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae.getCompressedSize(),  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae.getCompressedSize(),  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64Extra(ae.getCompressedSize(),  rawStream))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae.getCompressedSize()))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
173	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(entry)||  is2PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(entry)||  is2PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64Extra(entry)||  is2PhaseSource)  {	  if(is2PhaseSource    &&    hasZip64Extra(ae)||    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
174	[BUG]  [BUGGY]  if(is2PhaseSource  &&  isZip64Extra(ae)||  is2PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  isZip64Extra(ae)||  is2PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  isZip64Extra(ae)||  is2PhaseSource)  {	  if(is2PhaseSource    &&    hasZip64Extra(ae)||    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
175	[BUG]  [BUGGY]  if(isCrc  &&  hasZip64Extra(ae)||  is2PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(isCrc  &&  hasZip64Extra(ae)||  is2PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(isCrc  &&  hasZip64Extra(ae)||  is2PhaseSource)  {	  if(is2PhaseSource    &&    hasZip64Extra(ae)||    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
176	[BUG]  [BUGGY]  if(!is2PhaseSource  &&  hasZip64Extra(ae)||  is2PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!is2PhaseSource  &&  hasZip64Extra(ae)||  is2PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!is2PhaseSource  &&  hasZip64Extra(ae)||  is2PhaseSource)  {	  if(is2PhaseSource    &&    hasZip64Extra(ae)||    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
177	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae)||  is3PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae)||  is3PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64Extra(ae)||  is3PhaseSource)  {	  if(is2PhaseSource    &&    hasZip64Extra(ae)||    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
178	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(rawStream,  ae))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(rawStream,  ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(rawStream,  ae))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64Extra(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
179	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(entry,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(entry,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(entry,  rawStream))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64Extra(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
180	[BUG]  [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(rawStream,  zipEncoding))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(rawStream,  zipEncoding))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(rawStream,  zipEncoding))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64Extra(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
181	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae,  rawStream)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae,  rawStream)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae,  rawStream)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64Extra(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
182	[BUG]  [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
183	[BUG]  [BUGGY]  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
184	[BUG]  [BUGGY]  if(ae!=  null  ||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  ||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  ||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
185	[BUG]  [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
186	[BUG]  [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
187	[BUG]  [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR,  ae))  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR,  ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR,  ae))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
188	[BUG]  [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae),  rawStream)  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae),  rawStream)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae),  rawStream)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64Extra(ae),    rawStream)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
189	[BUG]  [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae),  rawStream)  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae),  rawStream)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae),  rawStream)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64Extra(ae),    rawStream)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
190	[BUG]  [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae),  rawStream)  {  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae),  rawStream)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae),  rawStream)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64Extra(ae),    rawStream)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
191	[BUG]  [BUGGY]  if(ae!=  null  &&  is2PhaseSource  &&  hasZip64ExtendedInformationExtraField(entry))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  is2PhaseSource  &&  hasZip64ExtendedInformationExtraField(entry))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  is2PhaseSource  &&  hasZip64ExtendedInformationExtraField(entry))  {	  if(is2PhaseSource    &&    hasZip64ExtendedInformationExtraField(entry))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
192	[BUG]  [BUGGY]  if(!is2PhaseSource  &&  hasZip64ExtendedInformationExtraField(entry))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!is2PhaseSource  &&  hasZip64ExtendedInformationExtraField(entry))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!is2PhaseSource  &&  hasZip64ExtendedInformationExtraField(entry))  {	  if(is2PhaseSource    &&    hasZip64ExtendedInformationExtraField(entry))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
193	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraField(entry.getName()))  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraField(entry.getName()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraField(entry.getName()))  {	  if(is2PhaseSource    &&    hasZip64ExtendedInformationExtraField(entry))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
194	[BUG]  [BUGGY]  if(is2PhaseSource  &&  isZip64ExtendedInformationExtraField(ae))  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  isZip64ExtendedInformationExtraField(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  isZip64ExtendedInformationExtraField(ae))  {	  if(is2PhaseSource    &&    hasZip64ExtendedInformationExtraField(entry))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
195	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraField(entry,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraField(entry,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraField(entry,  rawStream))  {	  if(is2PhaseSource    &&    hasZip64ExtendedInformationExtraField(entry))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
196	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER)||  hasZip64Extra(ae))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER)||  hasZip64Extra(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER)||  hasZip64Extra(ae))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER)&&    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
197	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER)&&  hasZip64Extra(ae,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER)&&  hasZip64Extra(ae,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER)&&  hasZip64Extra(ae,  rawStream))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER)&&    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
198	[BUG]  [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER)&&  hasZip64Extra(ae))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER)&&  hasZip64Extra(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER)&&  hasZip64Extra(ae))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER)&&    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
199	[BUG]  [BUGGY]  if(hasExtraField(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasZip64ExtendedInformationExtraField(ae)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
200	[BUG]  [BUGGY]  if(!hasZip64ExtendedInformationExtraField(ae)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasZip64ExtendedInformationExtraField(ae)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasZip64ExtendedInformationExtraField(ae)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasZip64ExtendedInformationExtraField(ae)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
201	[BUG]  [BUGGY]  if(!hasZip64ExtendedInformationExtraField(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasZip64ExtendedInformationExtraField(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasZip64ExtendedInformationExtraField(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasZip64ExtendedInformationExtraField(ae)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
202	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraField(ae,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraField(ae,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraField(ae,  rawStream))  {	  if(is2PhaseSource    &&    hasZip64ExtendedInformationExtraField(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
203	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraField(ae.getCrc()))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraField(ae.getCrc()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraField(ae.getCrc()))  {	  if(is2PhaseSource    &&    hasZip64ExtendedInformationExtraField(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
204	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraField(ae.getParent()))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraField(ae.getParent()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraField(ae.getParent()))  {	  if(is2PhaseSource    &&    hasZip64ExtendedInformationExtraField(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
205	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraField(ae,  true))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraField(ae,  true))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraField(ae,  true))  {	  if(is2PhaseSource    &&    hasZip64ExtendedInformationExtraField(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
206	[BUG]  [BUGGY]  if(is2PhaseSource  ||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  ||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  ||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
207	[BUG]  [BUGGY]  if(ae!=  null  &&  is2PhaseSource  &&  hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  is2PhaseSource  &&  hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  is2PhaseSource  &&  hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
208	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(entry)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(entry)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64Extra(entry)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
209	[BUG]  [BUGGY]  if(!is2PhaseSource  &&  hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!is2PhaseSource  &&  hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!is2PhaseSource  &&  hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
210	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID),  rawStream)  {  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID),  rawStream)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID),  rawStream)  {	  if(is2PhaseSource    &&    hasZip64Extra(ae)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
211	[BUG]  [BUGGY]  if(ae!=  null  &&  hasZip64Extra(ae))  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasZip64Extra(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasZip64Extra(ae))  {	  if(ae!=    null    ||    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
212	[BUG]  [BUGGY]  if(ae!=  null  ||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  ||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  ||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(ae!=    null    ||    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
213	[BUG]  [BUGGY]  if(ae!=  null  ||  hasZip64Extra(entry))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  ||  hasZip64Extra(entry))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  ||  hasZip64Extra(entry))  {	  if(ae!=    null    ||    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
214	[BUG]  [BUGGY]  if(ae!=  null  ||  hasZip64ExtendedInformationExtraField(ae))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  ||  hasZip64ExtendedInformationExtraField(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  ||  hasZip64ExtendedInformationExtraField(ae))  {	  if(ae!=    null    ||    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
215	[BUG]  [BUGGY]  if(ae  ==  null  &&  hasZip64Extra(ae))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae  ==  null  &&  hasZip64Extra(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae  ==  null  &&  hasZip64Extra(ae))  {	  if(ae!=    null    ||    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
216	[BUG]  [BUGGY]  if(ae!=  null  ||  hasZip64Extra(rawStream))  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  ||  hasZip64Extra(rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  ||  hasZip64Extra(rawStream))  {	  if(ae!=    null    ||    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
217	[BUG]  [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(entry))  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(entry))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(entry))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64ExtendedInformationExtraField(entry))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
218	[BUG]  [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(entry))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(entry))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(entry))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64ExtendedInformationExtraField(entry))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
219	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(entry))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(entry))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(entry))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64ExtendedInformationExtraField(entry))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
220	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(entry,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(entry,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(entry,  rawStream))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64ExtendedInformationExtraField(entry))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
221	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(entry,  zipEncoding))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(entry,  zipEncoding))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(entry,  zipEncoding))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64ExtendedInformationExtraField(entry))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
222	[BUG]  [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
223	[BUG]  [BUGGY]  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
224	[BUG]  [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
225	[BUG]  [BUGGY]  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
226	[BUG]  [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
227	[BUG]  [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
228	[BUG]  [BUGGY]  if(hasZip64ExtendedInformationExtraField(ae.getName()))  {  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasZip64ExtendedInformationExtraField(ae.getName()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasZip64ExtendedInformationExtraField(ae.getName()))  {	  if(hasZip64ExtendedInformationExtraField(entry.getName()))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
229	[BUG]  [BUGGY]  if(!hasZip64ExtendedInformationExtraField(ae.getName()))  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasZip64ExtendedInformationExtraField(ae.getName()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasZip64ExtendedInformationExtraField(ae.getName()))  {	  if(hasZip64ExtendedInformationExtraField(entry.getName()))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
230	[BUG]  [BUGGY]  if(hasZip64ExtendedInformationExtraField(ae.getName())||  hasZip64ExtendedInformationExtraField(entry.getName()))  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasZip64ExtendedInformationExtraField(ae.getName())||  hasZip64ExtendedInformationExtraField(entry.getName()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasZip64ExtendedInformationExtraField(ae.getName())||  hasZip64ExtendedInformationExtraField(entry.getName()))  {	  if(hasZip64ExtendedInformationExtraField(entry.getName()))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
231	[BUG]  [BUGGY]  if(hasExtraField(entry.getName()))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(entry.getName()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(entry.getName()))  {	  if(hasZip64ExtendedInformationExtraField(entry.getName()))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
232	[BUG]  [BUGGY]  if(hasZip64ExtendedInformationExtraField(ae.getName())||  hasZip64ExtendedInformationExtraField(ae.getName()))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasZip64ExtendedInformationExtraField(ae.getName())||  hasZip64ExtendedInformationExtraField(ae.getName()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasZip64ExtendedInformationExtraField(ae.getName())||  hasZip64ExtendedInformationExtraField(ae.getName()))  {	  if(hasZip64ExtendedInformationExtraField(entry.getName()))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
233	[BUG]  [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
234	[BUG]  [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
235	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
236	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae,  rawStream)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae,  rawStream)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae,  rawStream)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
237	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(entry)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(entry)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(entry)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
238	[BUG]  [BUGGY]  if(hasZip64ExtendedInformationExtraField(entry,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasZip64ExtendedInformationExtraField(entry,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasZip64ExtendedInformationExtraField(entry,  rawStream))  {	  if(hasZip64ExtendedInformationExtraField(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
239	[BUG]  [BUGGY]  if(hasZip64ExtendedInformationExtraField(rawStream,  ae))  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasZip64ExtendedInformationExtraField(rawStream,  ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasZip64ExtendedInformationExtraField(rawStream,  ae))  {	  if(hasZip64ExtendedInformationExtraField(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
240	[BUG]  [BUGGY]  if(hasZip64ExtendedInformationExtraField(ae,  rawStream)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasZip64ExtendedInformationExtraField(ae,  rawStream)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasZip64ExtendedInformationExtraField(ae,  rawStream)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasZip64ExtendedInformationExtraField(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
241	[BUG]  [BUGGY]  if(hasZip64ExtendedInformationExtraField(ae,  rawStream)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasZip64ExtendedInformationExtraField(ae,  rawStream)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasZip64ExtendedInformationExtraField(ae,  rawStream)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasZip64ExtendedInformationExtraField(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
242	[BUG]  [BUGGY]  if(!hasZip64ExtendedInformationExtraField(ae,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasZip64ExtendedInformationExtraField(ae,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasZip64ExtendedInformationExtraField(ae,  rawStream))  {	  if(hasZip64ExtendedInformationExtraField(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
243	[BUG]  [BUGGY]  if(hasExtraField(ae,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(ae,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(ae,  rawStream))  {	  if(hasZip64ExtendedInformationExtraField(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
244	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
245	[BUG]  [BUGGY]  if(entry.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(entry.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(entry.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae))  {	  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
246	[BUG]  [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(rawStream))  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(rawStream))  {	  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
247	[BUG]  [BUGGY]  if(!ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae))  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae))  {	  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
248	[BUG]  [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(entry))  {  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(entry))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(entry))  {	  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
249	[BUG]  [BUGGY]  if(is2PhaseSource  ||  hasZip64Extra(ae)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  ||  hasZip64Extra(ae)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  ||  hasZip64Extra(ae)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
250	[BUG]  [BUGGY]  if(ae!=  null  ||  is2PhaseSource  ||  hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  ||  is2PhaseSource  ||  hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  ||  is2PhaseSource  ||  hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
251	[BUG]  [BUGGY]  if(ae!=  null  ||  hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  ||  hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  ||  hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
252	[BUG]  [BUGGY]  if(ae  ==  null  ||  hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae  ==  null  ||  hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae  ==  null  ||  hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
253	[BUG]  [BUGGY]  if(is2PhaseSource  ||  hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID),  rawStream)  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  ||  hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID),  rawStream)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  ||  hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID),  rawStream)  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
254	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
255	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||  hasExtraField(Zip64ExtendedInformationExtraField.  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||  hasExtraField(Zip64ExtendedInformationExtraField.  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||  hasExtraField(Zip64ExtendedInformationExtraField.	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
256	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae,  false))  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae,  false))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64Extra(ae,  false))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae,    true))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
257	[BUG]  [BUGGY]  if(is2PhaseSource  ||  hasZip64Extra(ae,  true))  {  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  ||  hasZip64Extra(ae,  true))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  ||  hasZip64Extra(ae,  true))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae,    true))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
258	[BUG]  [BUGGY]  if(!is2PhaseSource  &&  hasZip64Extra(ae,  true))  {  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!is2PhaseSource  &&  hasZip64Extra(ae,  true))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!is2PhaseSource  &&  hasZip64Extra(ae,  true))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae,    true))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
259	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(entry,  true))  {  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(entry,  true))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64Extra(entry,  true))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae,    true))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
260	[BUG]  [BUGGY]  if(is2PhaseSource  &&  isZip64Extra(ae,  false))  {  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  isZip64Extra(ae,  false))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  isZip64Extra(ae,  false))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae,    true))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
261	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae,  false)||  is2PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]                                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae,  false)||  is2PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64Extra(ae,  false)||  is2PhaseSource)  {	  if(is2PhaseSource    &&    hasZip64Extra(ae,    true))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
262	[BUG]  [BUGGY]  if(hasExtraField(ae)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(ae)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(ae)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasZip64ExtendedInformationExtraField(ae)&&    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
263	[BUG]  [BUGGY]  if(!hasExtraField(ae)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(ae)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(ae)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasZip64ExtendedInformationExtraField(ae)&&    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
264	[BUG]  [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
265	[BUG]  [BUGGY]  if(!ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
266	[BUG]  [BUGGY]  if(ae!=  null  &&  ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
267	[BUG]  [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  entry.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  entry.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  entry.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
268	[BUG]  [BUGGY]  if(entry.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(entry.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(entry.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
269	[BUG]  [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  {	  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
270	[BUG]  [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae.hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae.hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae.hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {	  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
271	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae,  is2PhaseSource))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae,  is2PhaseSource))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae,  is2PhaseSource))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae)||    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
272	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae)||  is2PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae)||  is2PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae)||  is2PhaseSource)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae)||    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
273	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae,  rawStream)||  is2PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae,  rawStream)||  is2PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae,  rawStream)||  is2PhaseSource)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae)||    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
274	[BUG]  [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae)||  is2PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae)||  is2PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae)||  is2PhaseSource)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae)||    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
275	[BUG]  [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae)||  is2PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae)||  is2PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae)||  is2PhaseSource)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae)||    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
276	[BUG]  [BUGGY]  if(is2PhaseSource  ||  hasZip64Extra(rawStream,  is2PhaseSource))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  ||  hasZip64Extra(rawStream,  is2PhaseSource))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  ||  hasZip64Extra(rawStream,  is2PhaseSource))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
277	[BUG]  [BUGGY]  if(is2PhaseSource  ||  hasZip64Extra(ae,  rawStream.getCharset()))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  ||  hasZip64Extra(ae,  rawStream.getCharset()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  ||  hasZip64Extra(ae,  rawStream.getCharset()))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
278	[BUG]  [BUGGY]  if(is2PhaseSource  ||  hasZip64Extra(ae,  rawStream.getEncoding()))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  ||  hasZip64Extra(ae,  rawStream.getEncoding()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  ||  hasZip64Extra(ae,  rawStream.getEncoding()))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
279	[BUG]  [BUGGY]  if(ae!=  null  ||  hasZip64Extra(ae,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  ||  hasZip64Extra(ae,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  ||  hasZip64Extra(ae,  rawStream))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
280	[BUG]  [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64ExtendedInformationExtraField(entry))  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64ExtendedInformationExtraField(entry))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64ExtendedInformationExtraField(entry))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64ExtendedInformationExtraField(entry))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
281	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64ExtendedInformationExtraField(entry.getName()))  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64ExtendedInformationExtraField(entry.getName()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64ExtendedInformationExtraField(entry.getName()))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64ExtendedInformationExtraField(entry))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
282	[BUG]  [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64ExtendedInformationExtraField(entry))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64ExtendedInformationExtraField(entry))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64ExtendedInformationExtraField(entry))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64ExtendedInformationExtraField(entry))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
283	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae)||  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae)||  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64Extra(ae)||  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)||    isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
284	[BUG]  [BUGGY]  if(ae!=  null  ||  hasZip64Extra(ae)||  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  ||  hasZip64Extra(ae)||  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  ||  hasZip64Extra(ae)||  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)||    isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
285	[BUG]  [BUGGY]  if(isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  is2PhaseSource  ||  hasZip64Extra(ae)||  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  is2PhaseSource  ||  hasZip64Extra(ae)||  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  is2PhaseSource  ||  hasZip64Extra(ae)||  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)||    isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
286	[BUG]  [BUGGY]  if(isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae)||  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae)||  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae)||  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)||    isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
287	[BUG]  [BUGGY]  if(isRemoteExtraField(ae)||  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(isRemoteExtraField(ae)||  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(isRemoteExtraField(ae)||  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)||    isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
288	[BUG]  [BUGGY]  if(ae!=  null  ||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  ||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  ||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae))  {	  if(ae!=    null    &&    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
289	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(rawStream))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(rawStream))  {	  if(ae!=    null    &&    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
290	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(zip64Mode))  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(zip64Mode))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(zip64Mode))  {	  if(ae!=    null    &&    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
291	[BUG]  [BUGGY]  if(!is2PhaseSource  &&  hasZip64Extra(ae.getCrc()))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!is2PhaseSource  &&  hasZip64Extra(ae.getCrc()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!is2PhaseSource  &&  hasZip64Extra(ae.getCrc()))  {	  if(!is2PhaseSource    &&    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
292	[BUG]  [BUGGY]  if(!is2PhaseSource  ||  hasZip64Extra(ae))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!is2PhaseSource  ||  hasZip64Extra(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!is2PhaseSource  ||  hasZip64Extra(ae))  {	  if(!is2PhaseSource    &&    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
293	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(e))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(e))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(e))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(e))    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
294	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(e,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(e,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(e,  rawStream))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(e))    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
295	[BUG]  [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(e))  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(e))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(e))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(e))    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
296	[BUG]  [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(e))  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(e))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(e))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(e))    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
297	[BUG]  [BUGGY]  ae.addRaw(Zip64ExtendedInformationExtraField.HEADER_ID);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.addRaw(Zip64ExtendedInformationExtraField.HEADER_ID);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.addRaw(Zip64ExtendedInformationExtraField.HEADER_ID);	  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
298	[BUG]  [BUGGY]  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry);	  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
299	[BUG]  [BUGGY]  ae.addRawExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.addRawExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.addRawExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);	  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
300	[BUG]  [BUGGY]  if(is2PhaseSource  ||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  is2PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  ||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  is2PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  ||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  is2PhaseSource)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
301	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  is2PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  is2PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  is2PhaseSource)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
302	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  is2PhaseSource  ||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  is2PhaseSource  ||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  is2PhaseSource  ||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
303	[BUG]  [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  is2PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  is2PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  is2PhaseSource)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
304	[BUG]  [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  is2PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  is2PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  is2PhaseSource)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
305	[BUG]  [BUGGY]  if(!is2PhaseSource  &&!hasZip64ExtendedInformationExtraField(ae))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!is2PhaseSource  &&!hasZip64ExtendedInformationExtraField(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!is2PhaseSource  &&!hasZip64ExtendedInformationExtraField(ae))  {	  if(!hasZip64ExtendedInformationExtraField(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
306	[BUG]  [BUGGY]  if(!hasZip64ExtendedInformationExtraField(entry))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasZip64ExtendedInformationExtraField(entry))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasZip64ExtendedInformationExtraField(entry))  {	  if(!hasZip64ExtendedInformationExtraField(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
307	[BUG]  [BUGGY]  if(is2PhaseSource  &&!hasZip64ExtendedInformationExtraField(ae))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&!hasZip64ExtendedInformationExtraField(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&!hasZip64ExtendedInformationExtraField(ae))  {	  if(!hasZip64ExtendedInformationExtraField(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
308	[BUG]  [BUGGY]  if(ae!=  null  &&!hasZip64ExtendedInformationExtraField(ae))  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&!hasZip64ExtendedInformationExtraField(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&!hasZip64ExtendedInformationExtraField(ae))  {	  if(!hasZip64ExtendedInformationExtraField(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
309	[BUG]  [BUGGY]  if(!hasExtraField(ae))  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(ae))  {	  if(!hasZip64ExtendedInformationExtraField(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
310	[BUG]  [BUGGY]  ae.setExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.setExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.setExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);	  ae.setExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
311	[BUG]  [BUGGY]  ae.setExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue());  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.setExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue());  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.setExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue());	  ae.setExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
312	[BUG]  [BUGGY]  ae.setExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry);  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.setExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.setExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry);	  ae.setExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
313	[BUG]  [BUGGY]  ae.setExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  zipEncoding);  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.setExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  zipEncoding);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.setExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  zipEncoding);	  ae.setExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
314	[BUG]  [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
315	[BUG]  [BUGGY]  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
316	[BUG]  [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE),  rawStream)  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE),  rawStream)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE),  rawStream)  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
317	[BUG]  [BUGGY]  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
318	[BUG]  [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE,  rawStream))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
319	[BUG]  [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
320	[BUG]  [BUGGY]  ae.setCompressedSize(BUFFER_SIZE,  BUFFER_SIZE);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.setCompressedSize(BUFFER_SIZE,  BUFFER_SIZE);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.setCompressedSize(BUFFER_SIZE,  BUFFER_SIZE);	  ae.setCompressedSize(BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
321	[BUG]  [BUGGY]  ae.setCompressedSize(bUFFER_SIZE);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.setCompressedSize(bUFFER_SIZE);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.setCompressedSize(bUFFER_SIZE);	  ae.setCompressedSize(BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
322	[BUG]  [BUGGY]  ae.setCompressedSize(BUFFER_SIZE  +  BUFFER_SIZE);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.setCompressedSize(BUFFER_SIZE  +  BUFFER_SIZE);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.setCompressedSize(BUFFER_SIZE  +  BUFFER_SIZE);	  ae.setCompressedSize(BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
323	[BUG]  [BUGGY]  ae.setCompressedSize(BUFFER_SIZE  +  1);  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.setCompressedSize(BUFFER_SIZE  +  1);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.setCompressedSize(BUFFER_SIZE  +  1);	  ae.setCompressedSize(BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
324	[BUG]  [BUGGY]  ae.setCompressedSize(BUFFER_SIZE  *  BUFFER_SIZE);  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.setCompressedSize(BUFFER_SIZE  *  BUFFER_SIZE);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.setCompressedSize(BUFFER_SIZE  *  BUFFER_SIZE);	  ae.setCompressedSize(BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
325	[BUG]  [BUGGY]  if(ae!=  null  ||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  ||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  ||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(ae!=    null    &&    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
326	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(ae!=    null    &&    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
327	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID),  rawStream)  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID),  rawStream)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID),  rawStream)  {	  if(ae!=    null    &&    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
328	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)	  if(ae!=    null    &&    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
329	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {	  if(ae!=    null    &&    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
330	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  is2PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  is2PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  is2PhaseSource)  {	  if(ae!=    null    &&    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
331	[BUG]  [BUGGY]  if(ae!=  null  ||  is2PhaseSource  &&  hasZip64Extra(ae))  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  ||  is2PhaseSource  &&  hasZip64Extra(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  ||  is2PhaseSource  &&  hasZip64Extra(ae))  {	  if(ae!=    null    ||    is2PhaseSource    ||    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
332	[BUG]  [BUGGY]  if(is2PhaseSource  ||  isZip64Extra(ae))  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  ||  isZip64Extra(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  ||  isZip64Extra(ae))  {	  if(ae!=    null    ||    is2PhaseSource    ||    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
333	[BUG]  [BUGGY]  if(ae!=  null  ||  is2PhaseSource  ||  hasZip64Extra(is2PhaseSource))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  ||  is2PhaseSource  ||  hasZip64Extra(is2PhaseSource))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  ||  is2PhaseSource  ||  hasZip64Extra(is2PhaseSource))  {	  if(ae!=    null    ||    is2PhaseSource    ||    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
334	[BUG]  [BUGGY]  if(ae  ==  null  ||  is2PhaseSource  &&  hasZip64Extra(ae))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae  ==  null  ||  is2PhaseSource  &&  hasZip64Extra(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae  ==  null  ||  is2PhaseSource  &&  hasZip64Extra(ae))  {	  if(ae!=    null    ||    is2PhaseSource    ||    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
335	[BUG]  [BUGGY]  if(ae!=  null  ||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  ||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  ||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
336	[BUG]  [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
337	[BUG]  [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  zipEncoding);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  zipEncoding);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  zipEncoding);	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
338	[BUG]  [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getName());  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getName());  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getName());	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
339	[BUG]  [BUGGY]  if(ae!=  null  &&!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
340	[BUG]  [BUGGY]  if(ae!=  null  ||!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  ||!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  ||!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
341	[BUG]  [BUGGY]  if(is2PhaseSource  &&!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
342	[BUG]  [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||!ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||!ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||!ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
343	[BUG]  [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {	  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
344	[BUG]  [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {	  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
345	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
346	[BUG]  [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
347	[BUG]  [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
348	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR,  ae))  {  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR,  ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR,  ae))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
349	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
350	[BUG]  [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {  [CE]  illegal  start  of  expression  [FE]                                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
351	[BUG]  [BUGGY]  if(is2PhaseSource  ||  hasZip64Extra(ae.getCrc()))  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  ||  hasZip64Extra(ae.getCrc()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  ||  hasZip64Extra(ae.getCrc()))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae.getCrc()))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
352	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae.getCrc())||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae.getCrc())||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64Extra(ae.getCrc())||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae.getCrc()))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
353	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae.getInput()))  {  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae.getInput()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64Extra(ae.getInput()))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae.getCrc()))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
354	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae.getContent()))  {  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae.getContent()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64Extra(ae.getContent()))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae.getCrc()))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
355	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae)&&  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae)&&  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64Extra(ae)&&  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)&&    isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
356	[BUG]  [BUGGY]  if(isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae)&&  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae)&&  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae)&&  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_	  if(is2PhaseSource    ||    hasZip64Extra(ae)&&    isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
357	[BUG]  [BUGGY]  if(isCrc  ||  hasZip64Extra(ae)&&  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(isCrc  ||  hasZip64Extra(ae)&&  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(isCrc  ||  hasZip64Extra(ae)&&  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)&&    isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
358	[BUG]  [BUGGY]  if(isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae)&&  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae)&&  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae)&&  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)&&    isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
359	[BUG]  [BUGGY]  if(is2PhaseSource  ||  hasZip64Extra(ae)&&  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID),  rawStream)  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  ||  hasZip64Extra(ae)&&  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID),  rawStream)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  ||  hasZip64Extra(ae)&&  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID),  rawStream)  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)&&    isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
360	[BUG]  [BUGGY]  if(isRemoteExtraField(ae)&&  hasZip64Extra(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(isRemoteExtraField(ae)&&  hasZip64Extra(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(isRemoteExtraField(ae)&&  hasZip64Extra(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)&&    isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
361	[BUG]  [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
362	[BUG]  [BUGGY]  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
363	[BUG]  [BUGGY]  if(hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
364	[BUG]  [BUGGY]  if(ae.hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
365	[BUG]  [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
366	[BUG]  [BUGGY]  if(hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
367	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
368	[BUG]  [BUGGY]  if(is2PhaseSource  ||  hasZip64Extra(ae)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  ||  hasZip64Extra(ae)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  ||  hasZip64Extra(ae)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
369	[BUG]  [BUGGY]  if(ae!=  null  ||  hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  ||  hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  ||  hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
370	[BUG]  [BUGGY]  if(is2PhaseSource  ||  hasZip64Extra(rawStream)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  is2PhaseSource))  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  ||  hasZip64Extra(rawStream)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  is2PhaseSource))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  ||  hasZip64Extra(rawStream)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  is2PhaseSource))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
371	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64Extra(ae)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
372	[BUG]  [BUGGY]  if(is2PhaseSource  ||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  ||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  ||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
373	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
374	[BUG]  [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
375	[BUG]  [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
376	[BUG]  [BUGGY]  if(ae!=  null  ||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  ||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  ||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
377	[BUG]  [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
378	[BUG]  [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
379	[BUG]  [BUGGY]  if(ae!=  null  &&  hasZip64Extra(is2PhaseSource))  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasZip64Extra(is2PhaseSource))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasZip64Extra(is2PhaseSource))  {	  if(ae!=    null    ||    hasZip64Extra(is2PhaseSource))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
380	[BUG]  [BUGGY]  if(is2PhaseSource!=  null  ||  hasZip64Extra(ae))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource!=  null  ||  hasZip64Extra(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource!=  null  ||  hasZip64Extra(ae))  {	  if(ae!=    null    ||    hasZip64Extra(is2PhaseSource))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
381	[BUG]  [BUGGY]  if(is2PhaseSource!=  null  &&  hasZip64Extra(is2PhaseSource))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource!=  null  &&  hasZip64Extra(is2PhaseSource))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource!=  null  &&  hasZip64Extra(is2PhaseSource))  {	  if(ae!=    null    ||    hasZip64Extra(is2PhaseSource))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
382	[BUG]  [BUGGY]  if(ae  ==  null  &&  hasZip64Extra(is2PhaseSource))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae  ==  null  &&  hasZip64Extra(is2PhaseSource))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae  ==  null  &&  hasZip64Extra(is2PhaseSource))  {	  if(ae!=    null    ||    hasZip64Extra(is2PhaseSource))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
383	[BUG]  [BUGGY]  if(is2PhaseSource  ==  null  ||  hasZip64Extra(ae))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  ==  null  ||  hasZip64Extra(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  ==  null  ||  hasZip64Extra(ae))  {	  if(ae!=    null    ||    hasZip64Extra(is2PhaseSource))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
384	[BUG]  [BUGGY]  if(ae!=  null  ||  hasZip64Extra(is2PhaseSource)&&  isCrc)  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  ||  hasZip64Extra(is2PhaseSource)&&  isCrc)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  ||  hasZip64Extra(is2PhaseSource)&&  isCrc)  {	  if(ae!=    null    ||    hasZip64Extra(is2PhaseSource))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
385	[BUG]  [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.toString());  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.toString());  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.toString());	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    entry);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
386	[BUG]  [BUGGY]  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  this);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  this);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  this);	  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
387	[BUG]  [BUGGY]  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  entry.getValue());  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  entry.getValue());  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  entry.getValue());	  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
388	[BUG]  [BUGGY]  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  entry.getVersion());  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  entry.getVersion());  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  entry.getVersion());	  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
389	[BUG]  [BUGGY]  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  entry.getCharset());  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  entry.getCharset());  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  entry.getCharset());	  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
390	[BUG]  [BUGGY]  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  entry.getEncoding());  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  entry.getEncoding());  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  entry.getEncoding());	  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
391	[BUG]  [BUGGY]  ae.addRawExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.addRawExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.addRawExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);	  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
392	[BUG]  [BUGGY]  if(hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
393	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64ExtraField(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64ExtraField(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64ExtraField(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
394	[BUG]  [BUGGY]  if(ae!=  null  &&  ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae))  {	  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
395	[BUG]  [BUGGY]  if(ae!=  null  ||  ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae))  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  ||  ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  ||  ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae))  {	  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
396	[BUG]  [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {	  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
397	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64Extra(ae)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
398	[BUG]  [BUGGY]  if(isCrc  ||  hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(isCrc  ||  hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(isCrc  ||  hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
399	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(e),  rawStream)  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(e),  rawStream)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(e),  rawStream)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(e))    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
400	[BUG]  [BUGGY]  if(entry!=  null)  {  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(entry!=  null)  {  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry);  }  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(entry!=  null)  {  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry);  }	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    entry);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
401	[BUG]  [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  file);  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  file);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  file);	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    entry);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
402	[BUG]  [BUGGY]  if(!hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
403	[BUG]  [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
404	[BUG]  [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
405	[BUG]  [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
406	[BUG]  [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
407	[BUG]  [BUGGY]  ae.setCompressedSize(0);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.setCompressedSize(0);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.setCompressedSize(0);	  ae.setCompressedSize(BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
408	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedFileExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedFileExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedFileExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(ae!=    null    &&    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
409	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
410	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
411	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
412	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID),  rawStream)  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID),  rawStream)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID),  rawStream)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
413	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64ExtendedInformationExtraField(ae),  rawStream)  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64ExtendedInformationExtraField(ae),  rawStream)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64ExtendedInformationExtraField(ae),  rawStream)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64ExtendedInformationExtraField(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
414	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER)&&  hasZip64ExtendedInformationExtraField(ae))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER)&&  hasZip64ExtendedInformationExtraField(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER)&&  hasZip64ExtendedInformationExtraField(ae))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64ExtendedInformationExtraField(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
415	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraFields(ae),  rawStream)  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraFields(ae),  rawStream)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraFields(ae),  rawStream)  {	  if(is2PhaseSource    &&    hasZip64ExtendedInformationExtraFields(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
416	[BUG]  [BUGGY]  if(hasZip64ExtendedInformationExtraFields(ae))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasZip64ExtendedInformationExtraFields(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasZip64ExtendedInformationExtraFields(ae))  {	  if(is2PhaseSource    &&    hasZip64ExtendedInformationExtraFields(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
417	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraFields(ae)||  zipEncoding!=  null)  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraFields(ae)||  zipEncoding!=  null)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraFields(ae)||  zipEncoding!=  null)  {	  if(is2PhaseSource    &&    hasZip64ExtendedInformationExtraFields(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
418	[BUG]  [BUGGY]  if(isZip64ExtendedInformationExtraField(ae)||  is2PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(isZip64ExtendedInformationExtraField(ae)||  is2PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(isZip64ExtendedInformationExtraField(ae)||  is2PhaseSource)  {	  if(hasZip64ExtendedInformationExtraField(ae)||    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
419	[BUG]  [BUGGY]  if(isZip64ExtendedInformationExtraField(ae)&&  is2PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(isZip64ExtendedInformationExtraField(ae)&&  is2PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(isZip64ExtendedInformationExtraField(ae)&&  is2PhaseSource)  {	  if(hasZip64ExtendedInformationExtraField(ae)||    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
420	[BUG]  [BUGGY]  if(hasZip64ExtendedInformationExtraField(ae)||  is2PhaseSource  ||  zipEncoding!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasZip64ExtendedInformationExtraField(ae)||  is2PhaseSource  ||  zipEncoding!=  null)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasZip64ExtendedInformationExtraField(ae)||  is2PhaseSource  ||  zipEncoding!=  null)  {	  if(hasZip64ExtendedInformationExtraField(ae)||    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
421	[BUG]  [BUGGY]  if(hasExtraField(ae)&&  hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(ae)&&  hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(ae)&&  hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasZip64ExtendedInformationExtraField(ae)&&    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
422	[BUG]  [BUGGY]  if(hasZip64ExtendedInformationExtraField(ae)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID),  rawStream)  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasZip64ExtendedInformationExtraField(ae)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID),  rawStream)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasZip64ExtendedInformationExtraField(ae)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID),  rawStream)  {	  if(hasZip64ExtendedInformationExtraField(ae)&&    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
423	[BUG]  [BUGGY]  ae.addRawEntry(Zip64ExtendedInformationExtraField.HEADER_ID);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.addRawEntry(Zip64ExtendedInformationExtraField.HEADER_ID);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.addRawEntry(Zip64ExtendedInformationExtraField.HEADER_ID);	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
424	[BUG]  [BUGGY]  ae.addRawEntry(Zip64ExtendedInformationExtraField.HEADER);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.addRawEntry(Zip64ExtendedInformationExtraField.HEADER);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.addRawEntry(Zip64ExtendedInformationExtraField.HEADER);	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
425	[BUG]  [BUGGY]  if(!isZip64ExtendedInformationExtraField(ae))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!isZip64ExtendedInformationExtraField(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!isZip64ExtendedInformationExtraField(ae))  {	  if(!hasZip64ExtendedInformationExtraField(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
426	[BUG]  [BUGGY]  ae.setCompressedSize(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.setCompressedSize(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.setCompressedSize(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE);	  ae.setCompressedSize(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
427	[BUG]  [BUGGY]  ae.setCompressedSize(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.setCompressedSize(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.setCompressedSize(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING);	  ae.setCompressedSize(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
428	[BUG]  [BUGGY]  ae.setSize(Zip64ExtendedInformationExtraField.HEADER_ID);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.setSize(Zip64ExtendedInformationExtraField.HEADER_ID);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.setSize(Zip64ExtendedInformationExtraField.HEADER_ID);	  ae.setCompressedSize(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
429	[BUG]  [BUGGY]  if(isExtendedInformationExtraField.HEADER_ID  ||  hasZip64Extra(ae)||  is2PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(isExtendedInformationExtraField.HEADER_ID  ||  hasZip64Extra(ae)||  is2PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(isExtendedInformationExtraField.HEADER_ID  ||  hasZip64Extra(ae)||  is2PhaseSource)  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)||    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
430	[BUG]  [BUGGY]  if(ae!=  null  &&  ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae))  {	  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
431	[BUG]  [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
432	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasZip64ExtendedInformationExtraField(entry)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
433	[BUG]  [BUGGY]  if(hasExtraField(zip64Mode)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(zip64Mode)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(zip64Mode)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasZip64ExtendedInformationExtraField(entry)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
434	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
435	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID),  rawStream)  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID),  rawStream)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID),  rawStream)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
436	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(ae),  rawStream)  {  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(ae),  rawStream)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(ae),  rawStream)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64ExtendedInformationExtraField(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
437	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64ExtendedInformationExtraField(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
438	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(rawStream,  is2))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(rawStream,  is2))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64Extra(rawStream,  is2))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
439	[BUG]  [BUGGY]  if(!is2PhaseSource  &&  hasZip64Extra(rawStream,  is2PhaseSource))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!is2PhaseSource  &&  hasZip64Extra(rawStream,  is2PhaseSource))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!is2PhaseSource  &&  hasZip64Extra(rawStream,  is2PhaseSource))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
440	[BUG]  [BUGGY]  if(hasZip64Extra(ae,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasZip64Extra(ae,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasZip64Extra(ae,  rawStream))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
441	[BUG]  [BUGGY]  if(isCrc  &&  hasZip64Extra(ae,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(isCrc  &&  hasZip64Extra(ae,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(isCrc  &&  hasZip64Extra(ae,  rawStream))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
442	[BUG]  [BUGGY]  if(ae!=  null  ||  ae.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  ||  ae.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)!=  null)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  ||  ae.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)!=  null)  {	  if(ae!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
443	[BUG]  [BUGGY]  if(ae!=  null  ||  ae.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  ||  ae.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  ==  null)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  ||  ae.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  ==  null)  {	  if(ae!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
444	[BUG]  [BUGGY]  if(ae!=  null  ||  ae.getExtraField()  ==  ZipArchiveEntry.HEADER_ID)  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  ||  ae.getExtraField()  ==  ZipArchiveEntry.HEADER_ID)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  ||  ae.getExtraField()  ==  ZipArchiveEntry.HEADER_ID)  {	  if(ae!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
445	[BUG]  [BUGGY]  if(!isExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!isExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!isExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae))  {	  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
446	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasZip64ExtendedInformationExtraField(ae)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
447	[BUG]  [BUGGY]  if(hasZip64ExtendedInformationExtraField(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID),  rawStream)  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasZip64ExtendedInformationExtraField(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID),  rawStream)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasZip64ExtendedInformationExtraField(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID),  rawStream)  {	  if(hasZip64ExtendedInformationExtraField(ae)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
448	[BUG]  [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
449	[BUG]  [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
450	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(rawStream),  ae)  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(rawStream),  ae)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(rawStream),  ae)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64Extra(ae),    rawStream)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
451	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae),  stream)  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae),  stream)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae),  stream)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64Extra(ae),    rawStream)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
452	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(entry))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(entry))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(entry))  {	  if(ae!=    null    &&    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
453	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae,  rawStream))  {	  if(ae!=    null    &&    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
454	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(rawStream,  entry))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(rawStream,  entry))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(rawStream,  entry))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
455	[BUG]  [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(rawStream,  ae))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(rawStream,  ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(rawStream,  ae))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
456	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  is1PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  is1PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  is1PhaseSource)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
457	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isCrc)  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isCrc)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isCrc)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
458	[BUG]  [BUGGY]  if(ae!=  null  &&  is2PhaseSource  &&  hasZip64ExtendedInformationExtraField(ae))  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  is2PhaseSource  &&  hasZip64ExtendedInformationExtraField(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  is2PhaseSource  &&  hasZip64ExtendedInformationExtraField(ae))  {	  if(is2PhaseSource    &&    hasZip64ExtendedInformationExtraField(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
459	[BUG]  [BUGGY]  if(ae!=  null  ||  is2PhaseSource  ||  hasZip64ExtendedInformationExtraField(ae))  {  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  ||  is2PhaseSource  ||  hasZip64ExtendedInformationExtraField(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  ||  is2PhaseSource  ||  hasZip64ExtendedInformationExtraField(ae))  {	  if(is2PhaseSource    ||    hasZip64ExtendedInformationExtraField(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
460	[BUG]  [BUGGY]  if(isCrc  ||  hasZip64ExtendedInformationExtraField(ae))  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(isCrc  ||  hasZip64ExtendedInformationExtraField(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(isCrc  ||  hasZip64ExtendedInformationExtraField(ae))  {	  if(is2PhaseSource    ||    hasZip64ExtendedInformationExtraField(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
461	[BUG]  [BUGGY]  if(ae!=  null  &&  is2PhaseSource  &&  hasZip64ExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  is2PhaseSource  &&  hasZip64ExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  is2PhaseSource  &&  hasZip64ExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(ae!=    null    &&    is2PhaseSource    ||    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
462	[BUG]  [BUGGY]  ae.addRawEntry(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.addRawEntry(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.addRawEntry(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
463	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae.getEntry()))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae.getEntry()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64Extra(ae.getEntry()))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae.getCompressedSize()))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
464	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae.getLowerCrc()))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae.getLowerCrc()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64Extra(ae.getLowerCrc()))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae.getCompressedSize()))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
465	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraField(rawStream))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraField(rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraField(rawStream))  {	  if(is2PhaseSource    &&    hasZip64Extra(entry))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
466	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraFields(rawStream))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraFields(rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraFields(rawStream))  {	  if(is2PhaseSource    &&    hasZip64Extra(entry))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
467	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae  >=  null)  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae  >=  null)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae  >=  null)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    ae!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
468	[BUG]  [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae  ==  null)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae  ==  null)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    ae!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
469	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasCrcExtra(ae))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasCrcExtra(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasCrcExtra(ae))  {	  if(ae!=    null    &&    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
470	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip32Extra(ae))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip32Extra(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip32Extra(ae))  {	  if(ae!=    null    &&    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
471	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae.getMethod()))  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae.getMethod()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64Extra(ae.getMethod()))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae.getCrc()))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
472	[BUG]  [BUGGY]  if(rawStream!=  null)  {  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(rawStream!=  null)  {  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);  }  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(rawStream!=  null)  {  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);  }	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
473	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(rawStream,  entry))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(rawStream,  entry))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(rawStream,  entry))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64Extra(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
474	[BUG]  [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
475	[BUG]  [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
476	[BUG]  [BUGGY]  if(ae!=  null  ||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  ||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  ||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
477	[BUG]  [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
478	[BUG]  [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
479	[BUG]  [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID),  rawStream)  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID),  rawStream)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID),  rawStream)  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
480	[BUG]  [BUGGY]  if(isRemoteExtraField  ||  hasZip64Extra(ae)||  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(isRemoteExtraField  ||  hasZip64Extra(ae)||  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(isRemoteExtraField  ||  hasZip64Extra(ae)||  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)||    isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
481	[BUG]  [BUGGY]  if(isCrc  ||  hasZip64Extra(ae)||  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(isCrc  ||  hasZip64Extra(ae)||  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(isCrc  ||  hasZip64Extra(ae)||  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)||    isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
482	[BUG]  [BUGGY]  if(is2PhaseSource  ||  hasZip64Extra(ae)||  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID),  rawStream)  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  ||  hasZip64Extra(ae)||  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID),  rawStream)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  ||  hasZip64Extra(ae)||  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID),  rawStream)  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)||    isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
483	[BUG]  [BUGGY]  if(ae!=  null  ||  ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  ||  ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  ||  ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
484	[BUG]  [BUGGY]  if(ae  ==  null  &&  ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae  ==  null  &&  ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae  ==  null  &&  ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
485	[BUG]  [BUGGY]  if(isRemoteExtraField  ||  hasZip64Extra(ae)&&  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(isRemoteExtraField  ||  hasZip64Extra(ae)&&  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(isRemoteExtraField  ||  hasZip64Extra(ae)&&  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)&&    isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
486	[BUG]  [BUGGY]  if(is2PhaseSource  ||  isRemoteExtraField(ae)&&  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  ||  isRemoteExtraField(ae)&&  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  ||  isRemoteExtraField(ae)&&  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)&&    isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
487	[BUG]  [BUGGY]  if(is2PhaseSource  ||  hasZip64Extra(ae)&&  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  ||  hasZip64Extra(ae)&&  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  ||  hasZip64Extra(ae)&&  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)&&    isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
488	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(rawStream))  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(rawStream))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64ExtendedInformationExtraField(entry))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
489	[BUG]  [BUGGY]  ae.addRawField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.addRawField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.addRawField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);	  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
490	[BUG]  [BUGGY]  ae.addRawAccessField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.addRawAccessField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.addRawAccessField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);	  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
491	[BUG]  [BUGGY]  ae.addRawInformation(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.addRawInformation(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.addRawInformation(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);	  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
492	[BUG]  [BUGGY]  ae.addRaw(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.addRaw(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.addRaw(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);	  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
493	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(rawStream,  zipEncoding))  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(rawStream,  zipEncoding))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(rawStream,  zipEncoding))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae,    zipEncoding))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
494	[BUG]  [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {	  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
495	[BUG]  [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae!=  null)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae!=  null)  {	  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
496	[BUG]  [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID),  rawStream)  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID),  rawStream)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID),  rawStream)  {	  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
497	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(rawStream),  ae)  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(rawStream),  ae)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(rawStream),  ae)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae),    rawStream)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
498	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(rawStream))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(rawStream))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae),    rawStream)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
499	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
500	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_TYPE)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_TYPE)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_TYPE)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
501	[BUG]  [BUGGY]  if(isCrc  ||  hasZip64Extra(ae,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(isCrc  ||  hasZip64Extra(ae,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(isCrc  ||  hasZip64Extra(ae,  rawStream))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
502	[BUG]  [BUGGY]  if(is2PhaseSource  ||  hasZip64Extra(rawStream,  is2))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  ||  hasZip64Extra(rawStream,  is2))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  ||  hasZip64Extra(rawStream,  is2))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
503	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER)&&  hasZip64Extra(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER)&&  hasZip64Extra(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER)&&  hasZip64Extra(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER)&&    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
504	[BUG]  [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
505	[BUG]  [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)&&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
506	[BUG]  [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
507	[BUG]  [BUGGY]  if(is2PhaseSource  ||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream)  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  ||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream)  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  ||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream)	  if(is2PhaseSource    ||    hasZip64Extra(ae)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
508	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
509	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
510	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING),  rawStream)  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING),  rawStream)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING),  rawStream)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
511	[BUG]  [BUGGY]  if(ae!=  null  &&  is2PhaseSource  &&  hasZip64Extra(ae,  true))  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  is2PhaseSource  &&  hasZip64Extra(ae,  true))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  is2PhaseSource  &&  hasZip64Extra(ae,  true))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae,    true))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
512	[BUG]  [BUGGY]  if(!is2PhaseSource  &&  hasZip64Extra(ae,  false))  {  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!is2PhaseSource  &&  hasZip64Extra(ae,  false))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!is2PhaseSource  &&  hasZip64Extra(ae,  false))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae,    true))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
513	[BUG]  [BUGGY]  if(hasZip64Extra(ae,  true))  {  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasZip64Extra(ae,  true))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasZip64Extra(ae,  true))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae,    true))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
514	[BUG]  [BUGGY]  ae.setExtraField(Zip64ExtendedInformationExtraField.HEADER_ID  +  1);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.setExtraField(Zip64ExtendedInformationExtraField.HEADER_ID  +  1);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.setExtraField(Zip64ExtendedInformationExtraField.HEADER_ID  +  1);	  ae.setExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
515	[BUG]  [BUGGY]  ae.setExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.setExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.setExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID);	  ae.setExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
516	[BUG]  [BUGGY]  ae.setExtraField(Zip64ExtendedInformationExtraField.HEADER);  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.setExtraField(Zip64ExtendedInformationExtraField.HEADER);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.setExtraField(Zip64ExtendedInformationExtraField.HEADER);	  ae.setExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
517	[BUG]  [BUGGY]  if(entry!=  null)  {  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue());  }  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(entry!=  null)  {  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue());  }  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(entry!=  null)  {  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue());  }	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    entry.getValue());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
518	[BUG]  [BUGGY]  if(ae!=  null  ||!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae))  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  ||!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  ||!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae))  {	  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
519	[BUG]  [BUGGY]  if(hasZip64ExtendedInformationExtraField(ae,  rawStream)&&  hasZip64ExtendedInformationExtraField(entry,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasZip64ExtendedInformationExtraField(ae,  rawStream)&&  hasZip64ExtendedInformationExtraField(entry,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasZip64ExtendedInformationExtraField(ae,  rawStream)&&  hasZip64ExtendedInformationExtraField(entry,  rawStream))  {	  if(hasZip64ExtendedInformationExtraField(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
520	[BUG]  [BUGGY]  if(hasZip64ExtendedInformationExtraField(ae,  rawStream)||  hasCrcExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasZip64ExtendedInformationExtraField(ae,  rawStream)||  hasCrcExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasZip64ExtendedInformationExtraField(ae,  rawStream)||  hasCrcExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasZip64ExtendedInformationExtraField(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
521	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
522	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
523	[BUG]  [BUGGY]  if(ae!=  null  &&  hasZip64Extra(ae)||  is2PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasZip64Extra(ae)||  is2PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasZip64Extra(ae)||  is2PhaseSource)  {	  if(is2PhaseSource    &&    hasZip64Extra(ae)||    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
524	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae)||  is4PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae)||  is4PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64Extra(ae)||  is4PhaseSource)  {	  if(is2PhaseSource    &&    hasZip64Extra(ae)||    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
525	[BUG]  [BUGGY]  if(hasZip64Extra(ae)||  is2PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasZip64Extra(ae)||  is2PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasZip64Extra(ae)||  is2PhaseSource)  {	  if(is2PhaseSource    &&    hasZip64Extra(ae)||    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
526	[BUG]  [BUGGY]  if(ae!=  null  ||  ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  ||  ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  ||  ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
527	[BUG]  [BUGGY]  if(ae  ==  null  &&  ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae  ==  null  &&  ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae  ==  null  &&  ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
528	[BUG]  [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||!ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||!ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||!ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
529	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
530	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
531	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR,  rawStream))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
532	[BUG]  [BUGGY]  if(ae!=  null  ||  hasZip64ExtendedInformationExtraField(entry))  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  ||  hasZip64ExtendedInformationExtraField(entry))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  ||  hasZip64ExtendedInformationExtraField(entry))  {	  if(ae!=    null    ||    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
533	[BUG]  [BUGGY]  if(ae!=  null  ||  hasZip64ExtendedInformationExtraField(rawStream))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  ||  hasZip64ExtendedInformationExtraField(rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  ||  hasZip64ExtendedInformationExtraField(rawStream))  {	  if(ae!=    null    ||    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
534	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER)&&  hasZip64Extra(ae)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER)&&  hasZip64Extra(ae)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER)&&  hasZip64Extra(ae)&&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64Extra(ae)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
535	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING),  rawStream)  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING),  rawStream)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING),  rawStream)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
536	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING,  rawStream))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
537	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64ExtendedInformationExtraField(rawStream))  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64ExtendedInformationExtraField(rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64ExtendedInformationExtraField(rawStream))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64ExtendedInformationExtraField(entry))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
538	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64ExtendedInformationExtraField(entry,  zipEncoding))  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64ExtendedInformationExtraField(entry,  zipEncoding))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64ExtendedInformationExtraField(entry,  zipEncoding))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64ExtendedInformationExtraField(entry))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
539	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae)||  isCrc)  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae)||  isCrc)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae)||  isCrc)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae)||    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
540	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae)||  isResource)  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae)||  isResource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae)||  isResource)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae)||    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
541	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae!=  null)  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae!=  null)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae!=  null)  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    ae!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
542	[BUG]  [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae  ==  null)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae  ==  null)  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    ae!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
543	[BUG]  [BUGGY]  if(hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae!=  null)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae!=  null)  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    ae!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
544	[BUG]  [BUGGY]  if(!hasZip64ExtendedInformationExtraField(entry.getName()))  {  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasZip64ExtendedInformationExtraField(entry.getName()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasZip64ExtendedInformationExtraField(entry.getName()))  {	  if(hasZip64ExtendedInformationExtraField(entry.getName()))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
545	[BUG]  [BUGGY]  if(hasZip64ExtendedInformationExtraField(entry.getName())||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasZip64ExtendedInformationExtraField(entry.getName())||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasZip64ExtendedInformationExtraField(entry.getName())||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasZip64ExtendedInformationExtraField(entry.getName()))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
546	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(e)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(e)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(e)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(e))    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
547	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(e))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(e))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(e))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(e))    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
548	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  is2PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  is2PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  is2PhaseSource)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
549	[BUG]  [BUGGY]  if(isCrc  ||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  is2PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(isCrc  ||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  is2PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(isCrc  ||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  is2PhaseSource)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
550	[BUG]  [BUGGY]  if(ae!=  null  &&  is2PhaseSource  &&  hasZip64Extra(ae,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  is2PhaseSource  &&  hasZip64Extra(ae,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  is2PhaseSource  &&  hasZip64Extra(ae,  rawStream))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
551	[BUG]  [BUGGY]  if(ae!=  null  &&  hasZip64Extra(rawStream,  is2PhaseSource))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasZip64Extra(rawStream,  is2PhaseSource))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasZip64Extra(rawStream,  is2PhaseSource))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
552	[BUG]  [BUGGY]  if(ae!=  null  &&  is2PhaseSource  &&  hasZip64Extra(rawStream,  is2PhaseSource))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  is2PhaseSource  &&  hasZip64Extra(rawStream,  is2PhaseSource))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  is2PhaseSource  &&  hasZip64Extra(rawStream,  is2PhaseSource))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
553	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
554	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(entry.getName()))  {  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(entry.getName()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(entry.getName()))  {	  if(hasZip64ExtendedInformationExtraField(entry.getName()))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
555	[BUG]  [BUGGY]  if(hasZip64ExtendedInformationExtraField(entry.getName()  +  comment))  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasZip64ExtendedInformationExtraField(entry.getName()  +  comment))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasZip64ExtendedInformationExtraField(entry.getName()  +  comment))  {	  if(hasZip64ExtendedInformationExtraField(entry.getName()))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
556	[BUG]  [BUGGY]  if(ae  ==  null  ||  is2PhaseSource  ||  hasZip64Extra(ae))  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae  ==  null  ||  is2PhaseSource  ||  hasZip64Extra(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae  ==  null  ||  is2PhaseSource  ||  hasZip64Extra(ae))  {	  if(ae!=    null    ||    is2PhaseSource    ||    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
557	[BUG]  [BUGGY]  if(ae!=  null  &&  entry.getMethod()  ==  ZipArchiveEntry.HEADER_ID)  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  entry.getMethod()  ==  ZipArchiveEntry.HEADER_ID)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  entry.getMethod()  ==  ZipArchiveEntry.HEADER_ID)  {	  if(ae!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
558	[BUG]  [BUGGY]  if(ae!=  null  &&  ae.getCompressedSize()  ==  ArchiveEntry.HEADER_ID)  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  ae.getCompressedSize()  ==  ArchiveEntry.HEADER_ID)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  ae.getCompressedSize()  ==  ArchiveEntry.HEADER_ID)  {	  if(ae!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
559	[BUG]  [BUGGY]  if(ae!=  null  &&  ae.getCompressedSize()  >  ArchiveEntry.HEADER_ID)  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  ae.getCompressedSize()  >  ArchiveEntry.HEADER_ID)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  ae.getCompressedSize()  >  ArchiveEntry.HEADER_ID)  {	  if(ae!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
560	[BUG]  [BUGGY]  if(ae!=  null  &&  ae.getCompressedSize()  >=  ArchiveEntry.HEADER_ID)  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  ae.getCompressedSize()  >=  ArchiveEntry.HEADER_ID)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  ae.getCompressedSize()  >=  ArchiveEntry.HEADER_ID)  {	  if(ae!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
561	[BUG]  [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  input);  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  input);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  input);	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    entry);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
562	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae)||  is2PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae)||  is2PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae)||  is2PhaseSource)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae)||    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
563	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae)&&  is2PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae)&&  is2PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae)&&  is2PhaseSource)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae)||    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
564	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING,  DEFAULT_ENCODING))  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING,  DEFAULT_ENCODING))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING,  DEFAULT_ENCODING))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
565	[BUG]  [BUGGY]  if(hasZip64ExtendedInformationExtraField(entry)&&  is2PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasZip64ExtendedInformationExtraField(entry)&&  is2PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasZip64ExtendedInformationExtraField(entry)&&  is2PhaseSource)  {	  if(hasZip64ExtendedInformationExtraField(ae)||    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
566	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae,  rawStream)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae,  rawStream)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae,  rawStream)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
567	[BUG]  [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(entry,  zip64Mode))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(entry,  zip64Mode))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(entry,  zip64Mode))  {	  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
568	[BUG]  [BUGGY]  if(ae!=  null  &&  is2PhaseSource  ||  hasZip64Extra(ae)||  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  is2PhaseSource  ||  hasZip64Extra(ae)||  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  is2PhaseSource  ||  hasZip64Extra(ae)||  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)||    isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
569	[BUG]  [BUGGY]  if(is2PhaseSource  ||  isRemoteExtraField(ae)||  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  ||  isRemoteExtraField(ae)||  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  ||  isRemoteExtraField(ae)||  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)||    isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
570	[BUG]  [BUGGY]  if(ae!=  null  &&  hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
571	[BUG]  [BUGGY]  if(is2PhaseSource  ||  hasZip64ExtraField(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  ||  hasZip64ExtraField(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  ||  hasZip64ExtraField(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
572	[BUG]  [BUGGY]  if(is2PhaseSource  ||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  is2PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  ||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  is2PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  ||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  is2PhaseSource)  {	  if(is2PhaseSource    &&    hasZip64Extra(ae)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
573	[BUG]  [BUGGY]  if(hasExtendedInformationExtraField(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtendedInformationExtraField(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtendedInformationExtraField(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
574	[BUG]  [BUGGY]  ae.setExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getName());  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.setExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getName());  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.setExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getName());	  ae.setExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
575	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraField(ae.getCompressedSize()))  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraField(ae.getCompressedSize()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraField(ae.getCompressedSize()))  {	  if(is2PhaseSource    &&    hasZip64ExtendedInformationExtraField(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
576	[BUG]  [BUGGY]  if(ae!=  null  &&  hasZip64ExtendedInformationExtraField(ae))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasZip64ExtendedInformationExtraField(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasZip64ExtendedInformationExtraField(ae))  {	  if(is2PhaseSource    &&    hasZip64ExtendedInformationExtraField(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
577	[BUG]  [BUGGY]  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae!=  null)  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae!=  null)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae!=  null)  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    ae!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
578	[BUG]  [BUGGY]  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  DEFAULT_ENCODING);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  DEFAULT_ENCODING);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  DEFAULT_ENCODING);	  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
579	[BUG]  [BUGGY]  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  input);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  input);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  input);	  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
580	[BUG]  [BUGGY]  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  zipStream);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  zipStream);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  zipStream);	  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
581	[BUG]  [BUGGY]  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);	  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
582	[BUG]  [BUGGY]  if(ae!=  null  &&  is2PhaseSource  ||  hasZip64ExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  is2PhaseSource  ||  hasZip64ExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  is2PhaseSource  ||  hasZip64ExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(ae!=    null    &&    is2PhaseSource    ||    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
583	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(e))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(e))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(e))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64ExtendedInformationExtraField(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
584	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64ExtendedInformationExtraField(ae))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64ExtendedInformationExtraField(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64ExtendedInformationExtraField(ae))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64ExtendedInformationExtraField(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
585	[BUG]  [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64ExtendedInformationExtraField(ae))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64ExtendedInformationExtraField(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64ExtendedInformationExtraField(ae))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64ExtendedInformationExtraField(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
586	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
587	[BUG]  [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&!hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&!hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&!hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
588	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae))  {	  if(ae!=    null    &&    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
589	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae),  rawStream)  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae),  rawStream)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae),  rawStream)  {	  if(ae!=    null    &&    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
590	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HE  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HE  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae)||  hasExtraField(Zip64ExtendedInformationExtraField.HE	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
591	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
592	[BUG]  [BUGGY]  if(hasZip64ExtendedInformationExtraField(ae,  rawStream)&&  is2PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasZip64ExtendedInformationExtraField(ae,  rawStream)&&  is2PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasZip64ExtendedInformationExtraField(ae,  rawStream)&&  is2PhaseSource)  {	  if(hasZip64ExtendedInformationExtraField(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
593	[BUG]  [BUGGY]  if(ae!=  null  &&  is2PhaseSource  ||  hasZip64ExtendedInformationExtraField(ae))  {  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  is2PhaseSource  ||  hasZip64ExtendedInformationExtraField(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  is2PhaseSource  ||  hasZip64ExtendedInformationExtraField(ae))  {	  if(is2PhaseSource    ||    hasZip64ExtendedInformationExtraField(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
594	[BUG]  [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  zipStream);  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  zipStream);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  zipStream);	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
595	[BUG]  [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getSize());  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getSize());  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getSize());	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    entry.getValue());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
596	[BUG]  [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getLastChild());  [CE]  illegal  start  of  expression  [FE]                                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getLastChild());  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getLastChild());	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    entry.getValue());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
597	[BUG]  [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getString());  [CE]  illegal  start  of  expression  [FE]                                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getString());  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getString());	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    entry.getValue());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
598	[BUG]  [BUGGY]  if(ae!=  null  &&  is2PhaseSource  ||  hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  is2PhaseSource  ||  hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  is2PhaseSource  ||  hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
599	[BUG]  [BUGGY]  if(is2PhaseSource  ||  hasExtendedInformationExtraField(entry)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  ||  hasExtendedInformationExtraField(entry)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  ||  hasExtendedInformationExtraField(entry)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
600	[BUG]  [BUGGY]  if(is2PhaseSource  ||  hasExtendedInformationExtraField(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  ||  hasExtendedInformationExtraField(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  ||  hasExtendedInformationExtraField(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
601	[BUG]  [BUGGY]  if(ae!=  null  &&  hasZip64Extra(entry))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasZip64Extra(entry))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasZip64Extra(entry))  {	  if(is2PhaseSource    &&    hasZip64Extra(entry))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
602	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(entry.getMethod()))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(entry.getMethod()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64Extra(entry.getMethod()))  {	  if(is2PhaseSource    &&    hasZip64Extra(entry))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
603	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
604	[BUG]  [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
605	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasZip64ExtendedInformationExtraField(ae)&&    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
606	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae),  rawStream)  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae),  rawStream)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae),  rawStream)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64Extra(ae),    rawStream)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
607	[BUG]  [BUGGY]  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID  +  1);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID  +  1);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID  +  1);	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
608	[BUG]  [BUGGY]  if(ae!=  null  &&  is2PhaseSource  &&  hasZip64ExtendedInformationExtraFields(ae))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  is2PhaseSource  &&  hasZip64ExtendedInformationExtraFields(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  is2PhaseSource  &&  hasZip64ExtendedInformationExtraFields(ae))  {	  if(is2PhaseSource    &&    hasZip64ExtendedInformationExtraFields(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
609	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraFields(ae.getCompressedSize()))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraFields(ae.getCompressedSize()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraFields(ae.getCompressedSize()))  {	  if(is2PhaseSource    &&    hasZip64ExtendedInformationExtraFields(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
610	[BUG]  [BUGGY]  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER);	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
611	[BUG]  [BUGGY]  if(ae  ==  null  ||  hasZip64Extra(ae))  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae  ==  null  ||  hasZip64Extra(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae  ==  null  ||  hasZip64Extra(ae))  {	  if(ae!=    null    ||    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
612	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(ae))  {  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64ExtendedInformationExtraField(ae))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64ExtendedInformationExtraField(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
613	[BUG]  [BUGGY]  if(ae!=  null  &&  is2PhaseSource  &&  hasZip64Extra(ae)||  is2PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  is2PhaseSource  &&  hasZip64Extra(ae)||  is2PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  is2PhaseSource  &&  hasZip64Extra(ae)||  is2PhaseSource)  {	  if(is2PhaseSource    &&    hasZip64Extra(ae)||    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
614	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae)&&  is2PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae)&&  is2PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64Extra(ae)&&  is2PhaseSource)  {	  if(is2PhaseSource    &&    hasZip64Extra(ae)||    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
615	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae!=  null  ||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae!=  null  ||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae!=  null  ||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    ae!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
616	[BUG]  [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae!=  null)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae!=  null)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    ae!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
617	[BUG]  [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {	  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
618	[BUG]  [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {	  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
619	[BUG]  [BUGGY]  if(ae!=  null  &&  is2PhaseSource  &&  hasZip64Extra(ae.getCompressedSize()))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  is2PhaseSource  &&  hasZip64Extra(ae.getCompressedSize()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  is2PhaseSource  &&  hasZip64Extra(ae.getCompressedSize()))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae.getCompressedSize()))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
620	[BUG]  [BUGGY]  if(ae!=  null  &&  hasZip64Extra(ae.getCompressedSize()))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasZip64Extra(ae.getCompressedSize()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasZip64Extra(ae.getCompressedSize()))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae.getCompressedSize()))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
621	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae,  entry.getCompressedSize()))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64Extra(ae,  entry.getCompressedSize()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64Extra(ae,  entry.getCompressedSize()))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae.getCompressedSize()))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
622	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
623	[BUG]  [BUGGY]  if(is2PhaseSource  ||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  ||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  ||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
624	[BUG]  [BUGGY]  if(ae!=  null  &&!is2PhaseSource  &&  hasZip64Extra(ae))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&!is2PhaseSource  &&  hasZip64Extra(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&!is2PhaseSource  &&  hasZip64Extra(ae))  {	  if(!is2PhaseSource    &&    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
625	[BUG]  [BUGGY]  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getName());  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getName());  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getName());	  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
626	[BUG]  [BUGGY]  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue());  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue());  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue());	  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
627	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
628	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID)  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID)  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
629	[BUG]  [BUGGY]  if(ae!=  null  &&  is2PhaseSource  ||  hasZip64Extra(ae)||  is2PhaseSource)  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  is2PhaseSource  ||  hasZip64Extra(ae)||  is2PhaseSource)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  is2PhaseSource  ||  hasZip64Extra(ae)||  is2PhaseSource)  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)||    is2PhaseSource)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
630	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(ae!=    null    &&    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
631	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64Extra(ae))  {	  if(ae!=    null    &&    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
632	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID),  rawStream)  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID),  rawStream)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID),  rawStream)  {	  if(ae!=    null    &&    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
633	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraFields(ae))  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraFields(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraFields(ae))  {	  if(ae!=    null    &&    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
634	[BUG]  [BUGGY]  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {	  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
635	[BUG]  [BUGGY]  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID	  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
636	[BUG]  [BUGGY]  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae.hasExtendedInformationExtraField())  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae.hasExtendedInformationExtraField())  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae.hasExtendedInformationExtraField())  {	  if(ae.hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
637	[BUG]  [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasZip64ExtendedInformationExtraField(ae)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
638	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae,  entry))  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae,  entry))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae,  entry))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae,    zipEncoding))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
639	[BUG]  [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae,  new  ZipEncoding()))  {  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae,  new  ZipEncoding()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae,  new  ZipEncoding()))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&    hasZip64Extra(ae,    zipEncoding))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
640	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
641	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtendedInformationExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtendedInformationExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtendedInformationExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(ae!=    null    &&    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
642	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtendedOutformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtendedOutformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtendedOutformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(ae!=    null    &&    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
643	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID),  rawStream);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID),  rawStream);  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID),  rawStream);	  if(ae!=    null    &&    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
644	[BUG]  [BUGGY]  if(ae!=  null  &&  hasZip64Extra(ae,  true))  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasZip64Extra(ae,  true))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasZip64Extra(ae,  true))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae,    true))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
645	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
646	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER)&&  hasZip64Extra(ae))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER)&&  hasZip64Extra(ae))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER)&&  hasZip64Extra(ae))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER)&&    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
647	[BUG]  [BUGGY]  if(ae!=  null  &&  is2PhaseSource  &&  hasZip64Extra(entry.getMethod()))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  is2PhaseSource  &&  hasZip64Extra(entry.getMethod()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  is2PhaseSource  &&  hasZip64Extra(entry.getMethod()))  {	  if(ae!=    null    &&    is2PhaseSource    &&    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
648	[BUG]  [BUGGY]  if(ae!=  null  &&  is2PhaseSource  &&  hasZip64Extra(extern))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  is2PhaseSource  &&  hasZip64Extra(extern))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  is2PhaseSource  &&  hasZip64Extra(extern))  {	  if(ae!=    null    &&    is2PhaseSource    &&    hasZip64Extra(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
649	[BUG]  [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae.hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  hasZip64Extra(ae,  rawStream))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64Extra(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
650	[BUG]  [BUGGY]  if(ae  ==  null  ||  hasZip64Extra(is2PhaseSource))  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae  ==  null  ||  hasZip64Extra(is2PhaseSource))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae  ==  null  ||  hasZip64Extra(is2PhaseSource))  {	  if(ae!=    null    ||    hasZip64Extra(is2PhaseSource))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
651	[BUG]  [BUGGY]  if(is2PhaseSource  ||  hasExtendedInformationExtraField(entry)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  ||  hasExtendedInformationExtraField(entry)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  ||  hasExtendedInformationExtraField(entry)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
652	[BUG]  [BUGGY]  if(ae!=  null  &&  is2PhaseSource  ||  hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  is2PhaseSource  ||  hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  is2PhaseSource  ||  hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
653	[BUG]  [BUGGY]  if(ae!=  null  &&  hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasZip64Extra(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
654	[BUG]  [BUGGY]  if(is2PhaseSource  ||  hasExtendedInformationExtraField(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  ||  hasExtendedInformationExtraField(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  ||  hasExtendedInformationExtraField(ae)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
655	[BUG]  [BUGGY]  if(ae!=  null  &&  is2PhaseSource  &&  hasZip64Extra(ae.getCrc()))  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  is2PhaseSource  &&  hasZip64Extra(ae.getCrc()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  is2PhaseSource  &&  hasZip64Extra(ae.getCrc()))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae.getCrc()))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
656	[BUG]  [BUGGY]  if(ae!=  null  &&  hasZip64Extra(ae.getCrc()))  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasZip64Extra(ae.getCrc()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasZip64Extra(ae.getCrc()))  {	  if(is2PhaseSource    &&    hasZip64Extra(ae.getCrc()))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
657	[BUG]  [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {	  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
658	[BUG]  [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN)  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN)  {	  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
659	[BUG]  [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {	  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
660	[BUG]  [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN)  {  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN)  {	  if(!hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
661	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64ExtendedInformationExtraField(entry))  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64ExtendedInformationExtraField(entry))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasZip64ExtendedInformationExtraField(entry))  {	  if(hasExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasZip64ExtendedInformationExtraField(entry))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
662	[BUG]  [BUGGY]  if(!is2PhaseSource  &&!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!is2PhaseSource  &&!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!is2PhaseSource  &&!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
663	[BUG]  [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN)  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN)  {	  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
664	[BUG]  [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {	  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
665	[BUG]  [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN)  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN)  {	  if(!hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
666	[BUG]  [BUGGY]  if(ae!=  null  &&  is2PhaseSource  ||  hasZip64Extra(ae,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  is2PhaseSource  ||  hasZip64Extra(ae,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  is2PhaseSource  ||  hasZip64Extra(ae,  rawStream))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
667	[BUG]  [BUGGY]  if(ae!=  null  &&  hasZip64Extra(ae,  rawStream))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasZip64Extra(ae,  rawStream))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasZip64Extra(ae,  rawStream))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
668	[BUG]  [BUGGY]  if(is2PhaseSource  ||  hasZip64Extra(ae,  rawStream.getChars()))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  ||  hasZip64Extra(ae,  rawStream.getChars()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  ||  hasZip64Extra(ae,  rawStream.getChars()))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae,    rawStream))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
669	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
670	[BUG]  [BUGGY]  if(ae!=  null  &&  hasZip64ExtendedInformationExtraField(entry))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasZip64ExtendedInformationExtraField(entry))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasZip64ExtendedInformationExtraField(entry))  {	  if(is2PhaseSource    &&    hasZip64ExtendedInformationExtraField(entry))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
671	[BUG]  [BUGGY]  if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraField(entry.getMethod()))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraField(entry.getMethod()))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  &&  hasZip64ExtendedInformationExtraField(entry.getMethod()))  {	  if(is2PhaseSource    &&    hasZip64ExtendedInformationExtraField(entry))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
672	[BUG]  [BUGGY]  if(!hasZip64ExtendedInformationExtraField(ae)&&  ae.getCompressedSize()!=  ArchiveEntry.HEADER_ID)  {  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasZip64ExtendedInformationExtraField(ae)&&  ae.getCompressedSize()!=  ArchiveEntry.HEADER_ID)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasZip64ExtendedInformationExtraField(ae)&&  ae.getCompressedSize()!=  ArchiveEntry.HEADER_ID)  {	  if(!hasZip64ExtendedInformationExtraField(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
673	[BUG]  [BUGGY]  if(!hasZip64ExtendedInformationExtraField(ae)&&  ae.getCompressedSize()  ==  ArchiveEntry.HEADER_ID)  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(!hasZip64ExtendedInformationExtraField(ae)&&  ae.getCompressedSize()  ==  ArchiveEntry.HEADER_ID)  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(!hasZip64ExtendedInformationExtraField(ae)&&  ae.getCompressedSize()  ==  ArchiveEntry.HEADER_ID)  {	  if(!hasZip64ExtendedInformationExtraField(ae))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
674	[BUG]  [BUGGY]  if(ae!=  null  &&  is2PhaseSource  &&  hasZip64Extra(ae)&&  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  is2PhaseSource  &&  hasZip64Extra(ae)&&  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  is2PhaseSource  &&  hasZip64Extra(ae)&&  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)&&    isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
675	[BUG]  [BUGGY]  if(is2PhaseSource  ||  isZip64Extra(ae)&&  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(is2PhaseSource  ||  isZip64Extra(ae)&&  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(is2PhaseSource  ||  isZip64Extra(ae)&&  isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(is2PhaseSource    ||    hasZip64Extra(ae)&&    isRemoteExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
676	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
677	[BUG]  [BUGGY]  if(ae!=  null  &&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);      [BUGGY]  if(ae!=  null  &&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]          ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	578	578	1	replace	if(ae!=  null  &&  hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(hasExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||    hasExtendedOutputField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
