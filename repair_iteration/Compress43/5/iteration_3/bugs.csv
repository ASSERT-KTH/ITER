bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  boolean  phased  =  actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }	  if(actualNeedsZip64!=    phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
2	[BUG]  [BUGGY]  final  boolean  phased  =  actualNeedsZip64  ==  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  actualNeedsZip64  ==  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  actualNeedsZip64  ==  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }	  if(actualNeedsZip64!=    phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
3	[BUG]  [BUGGY]  CloseCopiedEntry(phased,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  CloseCopiedEntry(phased,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	CloseCopiedEntry(phased,  actualNeedsZip64);	  if(actualNeedsZip64!=    phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
4	[BUG]  [BUGGY]  final  boolean  phased  =  actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);	  if(actualNeedsZip64!=    phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
5	[BUG]  [BUGGY]  finallyNeedsZip64  =  checkIfNeedsZip64(actualMode);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyNeedsZip64  =  checkIfNeedsZip64(actualMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyNeedsZip64  =  checkIfNeedsZip64(actualMode);	  finallyNeedsZip64    =    checkIfNeedsZip64(percentageNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
6	[BUG]  [BUGGY]  final  boolean  finallyNeedsZip64  =  checkIfNeedsZip64(percentageNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  finallyNeedsZip64  =  checkIfNeedsZip64(percentageNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  finallyNeedsZip64  =  checkIfNeedsZip64(percentageNeedsZip64);	  finallyNeedsZip64    =    checkIfNeedsZip64(percentageNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
7	[BUG]  [BUGGY]  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(percentageNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(percentageNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(percentageNeedsZip64);	  finallyNeedsZip64    =    checkIfNeedsZip64(percentageNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
8	[BUG]  [BUGGY]  final  boolean  finallyNeedsZip64  =  checkIfNeedsZip64(actualMode);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  finallyNeedsZip64  =  checkIfNeedsZip64(actualMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  finallyNeedsZip64  =  checkIfNeedsZip64(actualMode);	  finallyNeedsZip64    =    checkIfNeedsZip64(percentageNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
9	[BUG]  [BUGGY]  finallyNeedsZip64  =  checkIfNeedsZip64(effectMode);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyNeedsZip64  =  checkIfNeedsZip64(effectMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyNeedsZip64  =  checkIfNeedsZip64(effectMode);	  finallyNeedsZip64    =    checkIfNeedsZip64(percentageNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
10	[BUG]  [BUGGY]  if(phased)  {  zip64Mode  =  getCopiedZip64Mode(entry.blocksRead);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  zip64Mode  =  getCopiedZip64Mode(entry.blocksRead);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  zip64Mode  =  getCopiedZip64Mode(entry.blocksRead);  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    getCopiedZip64Mode(entry.blocksRead);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
11	[BUG]  [BUGGY]  if(phased)  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    getCopiedZip64Mode(entry.blocksRead);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
12	[BUG]  [BUGGY]  finallyNeedsZip64)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.blocksRead);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyNeedsZip64)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.blocksRead);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyNeedsZip64)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.blocksRead);  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    getCopiedZip64Mode(entry.blocksRead);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
13	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(entry.blocksRead);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(entry.blocksRead);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(entry.blocksRead);  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    getCopiedZip64Mode(entry.blocksRead);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
14	[BUG]  [BUGGY]  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(activeMode);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(activeMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(activeMode);	  final    boolean    actuallyNeedsZip64    =    checkIfNeedsZip64(actualMode);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
15	[BUG]  [BUGGY]  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(phased);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(phased);	  final    boolean    actuallyNeedsZip64    =    checkIfNeedsZip64(actualMode);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
16	[BUG]  [BUGGY]  final  boolean  actuallyNeedsZip64  =  getIfNeedsZip64(actualMode);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  actuallyNeedsZip64  =  getIfNeedsZip64(actualMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  actuallyNeedsZip64  =  getIfNeedsZip64(actualMode);	  final    boolean    actuallyNeedsZip64    =    checkIfNeedsZip64(actualMode);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
17	[BUG]  [BUGGY]  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(actualMode,  phased);  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(actualMode,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(actualMode,  phased);	  final    boolean    actuallyNeedsZip64    =    checkIfNeedsZip64(actualMode);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
18	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(effectiveMode);  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(effectiveMode);	  if(checkIfNeedsZip64)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
19	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  checkIfNeedsZip64));  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  checkIfNeedsZip64));  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  checkIfNeedsZip64));  }	  if(checkIfNeedsZip64)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
20	[BUG]  [BUGGY]  if(checkIfNeedsZip64  &&  phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64  &&  phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64  &&  phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }	  if(checkIfNeedsZip64)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
21	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  checkedIfNeedsZip64));  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  checkedIfNeedsZip64));  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  checkedIfNeedsZip64));  }	  if(checkIfNeedsZip64)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
22	[BUG]  [BUGGY]  finallyPhased)  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyPhased)  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyPhased)  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
23	[BUG]  [BUGGY]  if(phased  &&  effectiveMode!=  zip64Mode)  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  effectiveMode!=  zip64Mode)  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  effectiveMode!=  zip64Mode)  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
24	[BUG]  [BUGGY]  if(phased  &&  checkIfNeedsZip64(effectiveMode))  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  checkIfNeedsZip64(effectiveMode))  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  checkIfNeedsZip64(effectiveMode))  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
25	[BUG]  [BUGGY]  if(phased  &&  checkIfNeedsZip64)  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  checkIfNeedsZip64)  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  checkIfNeedsZip64)  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
26	[BUG]  [BUGGY]  finallyPased)  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyPased)  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyPased)  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
27	[BUG]  [BUGGY]  finallyPhased)  {  closeEntry(zip64Mode,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyPhased)  {  closeEntry(zip64Mode,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyPhased)  {  closeEntry(zip64Mode,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(zip64Mode,    phased);    }    else    {    Zip64Mode    effectiveMode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
28	[BUG]  [BUGGY]  if(phased)  {  closeEntry(zip64Mode,  effectiveMode);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(zip64Mode,  effectiveMode);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(zip64Mode,  effectiveMode);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(zip64Mode,    phased);    }    else    {    Zip64Mode    effectiveMode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
29	[BUG]  [BUGGY]  if(phased)  {  closeEntry(zip64Mode,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(efficientMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(zip64Mode,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(efficientMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(zip64Mode,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(efficientMode);  }	  if(phased)    {    closeEntry(zip64Mode,    phased);    }    else    {    Zip64Mode    effectiveMode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
30	[BUG]  [BUGGY]  final  boolean  phased  =  phased?  checkIfNeedsZip64(phased):  checkIfNeedsZip64(effectiveMode);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  phased?  checkIfNeedsZip64(phased):  checkIfNeedsZip64(effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  phased?  checkIfNeedsZip64(phased):  checkIfNeedsZip64(effectiveMode);	  if(phased)    {    closeEntry(zip64Mode,    phased);    }    else    {    Zip64Mode    effectiveMode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
31	[BUG]  [BUGGY]  phased  =  closePhaseEntry(phased,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  phased  =  closePhaseEntry(phased,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	phased  =  closePhaseEntry(phased,  actualNeedsZip64);	  phased    =    closePhaseEntry(actuallyNeedsZip64,    phased);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
32	[BUG]  [BUGGY]  phased  =  closeCopiedEntry(phased,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  phased  =  closeCopiedEntry(phased,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	phased  =  closeCopiedEntry(phased,  actualNeedsZip64);	  phased    =    closePhaseEntry(actuallyNeedsZip64,    phased);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
33	[BUG]  [BUGGY]  phased  =  closePhaseEntry(entry.bytesRead,  phased);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  phased  =  closePhaseEntry(entry.bytesRead,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	phased  =  closePhaseEntry(entry.bytesRead,  phased);	  phased    =    closePhaseEntry(actuallyNeedsZip64,    phased);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
34	[BUG]  [BUGGY]  phased  =  closePhaseEntry(actuallyNeedsZip64,  phased,  checkIfNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  phased  =  closePhaseEntry(actuallyNeedsZip64,  phased,  checkIfNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	phased  =  closePhaseEntry(actuallyNeedsZip64,  phased,  checkIfNeedsZip64);	  phased    =    closePhaseEntry(actuallyNeedsZip64,    phased);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
35	[BUG]  [BUGGY]  phased  =  closePhaseEntry(actuallyNeedsZip64,  effectiveMode);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  phased  =  closePhaseEntry(actuallyNeedsZip64,  effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	phased  =  closePhaseEntry(actuallyNeedsZip64,  effectiveMode);	  phased    =    closePhaseEntry(actuallyNeedsZip64,    phased);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
36	[BUG]  [BUGGY]  phased  =  closePhaseEntry(percentageNeedsZip64,  phased);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  phased  =  closePhaseEntry(percentageNeedsZip64,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	phased  =  closePhaseEntry(percentageNeedsZip64,  phased);	  phased    =    closePhaseEntry(actuallyNeedsZip64,    phased);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
37	[BUG]  [BUGGY]  phased  =  closePhaseEntry(actuallyNeedsZip64,  phased,  trueNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  phased  =  closePhaseEntry(actuallyNeedsZip64,  phased,  trueNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	phased  =  closePhaseEntry(actuallyNeedsZip64,  phased,  trueNeedsZip64);	  phased    =    closePhaseEntry(actuallyNeedsZip64,    phased);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
38	[BUG]  [BUGGY]  final  boolean  phased  =  actualNeedsZip64  ==  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  actualNeedsZip64  ==  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  actualNeedsZip64  ==  phased)  {  closeEntry(phased,  actualNeedsZip64);  }	  if(actualNeedsZip64    ==    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
39	[BUG]  [BUGGY]  final  boolean  phased  =  actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }	  if(actualNeedsZip64    ==    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
40	[BUG]  [BUGGY]  final  boolean  phased  =  actualNeedsZip64  ==  phased)  {  closeEntry(phased,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  actualNeedsZip64  ==  phased)  {  closeEntry(phased,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  actualNeedsZip64  ==  phased)  {  closeEntry(phased,  actualNeedsZip64);	  if(actualNeedsZip64    ==    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
41	[BUG]  [BUGGY]  final  boolean  phased  =  actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);	  if(actualNeedsZip64    ==    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
42	[BUG]  [BUGGY]  final  phased  =  checkIfNeedsZip64(phased);  [CE]  illegal  start  of  expression  [FE]                                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  phased  =  checkIfNeedsZip64(phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  phased  =  checkIfNeedsZip64(phased);	  if(actualNeedsZip64    ==    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
43	[BUG]  [BUGGY]  if(phased  &&  actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }	  if(phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
44	[BUG]  [BUGGY]  final  phased  =  closeCopiedEntry(phased,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  phased  =  closeCopiedEntry(phased,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  phased  =  closeCopiedEntry(phased,  actualNeedsZip64);	  if(phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
45	[BUG]  [BUGGY]  final  boolean  phased  =  closeCopiedEntry(phased,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  closeCopiedEntry(phased,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  closeCopiedEntry(phased,  actualNeedsZip64);	  if(phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
46	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(phased,  actualNeedsZip64,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(phased,  actualNeedsZip64,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(phased,  actualNeedsZip64,  actualNeedsZip64);  }	  if(phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
47	[BUG]  [BUGGY]  finallyPased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyPased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyPased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }	  if(phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
48	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(entry.bytesRead,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(entry.bytesRead,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(entry.bytesRead,  actualNeedsZip64);  }	  if(phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
49	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(phased,  actualNeedsZip64,  trueNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(phased,  actualNeedsZip64,  trueNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(phased,  actualNeedsZip64,  trueNeedsZip64);  }	  if(phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
50	[BUG]  [BUGGY]  if(phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }	  if(actualNeedsZip64!=    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualMode);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
51	[BUG]  [BUGGY]  final  boolean  phased  =  actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }	  if(actualNeedsZip64!=    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualMode);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
52	[BUG]  [BUGGY]  final  boolean  phased  =  actualNeedsZip64  ==  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  actualNeedsZip64  ==  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  actualNeedsZip64  ==  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }	  if(actualNeedsZip64!=    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualMode);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
53	[BUG]  [BUGGY]  if(phased)  {  checkIfNeedsZip64(actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  checkIfNeedsZip64(actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  checkIfNeedsZip64(actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }	  if(actualNeedsZip64!=    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualMode);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
54	[BUG]  [BUGGY]  final  phased  =  phased?  checkIfNeedsZip64(phased):  checkIfNeedsZip64(actualMode);  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  phased  =  phased?  checkIfNeedsZip64(phased):  checkIfNeedsZip64(actualMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  phased  =  phased?  checkIfNeedsZip64(phased):  checkIfNeedsZip64(actualMode);	  if(actualNeedsZip64!=    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualMode);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
55	[BUG]  [BUGGY]  final  boolean  phased  =  actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(activeMode);  }  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(activeMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(activeMode);  }	  if(actualNeedsZip64!=    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualMode);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
56	[BUG]  [BUGGY]  if(phased)  {  closeEntry(effectiveMode,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(effectiveMode,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(effectiveMode,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(actuallyNeedsZip64,    effectiveMode);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
57	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  effectiveMode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  effectiveMode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry.bytesRead,  effectiveMode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(actuallyNeedsZip64,    effectiveMode);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
58	[BUG]  [BUGGY]  final  boolean  phased  =  phased?  checkIfNeedsZip64(effectiveMode):  checkIfNeedsZip64(effectiveMode);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  phased?  checkIfNeedsZip64(effectiveMode):  checkIfNeedsZip64(effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  phased?  checkIfNeedsZip64(effectiveMode):  checkIfNeedsZip64(effectiveMode);	  if(phased)    {    closeEntry(actuallyNeedsZip64,    effectiveMode);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
59	[BUG]  [BUGGY]  if(phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(actuallyNeedsZip64,    effectiveMode);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
60	[BUG]  [BUGGY]  if(phased)  {  checkIfNeedsZip64(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  checkIfNeedsZip64(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  checkIfNeedsZip64(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(actuallyNeedsZip64,    effectiveMode);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
61	[BUG]  [BUGGY]  final  boolean  phased  =  phased?  checkIfNeedsZip64(effectiveMode):  checkIfNeedsZip64;  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  phased?  checkIfNeedsZip64(effectiveMode):  checkIfNeedsZip64;  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  phased?  checkIfNeedsZip64(effectiveMode):  checkIfNeedsZip64;	  if(phased)    {    closeEntry(actuallyNeedsZip64,    effectiveMode);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
62	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  effectiveMode);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(phased,  effectiveMode);	  final    boolean    phased    =    checkIfNeedsZip64(phased,    phased);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
63	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  realNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  realNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(phased,  realNeedsZip64);	  final    boolean    phased    =    checkIfNeedsZip64(phased,    phased);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
64	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  efectivNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  efectivNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(phased,  efectivNeedsZip64);	  final    boolean    phased    =    checkIfNeedsZip64(phased,    phased);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
65	[BUG]  [BUGGY]  finallyPhased)  {  closeEntry(zip64Mode,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyPhased)  {  closeEntry(zip64Mode,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyPhased)  {  closeEntry(zip64Mode,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(zip64Mode,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
66	[BUG]  [BUGGY]  if(phased)  {  closeEntry(zip64Mode,  effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(zip64Mode,  effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(zip64Mode,  effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(zip64Mode,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
67	[BUG]  [BUGGY]  if(phased)  {  closeEntry(zip64Mode,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(efficientMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(zip64Mode,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(efficientMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(zip64Mode,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(efficientMode);  }	  if(phased)    {    closeEntry(zip64Mode,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
68	[BUG]  [BUGGY]  final  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(entry.bytesRead);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(entry.bytesRead);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(entry.bytesRead);	  final    Zip64Mode    effectiveMode    =    checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
69	[BUG]  [BUGGY]  final  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(activeMode);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(activeMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(activeMode);	  final    Zip64Mode    effectiveMode    =    checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
70	[BUG]  [BUGGY]  final  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode,  phased);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode,  phased);	  final    Zip64Mode    effectiveMode    =    checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
71	[BUG]  [BUGGY]  final  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(mode);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(mode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(mode);	  final    Zip64Mode    effectiveMode    =    checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
72	[BUG]  [BUGGY]  final  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(phased);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(phased);	  final    Zip64Mode    effectiveMode    =    checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
73	[BUG]  [BUGGY]  final  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(entry.mode);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(entry.mode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(entry.mode);	  final    Zip64Mode    effectiveMode    =    checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
74	[BUG]  [BUGGY]  final  boolean  actuallyNeedsZip64  =  getIfNeedsZip64(effectMode);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  actuallyNeedsZip64  =  getIfNeedsZip64(effectMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  actuallyNeedsZip64  =  getIfNeedsZip64(effectMode);	  final    boolean    actuallyNeedsZip64    =    checkIfNeedsZip64(effectMode);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
75	[BUG]  [BUGGY]  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectMode,  phased);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectMode,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectMode,  phased);	  final    boolean    actuallyNeedsZip64    =    checkIfNeedsZip64(effectMode);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
76	[BUG]  [BUGGY]  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(positiveMode);  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(positiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(positiveMode);	  final    boolean    actuallyNeedsZip64    =    checkIfNeedsZip64(effectMode);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
77	[BUG]  [BUGGY]  closeCopiedEntry(entry.bytesRead,  phased,  trueNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(entry.bytesRead,  phased,  trueNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(entry.bytesRead,  phased,  trueNeedsZip64);	  closeCopiedEntry(entry.bytesRead,    phased);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
78	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(entry.bytesRead,  phased);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(entry.bytesRead,  phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(entry.bytesRead,  phased);  }	  closeCopiedEntry(entry.bytesRead,    phased);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
79	[BUG]  [BUGGY]  closeCopiedEntry(entry.bytesRead,  phased,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(entry.bytesRead,  phased,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(entry.bytesRead,  phased,  actualNeedsZip64);	  closeCopiedEntry(entry.bytesRead,    phased);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
80	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(entry.bytesRead,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(entry.bytesRead,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(entry.bytesRead,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  closeCopiedEntry(entry.bytesRead,    phased);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
81	[BUG]  [BUGGY]  closeCopiedEntry(entry.bytesRead,  phased,  false);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(entry.bytesRead,  phased,  false);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(entry.bytesRead,  phased,  false);	  closeCopiedEntry(entry.bytesRead,    phased);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
82	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(entry.bytesRead,  phased);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(entry.bytesRead,  phased);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(entry.bytesRead,  phased);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }	  closeCopiedEntry(entry.bytesRead,    phased);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
83	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(entry.bytesRead,  phased);  }  else  {  preClose();  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(entry.bytesRead,  phased);  }  else  {  preClose();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(entry.bytesRead,  phased);  }  else  {  preClose();  }	  closeCopiedEntry(entry.bytesRead,    phased);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
84	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(effectiveMode,  phased);  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(effectiveMode,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(effectiveMode,  phased);	  final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64,    phased);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
85	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(actualMode,  phased);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(actualMode,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(actualMode,  phased);	  final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64,    phased);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
86	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(activeMode,  phased);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(activeMode,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(activeMode,  phased);	  final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64,    phased);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
87	[BUG]  [BUGGY]  if(phased)  {  if(actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  if(actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  if(actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }	  if(actualNeedsZip64!=    phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualMode);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
88	[BUG]  [BUGGY]  if(phased)  {  if(actualNeedsZip64!=  actualNeedsZip64)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  if(actualNeedsZip64!=  actualNeedsZip64)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  if(actualNeedsZip64!=  actualNeedsZip64)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }	  if(actualNeedsZip64!=    phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualMode);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
89	[BUG]  [BUGGY]  final  boolean  phased  =  actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }	  if(actualNeedsZip64!=    phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualMode);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
90	[BUG]  [BUGGY]  final  boolean  phased  =  actualNeedsZip64  ==  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  actualNeedsZip64  ==  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  actualNeedsZip64  ==  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }	  if(actualNeedsZip64!=    phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualMode);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
91	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }	  if(actualNeedsZip64!=    phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualMode);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
92	[BUG]  [BUGGY]  if(phased)  {  if(actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  if(actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  if(actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }	  if(actualNeedsZip64!=    phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualMode);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
93	[BUG]  [BUGGY]  if(phased)  {  if(actualNeedsZip64!=  actualNeedsZip64)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  if(actualNeedsZip64!=  actualNeedsZip64)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  if(actualNeedsZip64!=  actualNeedsZip64)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }	  if(actualNeedsZip64!=    phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualMode);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
94	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  closeEntry(entry,  phased);  }  else  {  preClose();  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(phased)  {  closeEntry(entry,  phased);  }  else  {  preClose();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  closeEntry(entry,  phased);  }  else  {  preClose();  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    preClose();    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
95	[BUG]  [BUGGY]  if(phased)  {  preClose(entry,  phased);  }  else  {  preClose();  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  preClose(entry,  phased);  }  else  {  preClose();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  preClose(entry,  phased);  }  else  {  preClose();  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    preClose();    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
96	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  preClose();  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  preClose();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  preClose();  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    preClose();    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
97	[BUG]  [BUGGY]  finallyPhased)  {  preClose(entry,  phased);  }  else  {  preClose();  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyPhased)  {  preClose(entry,  phased);  }  else  {  preClose();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyPhased)  {  preClose(entry,  phased);  }  else  {  preClose();  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    preClose();    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
98	[BUG]  [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(mode);  }  else  {  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode,  mode);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(mode);  }  else  {  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode,  mode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(mode);  }  else  {  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode,  mode);  }	  if(phased)    {    final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    }    else    {    Zip64Mode    mode    =    getMode();    closeCopiedEntry(mode,    mode);    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
99	[BUG]  [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(mode,  actualNeedsZip64);  }  else  {  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode,  mode);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(mode,  actualNeedsZip64);  }  else  {  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode,  mode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(mode,  actualNeedsZip64);  }  else  {  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode,  mode);  }	  if(phased)    {    final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    }    else    {    Zip64Mode    mode    =    getMode();    closeCopiedEntry(mode,    mode);    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
100	[BUG]  [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(activeMode);  }  else  {  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode,  mode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(activeMode);  }  else  {  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode,  mode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(activeMode);  }  else  {  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode,  mode);  }	  if(phased)    {    final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    }    else    {    Zip64Mode    mode    =    getMode();    closeCopiedEntry(mode,    mode);    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
101	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(mode);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(mode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(mode);	  if(phased)    {    final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    }    else    {    Zip64Mode    mode    =    getMode();    closeCopiedEntry(mode,    mode);    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
102	[BUG]  [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(module);  }  else  {  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode,  mode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(module);  }  else  {  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode,  mode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(module);  }  else  {  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode,  mode);  }	  if(phased)    {    final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    }    else    {    Zip64Mode    mode    =    getMode();    closeCopiedEntry(mode,    mode);    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
103	[BUG]  [BUGGY]  final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(effectiveMode,  phased);  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(effectiveMode,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(effectiveMode,  phased);	  final    boolean    actualNeedsZip64    =    checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
104	[BUG]  [BUGGY]  final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(efficientMode);  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(efficientMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(efficientMode);	  final    boolean    actualNeedsZip64    =    checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
105	[BUG]  [BUGGY]  final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(activeMode);  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(activeMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(activeMode);	  final    boolean    actualNeedsZip64    =    checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
106	[BUG]  [BUGGY]  final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(efficientMode,  phased);  [CE]  illegal  start  of  expression  [FE]                                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(efficientMode,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(efficientMode,  phased);	  final    boolean    actualNeedsZip64    =    checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
107	[BUG]  [BUGGY]  final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(phased);  [CE]  illegal  start  of  expression  [FE]                                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(phased);	  final    boolean    actualNeedsZip64    =    checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
108	[BUG]  [BUGGY]  final  boolean  actualNeedsZip64  =  getIfNeedsZip64(effectiveMode);  [CE]  illegal  start  of  expression  [FE]                                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  actualNeedsZip64  =  getIfNeedsZip64(effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  actualNeedsZip64  =  getIfNeedsZip64(effectiveMode);	  final    boolean    actualNeedsZip64    =    checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
109	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  false,  true);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  false,  true);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(phased,  false,  true);	  final    boolean    phased    =    checkIfNeedsZip64(phased,    false);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
110	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  false,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  false,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(phased,  false,  actualNeedsZip64);	  final    boolean    phased    =    checkIfNeedsZip64(phased,    false);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
111	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  false,  actuallyNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  false,  actuallyNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(phased,  false,  actuallyNeedsZip64);	  final    boolean    phased    =    checkIfNeedsZip64(phased,    false);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
112	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  phased,  falseNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  phased,  falseNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  phased,  falseNeedsZip64);	  closeEntry(entry.bytesRead,    phased,    trueNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
113	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  phased,  trueNeedsZip64,  effectiveMode);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  phased,  trueNeedsZip64,  effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  phased,  trueNeedsZip64,  effectiveMode);	  closeEntry(entry.bytesRead,    phased,    trueNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
114	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  phased,  effectiveMode,  trueNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  phased,  effectiveMode,  trueNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  phased,  effectiveMode,  trueNeedsZip64);	  closeEntry(entry.bytesRead,    phased,    trueNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
115	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  phased,  trueNeedsZip64,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  phased,  trueNeedsZip64,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  phased,  trueNeedsZip64,  actualNeedsZip64);	  closeEntry(entry.bytesRead,    phased,    trueNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
116	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  trueNeedsZip64,  phased);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  trueNeedsZip64,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  trueNeedsZip64,  phased);	  closeEntry(entry.bytesRead,    phased,    trueNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
117	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  phased,  trueNeedsZip64,  trueMode);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  phased,  trueNeedsZip64,  trueMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  phased,  trueNeedsZip64,  trueMode);	  closeEntry(entry.bytesRead,    phased,    trueNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
118	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  phased,  trueNeedsZip64,  false);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  phased,  trueNeedsZip64,  false);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  phased,  trueNeedsZip64,  false);	  closeEntry(entry.bytesRead,    phased,    trueNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
119	[BUG]  [BUGGY]  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode,  phased);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode,  phased);	  final    boolean    actuallyNeedsZip64    =    checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
120	[BUG]  [BUGGY]  final  boolean  actuallyNeedsZip64  =  phased?  checkIfNeedsZip64(effectiveMode):  checkIfNeedsZip64(effectiveMode);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  actuallyNeedsZip64  =  phased?  checkIfNeedsZip64(effectiveMode):  checkIfNeedsZip64(effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  actuallyNeedsZip64  =  phased?  checkIfNeedsZip64(effectiveMode):  checkIfNeedsZip64(effectiveMode);	  final    boolean    actuallyNeedsZip64    =    checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
121	[BUG]  [BUGGY]  final  boolean  actuallyNeedsZip64  =  getIfNeedsZip64(effectiveMode);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  actuallyNeedsZip64  =  getIfNeedsZip64(effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  actuallyNeedsZip64  =  getIfNeedsZip64(effectiveMode);	  final    boolean    actuallyNeedsZip64    =    checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
122	[BUG]  [BUGGY]  final  boolean  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  effectiveMode  =  checkIfNeedsZip64(effectiveMode);	  checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
123	[BUG]  [BUGGY]  final  boolean  effectiveNeedsZip64  =  checkIfNeedsZip64(effectiveMode);  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  effectiveNeedsZip64  =  checkIfNeedsZip64(effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  effectiveNeedsZip64  =  checkIfNeedsZip64(effectiveMode);	  checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
124	[BUG]  [BUGGY]  checkIfNeedsZip64(effectiveMode,  phased);  [CE]  illegal  start  of  expression  [FE]                                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  checkIfNeedsZip64(effectiveMode,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	checkIfNeedsZip64(effectiveMode,  phased);	  checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
125	[BUG]  [BUGGY]  if(checkIfNeedsZip64)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  throw  new  IllegalStateException( " ");  }	  checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
126	[BUG]  [BUGGY]  finallyPhased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyPhased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyPhased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(entry.bytesRead,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
127	[BUG]  [BUGGY]  if(phased)  {  checkIfNeedsZip64(entry.bytesRead,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  checkIfNeedsZip64(entry.bytesRead,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  checkIfNeedsZip64(entry.bytesRead,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(entry.bytesRead,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
128	[BUG]  [BUGGY]  finallyPhased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead  =  zip64Mode;  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyPhased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead  =  zip64Mode;  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyPhased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead  =  zip64Mode;  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    entry.bytesRead    =    zip64Mode;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
129	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead  =  ZIP64Mode;  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead  =  ZIP64Mode;  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead  =  ZIP64Mode;  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    entry.bytesRead    =    zip64Mode;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
130	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead  =  true;  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead  =  true;  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead  =  true;  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    entry.bytesRead    =    zip64Mode;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
131	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead  =  null;  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead  =  null;  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead  =  null;  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    entry.bytesRead    =    zip64Mode;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
132	[BUG]  [BUGGY]  finallyPhased)  {  closeEntry(entry.bytesRead,  phased);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyPhased)  {  closeEntry(entry.bytesRead,  phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyPhased)  {  closeEntry(entry.bytesRead,  phased);  }	  if(phased)    {    closeEntry(entry.bytesRead,    phased);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
133	[BUG]  [BUGGY]  final  boolean  phased  =  closePhaseEntry(entry.bytesRead,  phased);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  closePhaseEntry(entry.bytesRead,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  closePhaseEntry(entry.bytesRead,  phased);	  if(phased)    {    closeEntry(entry.bytesRead,    phased);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
134	[BUG]  [BUGGY]  final  boolean  phased  =  closeEntry(entry.bytesRead,  phased);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  closeEntry(entry.bytesRead,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  closeEntry(entry.bytesRead,  phased);	  if(phased)    {    closeEntry(entry.bytesRead,    phased);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
135	[BUG]  [BUGGY]  phased  =  closeEntry(entry.bytesRead,  phased);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  phased  =  closeEntry(entry.bytesRead,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	phased  =  closeEntry(entry.bytesRead,  phased);	  if(phased)    {    closeEntry(entry.bytesRead,    phased);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
136	[BUG]  [BUGGY]  finallyPhased(entry.bytesRead,  phased);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyPhased(entry.bytesRead,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyPhased(entry.bytesRead,  phased);	  if(phased)    {    closeEntry(entry.bytesRead,    phased);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
137	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  phased,  true);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  phased,  true);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  phased,  true);	  closeEntry(entry.bytesRead,    phased,    false);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
138	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  phased,  false,  trueNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  phased,  false,  trueNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  phased,  false,  trueNeedsZip64);	  closeEntry(entry.bytesRead,    phased,    false);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
139	[BUG]  [BUGGY]  CloseEntry(entry.bytesRead,  phased,  true);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  CloseEntry(entry.bytesRead,  phased,  true);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	CloseEntry(entry.bytesRead,  phased,  true);	  closeEntry(entry.bytesRead,    phased,    false);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
140	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  phased,  false);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  phased,  false);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry.bytesRead,  phased,  false);  }	  closeEntry(entry.bytesRead,    phased,    false);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
141	[BUG]  [BUGGY]  openEntry(entry.bytesRead,  phased,  false);  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  openEntry(entry.bytesRead,  phased,  false);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	openEntry(entry.bytesRead,  phased,  false);	  closeEntry(entry.bytesRead,    phased,    false);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
142	[BUG]  [BUGGY]  if(phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getSize();  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getSize();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getSize();  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    entry.bytesRead    =    entry.getSize();    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
143	[BUG]  [BUGGY]  if(!phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getSize();  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(!phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getSize();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(!phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getSize();  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    entry.bytesRead    =    entry.getSize();    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
144	[BUG]  [BUGGY]  if(checkIfNeedsZip64)  {  checkIfNeedsZip64(efficientMode);  }  else  {  entry.bytesRead  =  entry.getSize();  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64)  {  checkIfNeedsZip64(efficientMode);  }  else  {  entry.bytesRead  =  entry.getSize();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64)  {  checkIfNeedsZip64(efficientMode);  }  else  {  entry.bytesRead  =  entry.getSize();  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    entry.bytesRead    =    entry.getSize();    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
145	[BUG]  [BUGGY]  if(phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getByteRead();  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getByteRead();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getByteRead();  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    entry.bytesRead    =    entry.getByteRead();    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
146	[BUG]  [BUGGY]  if(!phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getByteRead();  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(!phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getByteRead();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(!phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getByteRead();  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    entry.bytesRead    =    entry.getByteRead();    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
147	[BUG]  [BUGGY]  if(checkIfNeedsZip64)  {  checkIfNeedsZip64(efficientMode);  }  else  {  entry.bytesRead  =  entry.getByteRead();  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64)  {  checkIfNeedsZip64(efficientMode);  }  else  {  entry.bytesRead  =  entry.getByteRead();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64)  {  checkIfNeedsZip64(efficientMode);  }  else  {  entry.bytesRead  =  entry.getByteRead();  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    entry.bytesRead    =    entry.getByteRead();    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
148	[BUG]  [BUGGY]  if(phased)  {  checkIfNeedsZip64(entry,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  checkIfNeedsZip64(entry,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  checkIfNeedsZip64(entry,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeCopiedEntry(entry,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
149	[BUG]  [BUGGY]  if(phased)  {  zip64Mode  =  getCopiedZip64Mode(entry.getName());  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  zip64Mode  =  getCopiedZip64Mode(entry.getName());  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  zip64Mode  =  getCopiedZip64Mode(entry.getName());  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    getCopiedZip64Mode(entry.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
150	[BUG]  [BUGGY]  finallyNeedsZip64)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.getName());  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyNeedsZip64)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.getName());  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyNeedsZip64)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.getName());  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    getCopiedZip64Mode(entry.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
151	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(entry.getName());  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(entry.getName());  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(entry.getName());  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    getCopiedZip64Mode(entry.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
152	[BUG]  [BUGGY]  finallyNeedsZip64)  {  closeEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(entry.getName());  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyNeedsZip64)  {  closeEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(entry.getName());  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyNeedsZip64)  {  closeEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(entry.getName());  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    getCopiedZip64Mode(entry.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
153	[BUG]  [BUGGY]  Entry  <  Zip64Mode>  phased  =  getCopiedZip64Mode(entry.getName());  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Entry  <  Zip64Mode>  phased  =  getCopiedZip64Mode(entry.getName());  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Entry  <  Zip64Mode>  phased  =  getCopiedZip64Mode(entry.getName());	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    getCopiedZip64Mode(entry.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
154	[BUG]  [BUGGY]  if(phased)  {  zip64Mode  =  getPaddedZip64Mode(entry.bytesRead);  }  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  zip64Mode  =  getPaddedZip64Mode(entry.bytesRead);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  zip64Mode  =  getPaddedZip64Mode(entry.bytesRead);  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    getPaddedZip64Mode(entry.bytesRead);    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
155	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  getPaddedZip64Mode(entry.bytesRead);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  getPaddedZip64Mode(entry.bytesRead);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  getPaddedZip64Mode(entry.bytesRead);  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    getPaddedZip64Mode(entry.bytesRead);    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
156	[BUG]  [BUGGY]  final  boolean  phased  =  getPaddedZip64Mode(entry.bytesRead);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  getPaddedZip64Mode(entry.bytesRead);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  getPaddedZip64Mode(entry.bytesRead);	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    getPaddedZip64Mode(entry.bytesRead);    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
157	[BUG]  [BUGGY]  if(phased)  {  zip64Mode  =  getPaddedZip64Mode(entry.bytesRead);  }  else  {  Zip64Mode  effectiveMode  =  getPaddedZip64Mode(entry.bytesRead);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  zip64Mode  =  getPaddedZip64Mode(entry.bytesRead);  }  else  {  Zip64Mode  effectiveMode  =  getPaddedZip64Mode(entry.bytesRead);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  zip64Mode  =  getPaddedZip64Mode(entry.bytesRead);  }  else  {  Zip64Mode  effectiveMode  =  getPaddedZip64Mode(entry.bytesRead);  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    getPaddedZip64Mode(entry.bytesRead);    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
158	[BUG]  [BUGGY]  if(phased)  {  zip64Mode  =  getPaddedZip64Mode(entry.bytesRead);  }  else  {  zip64Mode  =  getPaddedZip64Mode(entry.bytesRead);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  zip64Mode  =  getPaddedZip64Mode(entry.bytesRead);  }  else  {  zip64Mode  =  getPaddedZip64Mode(entry.bytesRead);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  zip64Mode  =  getPaddedZip64Mode(entry.bytesRead);  }  else  {  zip64Mode  =  getPaddedZip64Mode(entry.bytesRead);  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    getPaddedZip64Mode(entry.bytesRead);    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
159	[BUG]  [BUGGY]  finallyPhased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyPhased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyPhased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(Zip64Mode.DEFAULT_ENCODING,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
160	[BUG]  [BUGGY]  finallyPased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyPased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyPased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(Zip64Mode.DEFAULT_ENCODING,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
161	[BUG]  [BUGGY]  if(phased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(Zip64Mode.DEFAULT_ENCODING,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
162	[BUG]  [BUGGY]  if(phased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  trueNeedsZip64);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  trueNeedsZip64);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  trueNeedsZip64);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(Zip64Mode.DEFAULT_ENCODING,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
163	[BUG]  [BUGGY]  if(phased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  initialNeedsZip64);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  initialNeedsZip64);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  initialNeedsZip64);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(Zip64Mode.DEFAULT_ENCODING,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
164	[BUG]  [BUGGY]  finallyPased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  zip64Mode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyPased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  zip64Mode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyPased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  zip64Mode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(Zip64Mode.DEFAULT_ENCODING,    zip64Mode);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
165	[BUG]  [BUGGY]  if(phased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  zip64Mode);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  zip64Mode);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  zip64Mode);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(Zip64Mode.DEFAULT_ENCODING,    zip64Mode);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
166	[BUG]  [BUGGY]  if(phased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  ZIP64Mode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  ZIP64Mode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  ZIP64Mode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(Zip64Mode.DEFAULT_ENCODING,    zip64Mode);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
167	[BUG]  [BUGGY]  if(phased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  zip64Mode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(efficientMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  zip64Mode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(efficientMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  zip64Mode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(efficientMode);  }	  if(phased)    {    closeEntry(Zip64Mode.DEFAULT_ENCODING,    zip64Mode);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
168	[BUG]  [BUGGY]  finallyPhased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyPhased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyPhased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
169	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  trueNeedsZip64));  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  trueNeedsZip64));  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  trueNeedsZip64));  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
170	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased));  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased));  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(phased));	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
171	[BUG]  [BUGGY]  if(phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  zip64Mode  =  getCopiedZip64Mode(actualMode);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  zip64Mode  =  getCopiedZip64Mode(actualMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  zip64Mode  =  getCopiedZip64Mode(actualMode);  }	  if(actualNeedsZip64!=    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    else    {    zip64Mode    =    getCopiedZip64Mode(actualMode);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
172	[BUG]  [BUGGY]  if(phased)  {  if(actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  zip64Mode  =  getCopiedZip64Mode(actualMode);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  if(actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  zip64Mode  =  getCopiedZip64Mode(actualMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  if(actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  zip64Mode  =  getCopiedZip64Mode(actualMode);  }	  if(actualNeedsZip64!=    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    else    {    zip64Mode    =    getCopiedZip64Mode(actualMode);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
173	[BUG]  [BUGGY]  final  boolean  phased  =  actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  zip64Mode  =  getCopiedZip64Mode(actualMode);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  zip64Mode  =  getCopiedZip64Mode(actualMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  zip64Mode  =  getCopiedZip64Mode(actualMode);  }	  if(actualNeedsZip64!=    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    else    {    zip64Mode    =    getCopiedZip64Mode(actualMode);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
174	[BUG]  [BUGGY]  final  boolean  phased  =  actualNeedsZip64  ==  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  zip64Mode  =  getCopiedZip64Mode(actualMode);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  actualNeedsZip64  ==  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  zip64Mode  =  getCopiedZip64Mode(actualMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  actualNeedsZip64  ==  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  zip64Mode  =  getCopiedZip64Mode(actualMode);  }	  if(actualNeedsZip64!=    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    else    {    zip64Mode    =    getCopiedZip64Mode(actualMode);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
175	[BUG]  [BUGGY]  if(phased)  {  if(actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(actualMode);  }  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  if(actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(actualMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  if(actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(actualMode);  }	  if(actualNeedsZip64!=    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    else    {    zip64Mode    =    getCopiedZip64Mode(actualMode);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
176	[BUG]  [BUGGY]  if(phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(actualMode);  }  [CE]  illegal  start  of  expression  [FE]                                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(actualMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(actualMode);  }	  if(actualNeedsZip64!=    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    else    {    zip64Mode    =    getCopiedZip64Mode(actualMode);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
177	[BUG]  [BUGGY]  if(phased)  {  if(actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  zip64Mode  =  getCopiedZip64Mode(actualMode);  }  }  [CE]  illegal  start  of  expression  [FE]                                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  if(actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  zip64Mode  =  getCopiedZip64Mode(actualMode);  }  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  if(actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  zip64Mode  =  getCopiedZip64Mode(actualMode);  }  }	  if(actualNeedsZip64!=    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    else    {    zip64Mode    =    getCopiedZip64Mode(actualMode);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
178	[BUG]  [BUGGY]  finallyPhased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyPhased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyPhased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode.close();  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
179	[BUG]  [BUGGY]  if(phased)  {  zip64Mode  =  new  Zip64Mode(effectiveMode,  phased);  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  zip64Mode  =  new  Zip64Mode(effectiveMode,  phased);  }  else  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  zip64Mode  =  new  Zip64Mode(effectiveMode,  phased);  }  else  {  zip64Mode.close();  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
180	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  zip64Mode);  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  zip64Mode);  }  else  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  zip64Mode);  }  else  {  zip64Mode.close();  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
181	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(entry.bytesRead,  phased));  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(entry.bytesRead,  phased));  }  else  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(entry.bytesRead,  phased));  }  else  {  zip64Mode.close();  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
182	[BUG]  [BUGGY]  if(phased)  {  zip64Mode  =  new  Zip64Mode(effectiveMode,  phased);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  zip64Mode  =  new  Zip64Mode(effectiveMode,  phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  zip64Mode  =  new  Zip64Mode(effectiveMode,  phased);  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
183	[BUG]  [BUGGY]  finallyPhased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyPhased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyPhased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
184	[BUG]  [BUGGY]  final  phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
185	[BUG]  [BUGGY]  if(phased)  {  checkIfNeedsZip64(new  Zip64Mode(effectiveMode,  phased));  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  checkIfNeedsZip64(new  Zip64Mode(effectiveMode,  phased));  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  checkIfNeedsZip64(new  Zip64Mode(effectiveMode,  phased));  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
186	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
187	[BUG]  [BUGGY]  finallyPadded)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode  =  getPaddedZip64Mode(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyPadded)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode  =  getPaddedZip64Mode(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyPadded)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode  =  getPaddedZip64Mode(effectiveMode);  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    zip64Mode    =    getPaddedZip64Mode(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
188	[BUG]  [BUGGY]  if(phased)  {  zip64Mode  =  getPaddedZip64Mode(effectiveMode);  }  else  {  zip64Mode  =  getPaddedZip64Mode(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  zip64Mode  =  getPaddedZip64Mode(effectiveMode);  }  else  {  zip64Mode  =  getPaddedZip64Mode(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  zip64Mode  =  getPaddedZip64Mode(effectiveMode);  }  else  {  zip64Mode  =  getPaddedZip64Mode(effectiveMode);  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    zip64Mode    =    getPaddedZip64Mode(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
189	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode  =  getPaddedZip64Mode(efficientMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode  =  getPaddedZip64Mode(efficientMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode  =  getPaddedZip64Mode(efficientMode);  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    zip64Mode    =    getPaddedZip64Mode(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
190	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  zip64Mode);  }  else  {  zip64Mode  =  getPaddedZip64Mode(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  zip64Mode);  }  else  {  zip64Mode  =  getPaddedZip64Mode(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  zip64Mode);  }  else  {  zip64Mode  =  getPaddedZip64Mode(effectiveMode);  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    zip64Mode    =    getPaddedZip64Mode(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
191	[BUG]  [BUGGY]  finallyPadded)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode  =  getPaddedZip64Mode(efficientMode);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyPadded)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode  =  getPaddedZip64Mode(efficientMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyPadded)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode  =  getPaddedZip64Mode(efficientMode);  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    zip64Mode    =    getPaddedZip64Mode(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
192	[BUG]  [BUGGY]  if(phased)  {  zip64Mode  =  getPaddedZip64Mode(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  zip64Mode  =  getPaddedZip64Mode(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  zip64Mode  =  getPaddedZip64Mode(effectiveMode);  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    zip64Mode    =    getPaddedZip64Mode(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
193	[BUG]  [BUGGY]  finallyPhased)  {  closeEntry(activeMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyPhased)  {  closeEntry(activeMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyPhased)  {  closeEntry(activeMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(activeMode,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
194	[BUG]  [BUGGY]  final  phased)  {  closeEntry(activeMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  phased)  {  closeEntry(activeMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  phased)  {  closeEntry(activeMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(activeMode,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
195	[BUG]  [BUGGY]  phased)  {  closeEntry(activeMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  phased)  {  closeEntry(activeMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	phased)  {  closeEntry(activeMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(activeMode,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
196	[BUG]  [BUGGY]  finallyPhased)  {  closeCopiedEntry(new  Zip64Mode(effectiveMode,  phased));  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyPhased)  {  closeCopiedEntry(new  Zip64Mode(effectiveMode,  phased));  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyPhased)  {  closeCopiedEntry(new  Zip64Mode(effectiveMode,  phased));  }	  if(phased)    {    closeCopiedEntry(new    Zip64Mode(effectiveMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
197	[BUG]  [BUGGY]  finallyPhased(new  Zip64Mode(effectiveMode,  phased));  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyPhased(new  Zip64Mode(effectiveMode,  phased));  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyPhased(new  Zip64Mode(effectiveMode,  phased));	  if(phased)    {    closeCopiedEntry(new    Zip64Mode(effectiveMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
198	[BUG]  [BUGGY]  validatePhase(new  Zip64Mode(effectiveMode,  phased));  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  validatePhase(new  Zip64Mode(effectiveMode,  phased));  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	validatePhase(new  Zip64Mode(effectiveMode,  phased));	  if(phased)    {    closeCopiedEntry(new    Zip64Mode(effectiveMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
199	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(new  Zip64Mode(entry.bytesRead,  phased));  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(new  Zip64Mode(entry.bytesRead,  phased));  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(new  Zip64Mode(entry.bytesRead,  phased));  }	  if(phased)    {    closeCopiedEntry(new    Zip64Mode(effectiveMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
200	[BUG]  [BUGGY]  finallyPhased)  {  closeCopiedEntry(new  Zip64Mode(activeMode,  phased));  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyPhased)  {  closeCopiedEntry(new  Zip64Mode(activeMode,  phased));  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyPhased)  {  closeCopiedEntry(new  Zip64Mode(activeMode,  phased));  }	  if(phased)    {    closeCopiedEntry(new    Zip64Mode(activeMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
201	[BUG]  [BUGGY]  final  phased  =  closeCopiedEntry(new  Zip64Mode(activeMode,  phased));  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  phased  =  closeCopiedEntry(new  Zip64Mode(activeMode,  phased));  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  phased  =  closeCopiedEntry(new  Zip64Mode(activeMode,  phased));	  if(phased)    {    closeCopiedEntry(new    Zip64Mode(activeMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
202	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(new  Zip64Mode(activeMode,  trueNeedsZip64));  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(new  Zip64Mode(activeMode,  trueNeedsZip64));  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(new  Zip64Mode(activeMode,  trueNeedsZip64));  }	  if(phased)    {    closeCopiedEntry(new    Zip64Mode(activeMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
203	[BUG]  [BUGGY]  phased  =  closeCopiedEntry(new  Zip64Mode(activeMode,  phased));  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  phased  =  closeCopiedEntry(new  Zip64Mode(activeMode,  phased));  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	phased  =  closeCopiedEntry(new  Zip64Mode(activeMode,  phased));	  if(phased)    {    closeCopiedEntry(new    Zip64Mode(activeMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
204	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(new  Zip64Mode(activeMode,  actualNeedsZip64));  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(new  Zip64Mode(activeMode,  actualNeedsZip64));  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(new  Zip64Mode(activeMode,  actualNeedsZip64));  }	  if(phased)    {    closeCopiedEntry(new    Zip64Mode(activeMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
205	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  effectiveMode,  phased);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  effectiveMode,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  effectiveMode,  phased);	  closeEntry(entry.bytesRead,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
206	[BUG]  [BUGGY]  if(checkIfNeedsZip64)  {  closeEntry(entry.bytesRead,  effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64)  {  closeEntry(entry.bytesRead,  effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64)  {  closeEntry(entry.bytesRead,  effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  closeEntry(entry.bytesRead,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
207	[BUG]  [BUGGY]  if(checkIfNeedsZip64)  {  closeEntry(entry.bytesRead,  effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64)  {  closeEntry(entry.bytesRead,  effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64)  {  closeEntry(entry.bytesRead,  effectiveMode);  }	  closeEntry(entry.bytesRead,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
208	[BUG]  [BUGGY]  if(checkIfNeedsZip64)  {  closeEntry(entry.bytesRead,  effectiveMode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64)  {  closeEntry(entry.bytesRead,  effectiveMode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64)  {  closeEntry(entry.bytesRead,  effectiveMode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  closeEntry(entry.bytesRead,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
209	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  effectiveMode,  trueNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  effectiveMode,  trueNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  effectiveMode,  trueNeedsZip64);	  closeEntry(entry.bytesRead,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
210	[BUG]  [BUGGY]  if(effectiveMode)  {  closeEntry(entry.bytesRead,  effectiveMode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(effectiveMode)  {  closeEntry(entry.bytesRead,  effectiveMode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(effectiveMode)  {  closeEntry(entry.bytesRead,  effectiveMode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  closeEntry(entry.bytesRead,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
211	[BUG]  [BUGGY]  final  boolean  actuallyNeedsZip64  =  getIfNeedsZip64(efficientMode);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  actuallyNeedsZip64  =  getIfNeedsZip64(efficientMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  actuallyNeedsZip64  =  getIfNeedsZip64(efficientMode);	  final    boolean    actuallyNeedsZip64    =    checkIfNeedsZip64(efficientMode);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
212	[BUG]  [BUGGY]  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(efficientMode,  phased);  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(efficientMode,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(efficientMode,  phased);	  final    boolean    actuallyNeedsZip64    =    checkIfNeedsZip64(efficientMode);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
213	[BUG]  [BUGGY]  closeCopiedEntry(effectiveMode,  actualNeedsZip64,  phased);  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(effectiveMode,  actualNeedsZip64,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(effectiveMode,  actualNeedsZip64,  phased);	  closeCopiedEntry(phased,    actualNeedsZip64,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
214	[BUG]  [BUGGY]  closeCopiedEntry(entry.bytesRead,  phased,  effectiveMode);  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(entry.bytesRead,  phased,  effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(entry.bytesRead,  phased,  effectiveMode);	  closeCopiedEntry(phased,    actualNeedsZip64,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
215	[BUG]  [BUGGY]  closeCopiedEntry(entry.bytesRead,  actualNeedsZip64,  effectiveMode);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(entry.bytesRead,  actualNeedsZip64,  effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(entry.bytesRead,  actualNeedsZip64,  effectiveMode);	  closeCopiedEntry(phased,    actualNeedsZip64,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
216	[BUG]  [BUGGY]  if(actualNeedsZip64)  {  closeCopiedEntry(phased,  actualNeedsZip64,  effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(actualNeedsZip64)  {  closeCopiedEntry(phased,  actualNeedsZip64,  effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(actualNeedsZip64)  {  closeCopiedEntry(phased,  actualNeedsZip64,  effectiveMode);  }	  closeCopiedEntry(phased,    actualNeedsZip64,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
217	[BUG]  [BUGGY]  if(checkIfNeedsZip64)  {  closeCopiedEntry(phased,  actualNeedsZip64,  effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64)  {  closeCopiedEntry(phased,  actualNeedsZip64,  effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64)  {  closeCopiedEntry(phased,  actualNeedsZip64,  effectiveMode);  }	  closeCopiedEntry(phased,    actualNeedsZip64,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
218	[BUG]  [BUGGY]  finallyPhased)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyPhased)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyPhased)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
219	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
220	[BUG]  [BUGGY]  finallyPhased)  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyPhased)  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyPhased)  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
221	[BUG]  [BUGGY]  if(phased)  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  else  {  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.bytesRead);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  else  {  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.bytesRead);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  else  {  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.bytesRead);  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
222	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsChanged(phased,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsChanged(phased,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsChanged(phased,  actualNeedsZip64);	  final    boolean    phased    =    checkIfNeedsChanged(phased);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
223	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsChanged(phased,  trueNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsChanged(phased,  trueNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsChanged(phased,  trueNeedsZip64);	  final    boolean    phased    =    checkIfNeedsChanged(phased);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
224	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsChanged(phased,  false);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsChanged(phased,  false);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsChanged(phased,  false);	  final    boolean    phased    =    checkIfNeedsChanged(phased);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
225	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsChanged(phased,  true);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsChanged(phased,  true);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsChanged(phased,  true);	  final    boolean    phased    =    checkIfNeedsChanged(phased);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
226	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsChanged(phased,  actuallyNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsChanged(phased,  actuallyNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsChanged(phased,  actuallyNeedsZip64);	  final    boolean    phased    =    checkIfNeedsChanged(phased);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
227	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsChanged(phased,  effectiveMode);  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsChanged(phased,  effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsChanged(phased,  effectiveMode);	  final    boolean    phased    =    checkIfNeedsChanged(phased);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
228	[BUG]  [BUGGY]  CloseEntry(entry.bytesRead,  actualNeedsZip64,  phased);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  CloseEntry(entry.bytesRead,  actualNeedsZip64,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	CloseEntry(entry.bytesRead,  actualNeedsZip64,  phased);	  CloseEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
229	[BUG]  [BUGGY]  CloseEntry(entry.bytesRead,  actualNeedsZip64,  effectiveMode);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  CloseEntry(entry.bytesRead,  actualNeedsZip64,  effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	CloseEntry(entry.bytesRead,  actualNeedsZip64,  effectiveMode);	  CloseEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
230	[BUG]  [BUGGY]  CloseEntry(entry.bytesRead,  actualNeedsZip64,  trueMode);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  CloseEntry(entry.bytesRead,  actualNeedsZip64,  trueMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	CloseEntry(entry.bytesRead,  actualNeedsZip64,  trueMode);	  CloseEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
231	[BUG]  [BUGGY]  CloseEntry(entry.bytesRead,  effectiveMode,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  CloseEntry(entry.bytesRead,  effectiveMode,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	CloseEntry(entry.bytesRead,  effectiveMode,  actualNeedsZip64);	  CloseEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
232	[BUG]  [BUGGY]  CloseEntry(entry.bytesRead,  actualNeedsZip64,  checkIfNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  CloseEntry(entry.bytesRead,  actualNeedsZip64,  checkIfNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	CloseEntry(entry.bytesRead,  actualNeedsZip64,  checkIfNeedsZip64);	  CloseEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
233	[BUG]  [BUGGY]  CloseEntry(entry.bytesRead,  actualNeedsZip64,  trueNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  CloseEntry(entry.bytesRead,  actualNeedsZip64,  trueNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	CloseEntry(entry.bytesRead,  actualNeedsZip64,  trueNeedsZip64);	  CloseEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
234	[BUG]  [BUGGY]  CloseEntry(entry.bytesRead,  effectiveMode);  [CE]  illegal  start  of  expression  [FE]                                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  CloseEntry(entry.bytesRead,  effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	CloseEntry(entry.bytesRead,  effectiveMode);	  CloseEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
235	[BUG]  [BUGGY]  final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(actualMode,  phased);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(actualMode,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(actualMode,  phased);	  final    boolean    actualNeedsZip64    =    checkIfNeedsZip64(actualMode);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
236	[BUG]  [BUGGY]  final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(effectMode);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(effectMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(effectMode);	  final    boolean    actualNeedsZip64    =    checkIfNeedsZip64(actualMode);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
237	[BUG]  [BUGGY]  final  boolean  actualNeedsZip64  =  getIfNeedsZip64(actualMode);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  actualNeedsZip64  =  getIfNeedsZip64(actualMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  actualNeedsZip64  =  getIfNeedsZip64(actualMode);	  final    boolean    actualNeedsZip64    =    checkIfNeedsZip64(actualMode);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
238	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  actualNeedsZip64,  phased);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  actualNeedsZip64,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  actualNeedsZip64,  phased);	  closeEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
239	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  actualNeedsZip64,  effectiveMode);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  actualNeedsZip64,  effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  actualNeedsZip64,  effectiveMode);	  closeEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
240	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  actualNeedsZip64,  trueMode);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  actualNeedsZip64,  trueMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  actualNeedsZip64,  trueMode);	  closeEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
241	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  actualNeedsZip64,  trueNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  actualNeedsZip64,  trueNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  actualNeedsZip64,  trueNeedsZip64);	  closeEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
242	[BUG]  [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(mode);  }  else  {  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(mode);  }  else  {  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(mode);  }  else  {  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode);  }	  if(phased)    {    final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    }    else    {    Zip64Mode    mode    =    getMode();    closeCopiedEntry(mode);    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
243	[BUG]  [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(activeMode);  }  else  {  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(activeMode);  }  else  {  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(activeMode);  }  else  {  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode);  }	  if(phased)    {    final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    }    else    {    Zip64Mode    mode    =    getMode();    closeCopiedEntry(mode);    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
244	[BUG]  [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(module);  }  else  {  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(module);  }  else  {  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(module);  }  else  {  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode);  }	  if(phased)    {    final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    }    else    {    Zip64Mode    mode    =    getMode();    closeCopiedEntry(mode);    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
245	[BUG]  [BUGGY]  if(phased)  {  final  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  final  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  final  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode);  }	  if(phased)    {    final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    }    else    {    Zip64Mode    mode    =    getMode();    closeCopiedEntry(mode);    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
246	[BUG]  [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(activeMode,  phased));  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(activeMode,  phased));  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  effectiveMode  =  new  Zip64Mode(activeMode,  phased));	  final    Zip64Mode    effectiveMode    =    new    Zip64Mode(effectiveMode,    phased));    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
247	[BUG]  [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(phased,  effectiveMode));  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(phased,  effectiveMode));  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  effectiveMode  =  new  Zip64Mode(phased,  effectiveMode));	  final    Zip64Mode    effectiveMode    =    new    Zip64Mode(effectiveMode,    phased));    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
248	[BUG]  [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(mode,  phased));  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(mode,  phased));  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  effectiveMode  =  new  Zip64Mode(mode,  phased));	  final    Zip64Mode    effectiveMode    =    new    Zip64Mode(effectiveMode,    phased));    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
249	[BUG]  [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(entry.bytesRead,  phased));  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(entry.bytesRead,  phased));  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  effectiveMode  =  new  Zip64Mode(entry.bytesRead,  phased));	  final    Zip64Mode    effectiveMode    =    new    Zip64Mode(effectiveMode,    phased));    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
250	[BUG]  [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(effectiveMode,  phased,  zipEncoding));  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(effectiveMode,  phased,  zipEncoding));  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  effectiveMode  =  new  Zip64Mode(effectiveMode,  phased,  zipEncoding));	  final    Zip64Mode    effectiveMode    =    new    Zip64Mode(effectiveMode,    phased));    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
251	[BUG]  [BUGGY]  final  boolean  phased  =  actualNeedsZip64  >=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  actualNeedsZip64  >=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  actualNeedsZip64  >=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }	  if(actualNeedsZip64!=    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
252	[BUG]  [BUGGY]  final  boolean  phased  =  actualNeedsZip64  >>  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  actualNeedsZip64  >>  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  actualNeedsZip64  >>  phased)  {  closeEntry(phased,  actualNeedsZip64);  }	  if(actualNeedsZip64!=    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
253	[BUG]  [BUGGY]  finallyPhased)  {  closeEntry(phased,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyPhased)  {  closeEntry(phased,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyPhased)  {  closeEntry(phased,  actualNeedsZip64);  }	  if(phased)    {    closeEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
254	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry.bytesRead,  actualNeedsZip64);  }	  if(phased)    {    closeEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
255	[BUG]  [BUGGY]  final  phased  =  closeEntry(phased,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  phased  =  closeEntry(phased,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  phased  =  closeEntry(phased,  actualNeedsZip64);	  if(phased)    {    closeEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
256	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(entry,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry,  actualNeedsZip64);  }	  if(phased)    {    closeEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
257	[BUG]  [BUGGY]  finallyPhased(phased,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyPhased(phased,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyPhased(phased,  actualNeedsZip64);	  if(phased)    {    closeEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
258	[BUG]  [BUGGY]  finallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode,  phased);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode,  phased);	  finallyNeedsZip64    =    checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
259	[BUG]  [BUGGY]  final  boolean  finallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  finallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  finallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);	  finallyNeedsZip64    =    checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
260	[BUG]  [BUGGY]  finallyNeedsZip64  =  checkIfNeedsZip64(efficientMode,  phased);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyNeedsZip64  =  checkIfNeedsZip64(efficientMode,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyNeedsZip64  =  checkIfNeedsZip64(efficientMode,  phased);	  finallyNeedsZip64    =    checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
261	[BUG]  [BUGGY]  finallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode,  true);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode,  true);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode,  true);	  finallyNeedsZip64    =    checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
262	[BUG]  [BUGGY]  if(checkIfNeedsZip64)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  entry.bytesRead);  }  else  {  entry.bytesRead  =  zip64Mode;  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  entry.bytesRead);  }  else  {  entry.bytesRead  =  zip64Mode;  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  entry.bytesRead);  }  else  {  entry.bytesRead  =  zip64Mode;  }	  if(checkIfNeedsZip64)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    entry.bytesRead    =    zip64Mode;    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
263	[BUG]  [BUGGY]  if(phased)  {  checkIfNeedsZip64();  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  checkIfNeedsZip64();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  checkIfNeedsZip64();  }	  if(checkIfNeedsZip64)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    entry.bytesRead    =    zip64Mode;    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
264	[BUG]  [BUGGY]  if(checkIfNeedsZip64)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead  =  ZIP64Mode;  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead  =  ZIP64Mode;  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead  =  ZIP64Mode;  }	  if(checkIfNeedsZip64)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    entry.bytesRead    =    zip64Mode;    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
265	[BUG]  [BUGGY]  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(phased);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Zip64Mode  effectiveMode  =  checkIfNeedsZip64(phased);	  if(phased)    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
266	[BUG]  [BUGGY]  nchMode  =  checkIfNeedsZip64(effectiveMode);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  nchMode  =  checkIfNeedsZip64(effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	nchMode  =  checkIfNeedsZip64(effectiveMode);	  if(phased)    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
267	[BUG]  [BUGGY]  if(checkIfNeedsZip64)  {  zip64Mode  =  new  Zip64Mode(effectiveMode,  phased);  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64)  {  zip64Mode  =  new  Zip64Mode(effectiveMode,  phased);  }  else  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64)  {  zip64Mode  =  new  Zip64Mode(effectiveMode,  phased);  }  else  {  zip64Mode.close();  }	  if(checkIfNeedsZip64)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
268	[BUG]  [BUGGY]  if(checkIfNeedsZip64)  {  zip64Mode  =  new  Zip64Mode(effectiveMode,  phased);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64)  {  zip64Mode  =  new  Zip64Mode(effectiveMode,  phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64)  {  zip64Mode  =  new  Zip64Mode(effectiveMode,  phased);  }	  if(checkIfNeedsZip64)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
269	[BUG]  [BUGGY]  if(checkIfNeedsZip64)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  zip64Mode);  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  zip64Mode);  }  else  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  zip64Mode);  }  else  {  zip64Mode.close();  }	  if(checkIfNeedsZip64)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
270	[BUG]  [BUGGY]  stopCopiedEntry(entry.bytesRead,  phased);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  stopCopiedEntry(entry.bytesRead,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	stopCopiedEntry(entry.bytesRead,  phased);	  stopCopiedEntry(actuallyNeedsZip64,    phased);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
271	[BUG]  [BUGGY]  stopCopiedEntry(effectiveMode,  phased);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  stopCopiedEntry(effectiveMode,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	stopCopiedEntry(effectiveMode,  phased);	  stopCopiedEntry(actuallyNeedsZip64,    phased);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
272	[BUG]  [BUGGY]  stopCopiedEntry(new  Zip64Mode(effectiveMode,  phased));  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  stopCopiedEntry(new  Zip64Mode(effectiveMode,  phased));  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	stopCopiedEntry(new  Zip64Mode(effectiveMode,  phased));	  stopCopiedEntry(actuallyNeedsZip64,    phased);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
273	[BUG]  [BUGGY]  stopCopiedEntry(activeMode,  phased);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  stopCopiedEntry(activeMode,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	stopCopiedEntry(activeMode,  phased);	  stopCopiedEntry(actuallyNeedsZip64,    phased);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
274	[BUG]  [BUGGY]  stopCopiedEntry(step64Mode,  phased);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  stopCopiedEntry(step64Mode,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	stopCopiedEntry(step64Mode,  phased);	  stopCopiedEntry(actuallyNeedsZip64,    phased);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
275	[BUG]  [BUGGY]  stopCopiedEntry(entry,  phased);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  stopCopiedEntry(entry,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	stopCopiedEntry(entry,  phased);	  stopCopiedEntry(actuallyNeedsZip64,    phased);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
276	[BUG]  [BUGGY]  closeCopiedEntry(entry.bytesRead,  actualNeedsZip64,  phased);  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(entry.bytesRead,  actualNeedsZip64,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(entry.bytesRead,  actualNeedsZip64,  phased);	  closeCopiedEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
277	[BUG]  [BUGGY]  if(actualNeedsZip64)  {  closeCopiedEntry(entry.bytesRead,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(actualNeedsZip64)  {  closeCopiedEntry(entry.bytesRead,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(actualNeedsZip64)  {  closeCopiedEntry(entry.bytesRead,  actualNeedsZip64);  }	  closeCopiedEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
278	[BUG]  [BUGGY]  closeCopiedEntry(entry.bytesRead,  actualNeedsZip64,  trueMode);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(entry.bytesRead,  actualNeedsZip64,  trueMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(entry.bytesRead,  actualNeedsZip64,  trueMode);	  closeCopiedEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
279	[BUG]  [BUGGY]  closeCopiedEntry(entry.bytesRead,  trueNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(entry.bytesRead,  trueNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(entry.bytesRead,  trueNeedsZip64);	  closeCopiedEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
280	[BUG]  [BUGGY]  CloseCopiedEntry(entry.bytesRead,  actualNeedsZip64,  phased);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  CloseCopiedEntry(entry.bytesRead,  actualNeedsZip64,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	CloseCopiedEntry(entry.bytesRead,  actualNeedsZip64,  phased);	  closeCopiedEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
281	[BUG]  [BUGGY]  if(phased)  {  for(final  Zip64Mode  activeMode  :  activeModes)  {  checkIfNeedsZip64(activeMode);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  for(final  Zip64Mode  activeMode  :  activeModes)  {  checkIfNeedsZip64(activeMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  for(final  Zip64Mode  activeMode  :  activeModes)  {  checkIfNeedsZip64(activeMode);  }	  if(checkIfNeedsZip64)    {    for(final    Zip64Mode    activeMode    :    activeModes)    {    checkIfNeedsZip64(activeMode);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
282	[BUG]  [BUGGY]  for(final  Zip64Mode  activeMode  :  activeModes)  {  checkIfNeedsZip64(activeMode);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  for(final  Zip64Mode  activeMode  :  activeModes)  {  checkIfNeedsZip64(activeMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	for(final  Zip64Mode  activeMode  :  activeModes)  {  checkIfNeedsZip64(activeMode);  }	  if(checkIfNeedsZip64)    {    for(final    Zip64Mode    activeMode    :    activeModes)    {    checkIfNeedsZip64(activeMode);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
283	[BUG]  [BUGGY]  final  Zip64Mode  activeMode  =  checkIfNeedsZip64(activeMode);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  activeMode  =  checkIfNeedsZip64(activeMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  activeMode  =  checkIfNeedsZip64(activeMode);	  if(checkIfNeedsZip64)    {    for(final    Zip64Mode    activeMode    :    activeModes)    {    checkIfNeedsZip64(activeMode);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
284	[BUG]  [BUGGY]  final  Zip64Mode  activeMode  =  getActiveZip64Mode(entry.bytesRead);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  activeMode  =  getActiveZip64Mode(entry.bytesRead);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  activeMode  =  getActiveZip64Mode(entry.bytesRead);	  if(checkIfNeedsZip64)    {    for(final    Zip64Mode    activeMode    :    activeModes)    {    checkIfNeedsZip64(activeMode);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
285	[BUG]  [BUGGY]  final  Zip64Mode  activeMode  =  activeModes.get(activeMode);  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  activeMode  =  activeModes.get(activeMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  activeMode  =  activeModes.get(activeMode);	  if(checkIfNeedsZip64)    {    for(final    Zip64Mode    activeMode    :    activeModes)    {    checkIfNeedsZip64(activeMode);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
286	[BUG]  [BUGGY]  checkIfNeedsZip64(activeMode);  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  checkIfNeedsZip64(activeMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	checkIfNeedsZip64(activeMode);	  if(checkIfNeedsZip64)    {    for(final    Zip64Mode    activeMode    :    activeModes)    {    checkIfNeedsZip64(activeMode);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
287	[BUG]  [BUGGY]  Final  boolean  phased  =  checkIfNeedsZip64(phased,  false);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Final  boolean  phased  =  checkIfNeedsZip64(phased,  false);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Final  boolean  phased  =  checkIfNeedsZip64(phased,  false);	  final    boolean    phased    =    checkIfNeedsZip64(phased,    true);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
288	[BUG]  [BUGGY]  final  boolean  phased  =  checkedIfNeedsZip64(phased,  false);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkedIfNeedsZip64(phased,  false);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkedIfNeedsZip64(phased,  false);	  final    boolean    phased    =    checkIfNeedsZip64(phased,    true);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
289	[BUG]  [BUGGY]  static  final  boolean  phased  =  checkIfNeedsZip64(phased,  false);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  static  final  boolean  phased  =  checkIfNeedsZip64(phased,  false);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	static  final  boolean  phased  =  checkIfNeedsZip64(phased,  false);	  final    boolean    phased    =    checkIfNeedsZip64(phased,    true);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
290	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  checkIfNeedsZip64(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(phased)  {  checkIfNeedsZip64(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  checkIfNeedsZip64(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  Preconditions.checkState(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
291	[BUG]  [BUGGY]  final  Preconditions.checkState(phased)  {  closeEntry(actuallyNeedsZip64,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Preconditions.checkState(phased)  {  closeEntry(actuallyNeedsZip64,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Preconditions.checkState(phased)  {  closeEntry(actuallyNeedsZip64,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  Preconditions.checkState(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
292	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  closeCopiedEntry(actuallyNeedsZip64,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(phased)  {  closeCopiedEntry(actuallyNeedsZip64,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  closeCopiedEntry(actuallyNeedsZip64,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  Preconditions.checkState(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
293	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  closeCopiedEntry(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(phased)  {  closeCopiedEntry(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  closeCopiedEntry(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  Preconditions.checkState(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
294	[BUG]  [BUGGY]  final  Preconditions.checkState(phased)  {  checkIfNeedsZip64(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Preconditions.checkState(phased)  {  checkIfNeedsZip64(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Preconditions.checkState(phased)  {  checkIfNeedsZip64(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  Preconditions.checkState(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
295	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  Preconditions.checkState(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
296	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(phased)  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  checkIfNeedsZip64(effectiveMode);  }	  Preconditions.checkState(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
297	[BUG]  [BUGGY]  final  boolean  finallyNeedsZip64  =  checkIfNeedsZip64(phased);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  finallyNeedsZip64  =  checkIfNeedsZip64(phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  finallyNeedsZip64  =  checkIfNeedsZip64(phased);	  finallyNeedsZip64    =    checkIfNeedsZip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
298	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  phased,  effectiveMode,  actuallyNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  phased,  effectiveMode,  actuallyNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  phased,  effectiveMode,  actuallyNeedsZip64);	  closeEntry(entry.bytesRead,    phased,    actuallyNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
299	[BUG]  [BUGGY]  CloseEntry(entry.bytesRead,  phased,  effectiveMode,  actuallyNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  CloseEntry(entry.bytesRead,  phased,  effectiveMode,  actuallyNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	CloseEntry(entry.bytesRead,  phased,  effectiveMode,  actuallyNeedsZip64);	  closeEntry(entry.bytesRead,    phased,    actuallyNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
300	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  phased,  effectivenessMode,  actuallyNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  phased,  effectivenessMode,  actuallyNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  phased,  effectivenessMode,  actuallyNeedsZip64);	  closeEntry(entry.bytesRead,    phased,    actuallyNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
301	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  phased,  effectiveMode,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  phased,  effectiveMode,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  phased,  effectiveMode,  actualNeedsZip64);	  closeEntry(entry.bytesRead,    phased,    actuallyNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
302	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  phased,  effectivelyNeedsZip64,  trueMode);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  phased,  effectivelyNeedsZip64,  trueMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  phased,  effectivelyNeedsZip64,  trueMode);	  closeEntry(entry.bytesRead,    phased,    actuallyNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
303	[BUG]  [BUGGY]  CloseEntry(entry.bytesRead,  phased,  effectiveMode);  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  CloseEntry(entry.bytesRead,  phased,  effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	CloseEntry(entry.bytesRead,  phased,  effectiveMode);	  closeEntry(entry.bytesRead,    phased,    actuallyNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
304	[BUG]  [BUGGY]  finallyPhased)  {  closeEntry(entry,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyPhased)  {  closeEntry(entry,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyPhased)  {  closeEntry(entry,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
305	[BUG]  [BUGGY]  if(checkIfNeedsZip64)  {  closeEntry(entry.bytesRead,  phased,  effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64)  {  closeEntry(entry.bytesRead,  phased,  effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64)  {  closeEntry(entry.bytesRead,  phased,  effectiveMode);  }	  closeEntry(entry.bytesRead,    phased,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
306	[BUG]  [BUGGY]  zip64Mode  =  checkIfNeedsZip64(effectiveMode,  phased);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  zip64Mode  =  checkIfNeedsZip64(effectiveMode,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	zip64Mode  =  checkIfNeedsZip64(effectiveMode,  phased);	  zip64Mode    =    checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
307	[BUG]  [BUGGY]  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);	  zip64Mode    =    checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
308	[BUG]  [BUGGY]  zip64Mode  =  checkIfNeedsZip64(efficientMode);  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  zip64Mode  =  checkIfNeedsZip64(efficientMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	zip64Mode  =  checkIfNeedsZip64(efficientMode);	  zip64Mode    =    checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
309	[BUG]  [BUGGY]  zip64Mode  =  checkIfNeedsZip64(efficientMode,  phased);  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  zip64Mode  =  checkIfNeedsZip64(efficientMode,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	zip64Mode  =  checkIfNeedsZip64(efficientMode,  phased);	  zip64Mode    =    checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
310	[BUG]  [BUGGY]  zip64Mode  =  checkIfNeedsZip64(activeMode);  [CE]  illegal  start  of  expression  [FE]                                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  zip64Mode  =  checkIfNeedsZip64(activeMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	zip64Mode  =  checkIfNeedsZip64(activeMode);	  zip64Mode    =    checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
311	[BUG]  [BUGGY]  zip64Mode  =  checkIfNeedsZip64(phased);  [CE]  illegal  start  of  expression  [FE]                                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  zip64Mode  =  checkIfNeedsZip64(phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	zip64Mode  =  checkIfNeedsZip64(phased);	  zip64Mode    =    checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
312	[BUG]  [BUGGY]  if(phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode  =  getCopiedZip64Mode(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode  =  getCopiedZip64Mode(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode  =  getCopiedZip64Mode(effectiveMode);  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    zip64Mode    =    getCopiedZip64Mode(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
313	[BUG]  [BUGGY]  zip64Mode  =  getCopiedZip64Mode(effectiveMode);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  zip64Mode  =  getCopiedZip64Mode(effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	zip64Mode  =  getCopiedZip64Mode(effectiveMode);	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    zip64Mode    =    getCopiedZip64Mode(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
314	[BUG]  [BUGGY]  if(phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(effectiveMode);  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    zip64Mode    =    getCopiedZip64Mode(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
315	[BUG]  [BUGGY]  if(phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode  =  getCopiedZip64Mode(efficientMode);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode  =  getCopiedZip64Mode(efficientMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode  =  getCopiedZip64Mode(efficientMode);  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    zip64Mode    =    getCopiedZip64Mode(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
316	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsPaint(phased,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsPaint(phased,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsPaint(phased,  actualNeedsZip64);	  final    boolean    phased    =    checkIfNeedsPaint(phased);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
317	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsPaint(phased,  trueNeedsZip64);  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsPaint(phased,  trueNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsPaint(phased,  trueNeedsZip64);	  final    boolean    phased    =    checkIfNeedsPaint(phased);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
318	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsPaint(phased,  false);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsPaint(phased,  false);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsPaint(phased,  false);	  final    boolean    phased    =    checkIfNeedsPaint(phased);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
319	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsPaint(phased,  actuallyNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsPaint(phased,  actuallyNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsPaint(phased,  actuallyNeedsZip64);	  final    boolean    phased    =    checkIfNeedsPaint(phased);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
320	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsPaint(phased,  true);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsPaint(phased,  true);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsPaint(phased,  true);	  final    boolean    phased    =    checkIfNeedsPaint(phased);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
321	[BUG]  [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(activeMode,  phased);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(activeMode,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  effectiveMode  =  new  Zip64Mode(activeMode,  phased);	  final    Zip64Mode    effectiveMode    =    new    Zip64Mode(effectiveMode,    phased);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
322	[BUG]  [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(phased,  effectiveMode);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(phased,  effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  effectiveMode  =  new  Zip64Mode(phased,  effectiveMode);	  final    Zip64Mode    effectiveMode    =    new    Zip64Mode(effectiveMode,    phased);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
323	[BUG]  [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(mode,  phased);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(mode,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  effectiveMode  =  new  Zip64Mode(mode,  phased);	  final    Zip64Mode    effectiveMode    =    new    Zip64Mode(effectiveMode,    phased);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
324	[BUG]  [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(effectiveMode,  phased,  trueNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(effectiveMode,  phased,  trueNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  effectiveMode  =  new  Zip64Mode(effectiveMode,  phased,  trueNeedsZip64);	  final    Zip64Mode    effectiveMode    =    new    Zip64Mode(effectiveMode,    phased);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
325	[BUG]  [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(effectiveMode,  phased,  zipEncoding);  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(effectiveMode,  phased,  zipEncoding);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  effectiveMode  =  new  Zip64Mode(effectiveMode,  phased,  zipEncoding);	  final    Zip64Mode    effectiveMode    =    new    Zip64Mode(effectiveMode,    phased);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
326	[BUG]  [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(effectiveMode,  phased,  checkIfNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(effectiveMode,  phased,  checkIfNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  effectiveMode  =  new  Zip64Mode(effectiveMode,  phased,  checkIfNeedsZip64);	  final    Zip64Mode    effectiveMode    =    new    Zip64Mode(effectiveMode,    phased);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
327	[BUG]  [BUGGY]  final  phased)  {  closeCopiedEntry(actuallyNeedsZip64,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  phased)  {  closeCopiedEntry(actuallyNeedsZip64,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  phased)  {  closeCopiedEntry(actuallyNeedsZip64,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeCopiedEntry(actuallyNeedsZip64,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
328	[BUG]  [BUGGY]  phased)  {  closeCopiedEntry(actuallyNeedsZip64,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  phased)  {  closeCopiedEntry(actuallyNeedsZip64,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	phased)  {  closeCopiedEntry(actuallyNeedsZip64,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeCopiedEntry(actuallyNeedsZip64,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
329	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(actuallyNeedsZip64,  effectiveMode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(actuallyNeedsZip64,  effectiveMode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(actuallyNeedsZip64,  effectiveMode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeCopiedEntry(actuallyNeedsZip64,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
330	[BUG]  [BUGGY]  finallyPhased)  {  closeCopiedEntry(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyPhased)  {  closeCopiedEntry(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyPhased)  {  closeCopiedEntry(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeCopiedEntry(effectiveMode,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
331	[BUG]  [BUGGY]  final  phased)  {  closeCopiedEntry(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  phased)  {  closeCopiedEntry(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  phased)  {  closeCopiedEntry(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeCopiedEntry(effectiveMode,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
332	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(efficientMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(efficientMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(efficientMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeCopiedEntry(effectiveMode,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
333	[BUG]  [BUGGY]  final  boolean  phased  =  checkPasedZip64(phased,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkPasedZip64(phased,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkPasedZip64(phased,  actualNeedsZip64);	  final    boolean    phased    =    checkPasedZip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
334	[BUG]  [BUGGY]  final  boolean  phased  =  checkPasedZip64(phased,  trueNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkPasedZip64(phased,  trueNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkPasedZip64(phased,  trueNeedsZip64);	  final    boolean    phased    =    checkPasedZip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
335	[BUG]  [BUGGY]  final  boolean  phased  =  checkPasedZip64(phased,  false);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkPasedZip64(phased,  false);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkPasedZip64(phased,  false);	  final    boolean    phased    =    checkPasedZip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
336	[BUG]  [BUGGY]  final  boolean  phased  =  checkPasedZip64(phased,  true);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkPasedZip64(phased,  true);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkPasedZip64(phased,  true);	  final    boolean    phased    =    checkPasedZip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
337	[BUG]  [BUGGY]  final  boolean  phased  =  checkPasedZip64(phased,  actuallyNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkPasedZip64(phased,  actuallyNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkPasedZip64(phased,  actuallyNeedsZip64);	  final    boolean    phased    =    checkPasedZip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
338	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(entry,  phased);  }  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(entry,  phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(entry,  phased);  }	  if(phased)    {    closeEntry(entry,    phased);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
339	[BUG]  [BUGGY]  finallyPhased)  {  closeEntry(entry,  phased);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyPhased)  {  closeEntry(entry,  phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyPhased)  {  closeEntry(entry,  phased);  }	  if(phased)    {    closeEntry(entry,    phased);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
340	[BUG]  [BUGGY]  finallyNeedsZip64)  {  closeEntry(entry,  phased);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyNeedsZip64)  {  closeEntry(entry,  phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyNeedsZip64)  {  closeEntry(entry,  phased);  }	  if(phased)    {    closeEntry(entry,    phased);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
341	[BUG]  [BUGGY]  final  phased)  {  closeEntry(entry,  phased);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  phased)  {  closeEntry(entry,  phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  phased)  {  closeEntry(entry,  phased);  }	  if(phased)    {    closeEntry(entry,    phased);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
342	[BUG]  [BUGGY]  if(phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode.close();  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
343	[BUG]  [BUGGY]  zip64Mode.close();  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  zip64Mode.close();  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	zip64Mode.close();	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
344	[BUG]  [BUGGY]  if(checkIfNeedsZip64)  {  checkIfNeedsZip64(efficientMode);  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64)  {  checkIfNeedsZip64(efficientMode);  }  else  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64)  {  checkIfNeedsZip64(efficientMode);  }  else  {  zip64Mode.close();  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
345	[BUG]  [BUGGY]  stopCopiedEntry(entry.bytesRead,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  stopCopiedEntry(entry.bytesRead,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	stopCopiedEntry(entry.bytesRead,  actualNeedsZip64);	  stopCopiedEntry(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
346	[BUG]  [BUGGY]  stopCopiedEntry(phased,  actualNeedsZip64,  effectiveMode);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  stopCopiedEntry(phased,  actualNeedsZip64,  effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	stopCopiedEntry(phased,  actualNeedsZip64,  effectiveMode);	  stopCopiedEntry(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
347	[BUG]  [BUGGY]  stopCopiedEntry(phased,  trueNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  stopCopiedEntry(phased,  trueNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	stopCopiedEntry(phased,  trueNeedsZip64);	  stopCopiedEntry(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
348	[BUG]  [BUGGY]  stopCopiedEntry(phased,  actualNeedsZip64,  trueMode);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  stopCopiedEntry(phased,  actualNeedsZip64,  trueMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	stopCopiedEntry(phased,  actualNeedsZip64,  trueMode);	  stopCopiedEntry(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
349	[BUG]  [BUGGY]  stopCopiedEntry(entry,  phased,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  stopCopiedEntry(entry,  phased,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	stopCopiedEntry(entry,  phased,  actualNeedsZip64);	  stopCopiedEntry(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
350	[BUG]  [BUGGY]  stopCopiedEntry(entry.bytesRead,  phased,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  stopCopiedEntry(entry.bytesRead,  phased,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	stopCopiedEntry(entry.bytesRead,  phased,  actualNeedsZip64);	  stopCopiedEntry(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
351	[BUG]  [BUGGY]  final  boolean  phased  =  actualNeedsZip64  ==  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(activeMode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  actualNeedsZip64  ==  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(activeMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  actualNeedsZip64  ==  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(activeMode);  }	  if(actualNeedsZip64    ==    phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualMode);    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
352	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(effectiveMode,  phased);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(effectiveMode,  phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(effectiveMode,  phased);  }	  if(phased)    {    closeEntry(effectiveMode,    phased);    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
353	[BUG]  [BUGGY]  finallyPhased)  {  closeEntry(effectiveMode,  phased);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyPhased)  {  closeEntry(effectiveMode,  phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyPhased)  {  closeEntry(effectiveMode,  phased);  }	  if(phased)    {    closeEntry(effectiveMode,    phased);    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
354	[BUG]  [BUGGY]  phased  =  checkIfNeedsZip64(effectiveMode);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  phased  =  checkIfNeedsZip64(effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	phased  =  checkIfNeedsZip64(effectiveMode);	  if(phased)    {    closeEntry(effectiveMode,    phased);    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
355	[BUG]  [BUGGY]  final  phased)  {  closeEntry(effectiveMode,  phased);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  phased)  {  closeEntry(effectiveMode,  phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  phased)  {  closeEntry(effectiveMode,  phased);  }	  if(phased)    {    closeEntry(effectiveMode,    phased);    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
356	[BUG]  [BUGGY]  closeEntry(entry,  phased,  actualNeedsZip64,  effectiveMode);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry,  phased,  actualNeedsZip64,  effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry,  phased,  actualNeedsZip64,  effectiveMode);	  closeEntry(entry,    phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
357	[BUG]  [BUGGY]  closeEntry(entry,  phased,  actualNeedsZip64,  trueMode);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry,  phased,  actualNeedsZip64,  trueMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry,  phased,  actualNeedsZip64,  trueMode);	  closeEntry(entry,    phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
358	[BUG]  [BUGGY]  closeEntry(entry,  phased,  actualNeedsZip64,  actuallyNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry,  phased,  actualNeedsZip64,  actuallyNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry,  phased,  actualNeedsZip64,  actuallyNeedsZip64);	  closeEntry(entry,    phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
359	[BUG]  [BUGGY]  CloseEntry(entry.bytesRead,  phased,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  CloseEntry(entry.bytesRead,  phased,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	CloseEntry(entry.bytesRead,  phased,  actualNeedsZip64);	  closeEntry(entry,    phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
360	[BUG]  [BUGGY]  openEntry(entry.bytesRead,  phased,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  openEntry(entry.bytesRead,  phased,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	openEntry(entry.bytesRead,  phased,  actualNeedsZip64);	  closeEntry(entry,    phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
361	[BUG]  [BUGGY]  closeEntry(entry,  phased,  actualNeedsZip64,  false);  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry,  phased,  actualNeedsZip64,  false);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry,  phased,  actualNeedsZip64,  false);	  closeEntry(entry,    phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
362	[BUG]  [BUGGY]  final  Zip64Mode  mode  =  checkIfNeedsZip64(effectiveMode,  phased);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  mode  =  checkIfNeedsZip64(effectiveMode,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  mode  =  checkIfNeedsZip64(effectiveMode,  phased);	  final    Zip64Mode    mode    =    checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
363	[BUG]  [BUGGY]  final  Zip64Mode  mode  =  checkIfNeedsZip64(activeMode);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  mode  =  checkIfNeedsZip64(activeMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  mode  =  checkIfNeedsZip64(activeMode);	  final    Zip64Mode    mode    =    checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
364	[BUG]  [BUGGY]  final  Zip64Mode  mode  =  checkIfNeedsZip64(efficientMode,  phased);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  mode  =  checkIfNeedsZip64(efficientMode,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  mode  =  checkIfNeedsZip64(efficientMode,  phased);	  final    Zip64Mode    mode    =    checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
365	[BUG]  [BUGGY]  final  Zip64Mode  mode  =  checkIfNeedsZip64(efficientMode);  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  mode  =  checkIfNeedsZip64(efficientMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  mode  =  checkIfNeedsZip64(efficientMode);	  final    Zip64Mode    mode    =    checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
366	[BUG]  [BUGGY]  final  Zip64Mode  mode  =  checkIfNeedsZip64(entry.bytesRead);  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  mode  =  checkIfNeedsZip64(entry.bytesRead);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  mode  =  checkIfNeedsZip64(entry.bytesRead);	  final    Zip64Mode    mode    =    checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
367	[BUG]  [BUGGY]  final  Zip64Mode  mode  =  checkIfNeedsZip64(phased);  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  mode  =  checkIfNeedsZip64(phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  mode  =  checkIfNeedsZip64(phased);	  final    Zip64Mode    mode    =    checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
368	[BUG]  [BUGGY]  CheckIfNeedsZip64(effectiveMode);  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  CheckIfNeedsZip64(effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	CheckIfNeedsZip64(effectiveMode);	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
369	[BUG]  [BUGGY]  final  boolean  phased)  {  closeEntry(actuallyNeedsZip64,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased)  {  closeEntry(actuallyNeedsZip64,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased)  {  closeEntry(actuallyNeedsZip64,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  final    phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
370	[BUG]  [BUGGY]  final  boolean  phased)  {  closeEntry(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased)  {  closeEntry(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased)  {  closeEntry(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  final    phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
371	[BUG]  [BUGGY]  final  boolean  phased)  {  closeCopiedEntry(actuallyNeedsZip64,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased)  {  closeCopiedEntry(actuallyNeedsZip64,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased)  {  closeCopiedEntry(actuallyNeedsZip64,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  final    phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
372	[BUG]  [BUGGY]  final  boolean  phased)  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased)  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased)  {  checkIfNeedsZip64(effectiveMode);  }	  final    phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
373	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsSip64(phased,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsSip64(phased,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsSip64(phased,  actualNeedsZip64);	  final    boolean    phased    =    checkIfNeedsSip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
374	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsSip64(phased,  trueNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsSip64(phased,  trueNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsSip64(phased,  trueNeedsZip64);	  final    boolean    phased    =    checkIfNeedsSip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
375	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsSip64(phased,  actuallyNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsSip64(phased,  actuallyNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsSip64(phased,  actuallyNeedsZip64);	  final    boolean    phased    =    checkIfNeedsSip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
376	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsSip64(phased,  false);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsSip64(phased,  false);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsSip64(phased,  false);	  final    boolean    phased    =    checkIfNeedsSip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
377	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsSip64(phased,  true);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsSip64(phased,  true);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsSip64(phased,  true);	  final    boolean    phased    =    checkIfNeedsSip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
378	[BUG]  [BUGGY]  if(phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getBytesRead();  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getBytesRead();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getBytesRead();  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    entry.bytesRead    =    entry.getBytesRead();    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
379	[BUG]  [BUGGY]  if(!phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getBytesRead();  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(!phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getBytesRead();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(!phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getBytesRead();  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    entry.bytesRead    =    entry.getBytesRead();    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
380	[BUG]  [BUGGY]  if(checkIfNeedsZip64)  {  checkIfNeedsZip64(efficientMode);  }  else  {  entry.bytesRead  =  entry.getBytesRead();  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64)  {  checkIfNeedsZip64(efficientMode);  }  else  {  entry.bytesRead  =  entry.getBytesRead();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64)  {  checkIfNeedsZip64(efficientMode);  }  else  {  entry.bytesRead  =  entry.getBytesRead();  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    entry.bytesRead    =    entry.getBytesRead();    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
381	[BUG]  [BUGGY]  openEntry(entry.bytesRead,  actualNeedsZip64,  phased);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  openEntry(entry.bytesRead,  actualNeedsZip64,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	openEntry(entry.bytesRead,  actualNeedsZip64,  phased);	  openEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
382	[BUG]  [BUGGY]  openEntry(entry.bytesRead,  actualNeedsZip64,  trueMode);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  openEntry(entry.bytesRead,  actualNeedsZip64,  trueMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	openEntry(entry.bytesRead,  actualNeedsZip64,  trueMode);	  openEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
383	[BUG]  [BUGGY]  openEntry(entry.bytesRead,  actualNeedsZip64,  trueNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  openEntry(entry.bytesRead,  actualNeedsZip64,  trueNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	openEntry(entry.bytesRead,  actualNeedsZip64,  trueNeedsZip64);	  openEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
384	[BUG]  [BUGGY]  openEntry(entry.bytesRead,  trueNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  openEntry(entry.bytesRead,  trueNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	openEntry(entry.bytesRead,  trueNeedsZip64);	  openEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
385	[BUG]  [BUGGY]  openEntry(entry.bytesRead,  actualNeedsZip64,  effectiveMode);  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  openEntry(entry.bytesRead,  actualNeedsZip64,  effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	openEntry(entry.bytesRead,  actualNeedsZip64,  effectiveMode);	  openEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
386	[BUG]  [BUGGY]  openEntry(entry.bytesRead,  effectiveMode);  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  openEntry(entry.bytesRead,  effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	openEntry(entry.bytesRead,  effectiveMode);	  openEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
387	[BUG]  [BUGGY]  openEntry(entry.bytesRead,  actualNeedsZip64,  checkIfNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  openEntry(entry.bytesRead,  actualNeedsZip64,  checkIfNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	openEntry(entry.bytesRead,  actualNeedsZip64,  checkIfNeedsZip64);	  openEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
388	[BUG]  [BUGGY]  finallyPhased)  {  closeEntry(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyPhased)  {  closeEntry(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyPhased)  {  closeEntry(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(effectiveMode,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
389	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(efficientMode);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(efficientMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(efficientMode);  }	  if(phased)    {    closeEntry(entry.bytesRead,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
390	[BUG]  [BUGGY]  if(phased)  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  else  {  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.bytesRead,  phased);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  else  {  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.bytesRead,  phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  else  {  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.bytesRead,  phased);  }	  if(phased)    {    closeEntry(entry.bytesRead,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
391	[BUG]  [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(phased);  }  else  {  preClose();  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(phased);  }  else  {  preClose();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(phased);  }  else  {  preClose();  }	  if(phased)    {    final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    }    else    {    preClose();    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
392	[BUG]  [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(effectiveMode);  }  else  {  preClose();  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(effectiveMode);  }  else  {  preClose();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(effectiveMode);  }  else  {  preClose();  }	  if(phased)    {    final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    }    else    {    preClose();    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
393	[BUG]  [BUGGY]  finallyPhased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyPhased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyPhased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(entry.bytesRead,    phased);    }    else    {    Zip64Mode    effectiveMode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
394	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(efficientMode);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(efficientMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(efficientMode);  }	  if(phased)    {    closeEntry(entry.bytesRead,    phased);    }    else    {    Zip64Mode    effectiveMode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
395	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  Phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  Phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry.bytesRead,  Phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(entry.bytesRead,    phased);    }    else    {    Zip64Mode    effectiveMode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
396	[BUG]  [BUGGY]  closeCopiedEntry(entry,  phased,  actualNeedsZip64,  actuallyNeedsZip64);  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(entry,  phased,  actualNeedsZip64,  actuallyNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(entry,  phased,  actualNeedsZip64,  actuallyNeedsZip64);	  closeCopiedEntry(entry,    phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
397	[BUG]  [BUGGY]  closeCopiedEntry(entry,  phased,  actualNeedsZip64,  effectiveMode);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(entry,  phased,  actualNeedsZip64,  effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(entry,  phased,  actualNeedsZip64,  effectiveMode);	  closeCopiedEntry(entry,    phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
398	[BUG]  [BUGGY]  closeCopiedEntry(entry,  phased,  actualNeedsZip64,  trueMode);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(entry,  phased,  actualNeedsZip64,  trueMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(entry,  phased,  actualNeedsZip64,  trueMode);	  closeCopiedEntry(entry,    phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
399	[BUG]  [BUGGY]  CloseCopiedEntry(entry.bytesRead,  phased,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  CloseCopiedEntry(entry.bytesRead,  phased,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	CloseCopiedEntry(entry.bytesRead,  phased,  actualNeedsZip64);	  closeCopiedEntry(entry,    phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
400	[BUG]  [BUGGY]  closeCopiedEntry(entry,  phased,  actualNeedsZip64,  realMode);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(entry,  phased,  actualNeedsZip64,  realMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(entry,  phased,  actualNeedsZip64,  realMode);	  closeCopiedEntry(entry,    phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
401	[BUG]  [BUGGY]  closeCopiedEntry(entry,  phased,  actualNeedsZip64,  actualMode);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(entry,  phased,  actualNeedsZip64,  actualMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(entry,  phased,  actualNeedsZip64,  actualMode);	  closeCopiedEntry(entry,    phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
402	[BUG]  [BUGGY]  if(phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }	  if(actualNeedsZip64!=    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
403	[BUG]  [BUGGY]  final  boolean  phased  =  actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }	  if(actualNeedsZip64!=    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
404	[BUG]  [BUGGY]  final  boolean  phased  =  actualNeedsZip64  ==  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  actualNeedsZip64  ==  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  actualNeedsZip64  ==  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }	  if(actualNeedsZip64!=    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
405	[BUG]  [BUGGY]  if(phased)  {  checkIfNeedsZip64(actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  checkIfNeedsZip64(actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  checkIfNeedsZip64(actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }	  if(actualNeedsZip64!=    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
406	[BUG]  [BUGGY]  final  boolean  phased  =  actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(phased);  }  [CE]  illegal  start  of  expression  [FE]                                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(phased);  }	  if(actualNeedsZip64!=    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
407	[BUG]  [BUGGY]  final  boolean  phased  =  actualNeedsZip64  ==  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(phased);  }  [CE]  illegal  start  of  expression  [FE]                                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  actualNeedsZip64  ==  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  actualNeedsZip64  ==  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(phased);  }	  if(actualNeedsZip64!=    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
408	[BUG]  [BUGGY]  final  boolean  phased  =  actualNeedsZip64!=  phased)  {  checkIfNeedsZip64(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(phased);  }  [CE]  illegal  start  of  expression  [FE]                                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  actualNeedsZip64!=  phased)  {  checkIfNeedsZip64(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  actualNeedsZip64!=  phased)  {  checkIfNeedsZip64(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(phased);  }	  if(actualNeedsZip64!=    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
409	[BUG]  [BUGGY]  finallyPhased)  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyPhased)  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyPhased)  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
410	[BUG]  [BUGGY]  if(phased)  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
411	[BUG]  [BUGGY]  finallyPhased)  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(efficientMode);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyPhased)  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(efficientMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyPhased)  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(efficientMode);  }	  if(phased)    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
412	[BUG]  [BUGGY]  if(phased)  {  zip64Mode  =  checkIfNeedsZip64(efficientMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  zip64Mode  =  checkIfNeedsZip64(efficientMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  zip64Mode  =  checkIfNeedsZip64(efficientMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
413	[BUG]  [BUGGY]  if(phased)  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(efficientMode);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(efficientMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(efficientMode);  }	  if(phased)    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
414	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(phased,  trueNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(phased,  trueNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(phased,  trueNeedsZip64);  }	  closeCopiedEntry(phased,    trueNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
415	[BUG]  [BUGGY]  if(checkIfNeedsZip64)  {  closeCopiedEntry(phased,  trueNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64)  {  closeCopiedEntry(phased,  trueNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64)  {  closeCopiedEntry(phased,  trueNeedsZip64);  }	  closeCopiedEntry(phased,    trueNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
416	[BUG]  [BUGGY]  closeCopiedEntry(phased,  trueNeedsZip64,  false);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(phased,  trueNeedsZip64,  false);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(phased,  trueNeedsZip64,  false);	  closeCopiedEntry(phased,    trueNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
417	[BUG]  [BUGGY]  closeCopiedEntry(phased,  trueNeedsZip64,  trueMode);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(phased,  trueNeedsZip64,  trueMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(phased,  trueNeedsZip64,  trueMode);	  closeCopiedEntry(phased,    trueNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
418	[BUG]  [BUGGY]  closeCopiedEntry(phased,  falseNeedsZip64,  trueNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(phased,  falseNeedsZip64,  trueNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(phased,  falseNeedsZip64,  trueNeedsZip64);	  closeCopiedEntry(phased,    trueNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
419	[BUG]  [BUGGY]  final  boolean  phased  =  trueNeedsZip64;  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  trueNeedsZip64;  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  trueNeedsZip64;	  closeCopiedEntry(phased,    trueNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
420	[BUG]  [BUGGY]  closeCopiedEntry(phased,  trueNeedsZip64,  effectiveMode);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(phased,  trueNeedsZip64,  effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(phased,  trueNeedsZip64,  effectiveMode);	  closeCopiedEntry(phased,    trueNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
421	[BUG]  [BUGGY]  finallyNeedsZip64)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyNeedsZip64)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyNeedsZip64)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }	  if(phased)    {    closeEntry(entry.bytesRead,    phased);    }    else    {    zip64Mode    =    getCopiedZip64Mode(entry.bytesRead);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
422	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(entry.bytesRead);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(entry.bytesRead);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(entry.bytesRead);  }	  if(phased)    {    closeEntry(entry.bytesRead,    phased);    }    else    {    zip64Mode    =    getCopiedZip64Mode(entry.bytesRead);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
423	[BUG]  [BUGGY]  if(phased)  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }  else  {  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(entry.bytesRead);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }  else  {  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(entry.bytesRead);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }  else  {  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(entry.bytesRead);  }	  if(phased)    {    closeEntry(entry.bytesRead,    phased);    }    else    {    zip64Mode    =    getCopiedZip64Mode(entry.bytesRead);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
424	[BUG]  [BUGGY]  if(phased)  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }	  if(phased)    {    closeEntry(entry.bytesRead,    phased);    }    else    {    zip64Mode    =    getCopiedZip64Mode(entry.bytesRead);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
425	[BUG]  [BUGGY]  closeEntry(effectiveMode,  actualNeedsZip64,  phased);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(effectiveMode,  actualNeedsZip64,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(effectiveMode,  actualNeedsZip64,  phased);	  closeEntry(phased,    actualNeedsZip64,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
426	[BUG]  [BUGGY]  closeEntry(entry,  actualNeedsZip64,  effectiveMode);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry,  actualNeedsZip64,  effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry,  actualNeedsZip64,  effectiveMode);	  closeEntry(phased,    actualNeedsZip64,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
427	[BUG]  [BUGGY]  if(phased)  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  zip64Mode.close();  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
428	[BUG]  [BUGGY]  if(phased  &&  zip64Mode!=  null)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  zip64Mode!=  null)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  zip64Mode!=  null)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode.close();  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
429	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.bytesRead);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.bytesRead);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.bytesRead);  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
430	[BUG]  [BUGGY]  if(phased  &&  zip64Mode!=  null)  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  zip64Mode!=  null)  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  zip64Mode!=  null)  {  zip64Mode.close();  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
431	[BUG]  [BUGGY]  finallyNeedsZip64)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyNeedsZip64)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyNeedsZip64)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    getCopiedZip64Mode(entry.bytesRead);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
432	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(entry.bytesRead);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(entry.bytesRead);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(entry.bytesRead);  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    getCopiedZip64Mode(entry.bytesRead);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
433	[BUG]  [BUGGY]  final  boolean  phased  =  getCopiedZip64Mode(entry.bytesRead);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  getCopiedZip64Mode(entry.bytesRead);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  getCopiedZip64Mode(entry.bytesRead);	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    getCopiedZip64Mode(entry.bytesRead);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
434	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  phased,  actualNeedsZip64,  effectiveMode);  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  phased,  actualNeedsZip64,  effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  phased,  actualNeedsZip64,  effectiveMode);	  closeEntry(entry.bytesRead,    phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
435	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  phased,  actualNeedsZip64,  actuallyNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  phased,  actualNeedsZip64,  actuallyNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  phased,  actualNeedsZip64,  actuallyNeedsZip64);	  closeEntry(entry.bytesRead,    phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
436	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  phased,  actualNeedsZip64,  trueMode);  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  phased,  actualNeedsZip64,  trueMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  phased,  actualNeedsZip64,  trueMode);	  closeEntry(entry.bytesRead,    phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
437	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  phased,  actualNeedsZip64,  efectivMode);  [CE]  illegal  start  of  expression  [FE]                                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  phased,  actualNeedsZip64,  efectivMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  phased,  actualNeedsZip64,  efectivMode);	  closeEntry(entry.bytesRead,    phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
438	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  phased,  actualNeedsZip64,  realMode);  [CE]  illegal  start  of  expression  [FE]                                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  phased,  actualNeedsZip64,  realMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  phased,  actualNeedsZip64,  realMode);	  closeEntry(entry.bytesRead,    phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
439	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  phased,  actualNeedsZip64,  false);  [CE]  illegal  start  of  expression  [FE]                                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  phased,  actualNeedsZip64,  false);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  phased,  actualNeedsZip64,  false);	  closeEntry(entry.bytesRead,    phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
440	[BUG]  [BUGGY]  finallyPhased)  {  closeCopiedEntry(entry,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyPhased)  {  closeCopiedEntry(entry,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyPhased)  {  closeCopiedEntry(entry,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeCopiedEntry(entry,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
441	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeCopiedEntry(entry,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
442	[BUG]  [BUGGY]  finallyPhased)  {  closeCopiedEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyPhased)  {  closeCopiedEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyPhased)  {  closeCopiedEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeCopiedEntry(entry,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
443	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(entry,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(efficientMode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(entry,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(efficientMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(entry,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(efficientMode);  }	  if(phased)    {    closeCopiedEntry(entry,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
444	[BUG]  [BUGGY]  final  boolean  phased  =  getIfNeedsZip64(phased,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  getIfNeedsZip64(phased,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  getIfNeedsZip64(phased,  actualNeedsZip64);	  final    boolean    phased    =    getIfNeedsZip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
445	[BUG]  [BUGGY]  final  boolean  phased  =  getIfNeedsZip64(phased,  trueNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  getIfNeedsZip64(phased,  trueNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  getIfNeedsZip64(phased,  trueNeedsZip64);	  final    boolean    phased    =    getIfNeedsZip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
446	[BUG]  [BUGGY]  final  boolean  phased  =  getIfNeedsZip64(phased,  actuallyNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  getIfNeedsZip64(phased,  actuallyNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  getIfNeedsZip64(phased,  actuallyNeedsZip64);	  final    boolean    phased    =    getIfNeedsZip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
447	[BUG]  [BUGGY]  finallyPhased)  {  closeEntry(entry.bytesRead,  entry.phased);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyPhased)  {  closeEntry(entry.bytesRead,  entry.phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyPhased)  {  closeEntry(entry.bytesRead,  entry.phased);  }	  if(phased)    {    closeEntry(entry.bytesRead,    entry.phased);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
448	[BUG]  [BUGGY]  final  boolean  phased  =  closeEntry(entry.bytesRead,  entry.phased);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  closeEntry(entry.bytesRead,  entry.phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  closeEntry(entry.bytesRead,  entry.phased);	  if(phased)    {    closeEntry(entry.bytesRead,    entry.phased);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
449	[BUG]  [BUGGY]  finallyNeedsZip64)  {  closeEntry(entry.bytesRead,  entry.phased);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyNeedsZip64)  {  closeEntry(entry.bytesRead,  entry.phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyNeedsZip64)  {  closeEntry(entry.bytesRead,  entry.phased);  }	  if(phased)    {    closeEntry(entry.bytesRead,    entry.phased);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
450	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(entry.bytesRead,  entry.phased);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(entry.bytesRead,  entry.phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(entry.bytesRead,  entry.phased);  }	  if(phased)    {    closeEntry(entry.bytesRead,    entry.phased);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
451	[BUG]  [BUGGY]  if(checkIfNeedsZip64)  {  closeCopiedEntry(phased,  effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64)  {  closeCopiedEntry(phased,  effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64)  {  closeCopiedEntry(phased,  effectiveMode);  }	  closeCopiedEntry(phased,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
452	[BUG]  [BUGGY]  if(checkIfNeedsZip64)  {  closeCopiedEntry(phased,  effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64)  {  closeCopiedEntry(phased,  effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64)  {  closeCopiedEntry(phased,  effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  closeCopiedEntry(phased,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
453	[BUG]  [BUGGY]  if(checkIfNeedsZip64)  {  closeCopiedEntry(phased,  effectiveMode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64)  {  closeCopiedEntry(phased,  effectiveMode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64)  {  closeCopiedEntry(phased,  effectiveMode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  closeCopiedEntry(phased,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
454	[BUG]  [BUGGY]  if(effectiveMode!=  phased)  {  closeCopiedEntry(phased,  effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(effectiveMode!=  phased)  {  closeCopiedEntry(phased,  effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(effectiveMode!=  phased)  {  closeCopiedEntry(phased,  effectiveMode);  }	  closeCopiedEntry(phased,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
455	[BUG]  [BUGGY]  if(effectiveMode!=  phased)  {  closeCopiedEntry(phased,  effectiveMode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(effectiveMode!=  phased)  {  closeCopiedEntry(phased,  effectiveMode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(effectiveMode!=  phased)  {  closeCopiedEntry(phased,  effectiveMode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  closeCopiedEntry(phased,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
456	[BUG]  [BUGGY]  if(checkIfNeedsZip64)  {  closeCopiedEntry(phased,  effectiveMode);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64)  {  closeCopiedEntry(phased,  effectiveMode);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64)  {  closeCopiedEntry(phased,  effectiveMode);  }  else  {  throw  new  IllegalStateException( " ");  }	  closeCopiedEntry(phased,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
457	[BUG]  [BUGGY]  phased  =  checkIfNeedsZip64(phased);  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  phased  =  checkIfNeedsZip64(phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	phased  =  checkIfNeedsZip64(phased);	  if(phased)    {    final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
458	[BUG]  [BUGGY]  closeEntry(entry,  actualNeedsZip64,  phased);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry,  actualNeedsZip64,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry,  actualNeedsZip64,  phased);	  closeEntry(entry,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
459	[BUG]  [BUGGY]  if(actualNeedsZip64)  {  closeEntry(entry,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(actualNeedsZip64)  {  closeEntry(entry,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(actualNeedsZip64)  {  closeEntry(entry,  actualNeedsZip64);  }	  closeEntry(entry,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
460	[BUG]  [BUGGY]  if(actualNeedsZip64)  {  closeEntry(entry,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(actualNeedsZip64)  {  closeEntry(entry,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(actualNeedsZip64)  {  closeEntry(entry,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }	  closeEntry(entry,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
461	[BUG]  [BUGGY]  if(actualNeedsZip64)  {  closeEntry(entry,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(actualNeedsZip64)  {  closeEntry(entry,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(actualNeedsZip64)  {  closeEntry(entry,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }	  closeEntry(entry,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
462	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsCip64(phased,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsCip64(phased,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsCip64(phased,  actualNeedsZip64);	  final    boolean    phased    =    checkIfNeedsCip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
463	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsCip64(phased,  trueNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsCip64(phased,  trueNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsCip64(phased,  trueNeedsZip64);	  final    boolean    phased    =    checkIfNeedsCip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
464	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsCip64(phased,  actuallyNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsCip64(phased,  actuallyNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsCip64(phased,  actuallyNeedsZip64);	  final    boolean    phased    =    checkIfNeedsCip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
465	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsCip64(phased,  false);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsCip64(phased,  false);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsCip64(phased,  false);	  final    boolean    phased    =    checkIfNeedsCip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
466	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsCip64(phased,  true);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsCip64(phased,  true);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsCip64(phased,  true);	  final    boolean    phased    =    checkIfNeedsCip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
467	[BUG]  [BUGGY]  final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(actualNeedsZip64,  phased);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(actualNeedsZip64,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(actualNeedsZip64,  phased);	  final    boolean    actualNeedsZip64    =    checkIfNeedsZip64(actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
468	[BUG]  [BUGGY]  final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(actualNeedsZip64  +  1);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(actualNeedsZip64  +  1);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(actualNeedsZip64  +  1);	  final    boolean    actualNeedsZip64    =    checkIfNeedsZip64(actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
469	[BUG]  [BUGGY]  final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(actualNeedsZip64),  phased);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(actualNeedsZip64),  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(actualNeedsZip64),  phased);	  final    boolean    actualNeedsZip64    =    checkIfNeedsZip64(actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
470	[BUG]  [BUGGY]  final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(actualNeedsZip64)&&  phased;  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(actualNeedsZip64)&&  phased;  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(actualNeedsZip64)&&  phased;	  final    boolean    actualNeedsZip64    =    checkIfNeedsZip64(actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
471	[BUG]  [BUGGY]  final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(actualNeedsZip64));  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(actualNeedsZip64));  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(actualNeedsZip64));	  final    boolean    actualNeedsZip64    =    checkIfNeedsZip64(actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
472	[BUG]  [BUGGY]  final  boolean  phased  =  verifyIfNeedsZip64(phased,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  verifyIfNeedsZip64(phased,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  verifyIfNeedsZip64(phased,  actualNeedsZip64);	  final    boolean    phased    =    verifyIfNeedsZip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
473	[BUG]  [BUGGY]  final  boolean  phased  =  verifyIfNeedsZip64(phased,  actuallyNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  verifyIfNeedsZip64(phased,  actuallyNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  verifyIfNeedsZip64(phased,  actuallyNeedsZip64);	  final    boolean    phased    =    verifyIfNeedsZip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
474	[BUG]  [BUGGY]  final  boolean  phased  =  verifyIfNeedsZip64(phased,  true);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  verifyIfNeedsZip64(phased,  true);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  verifyIfNeedsZip64(phased,  true);	  final    boolean    phased    =    verifyIfNeedsZip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
475	[BUG]  [BUGGY]  final  boolean  phased  =  verifyIfNeedsZip64(phased,  false);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  verifyIfNeedsZip64(phased,  false);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  verifyIfNeedsZip64(phased,  false);	  final    boolean    phased    =    verifyIfNeedsZip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
476	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(entry.bytesRead,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(entry.bytesRead,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(entry.bytesRead,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeCopiedEntry(entry.bytesRead,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
477	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(efficientMode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(efficientMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(efficientMode);  }	  if(phased)    {    closeCopiedEntry(entry.bytesRead,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
478	[BUG]  [BUGGY]  final  boolean  phased  =  closeCopiedEntry(entry.bytesRead,  phased);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  closeCopiedEntry(entry.bytesRead,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  closeCopiedEntry(entry.bytesRead,  phased);	  if(phased)    {    closeCopiedEntry(entry.bytesRead,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
479	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(entry.bytesRead,  Phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(entry.bytesRead,  Phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(entry.bytesRead,  Phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeCopiedEntry(entry.bytesRead,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
480	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(entry.bytesRead,  phased);  }  else  {  ZIP64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(entry.bytesRead,  phased);  }  else  {  ZIP64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(entry.bytesRead,  phased);  }  else  {  ZIP64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeCopiedEntry(entry.bytesRead,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
481	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  actualMode);  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  actualMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(phased,  actualMode);	  final    boolean    phased    =    checkIfNeedsZip64(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
482	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  actualNeedsZip64,  actualMode);  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  actualNeedsZip64,  actualMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(phased,  actualNeedsZip64,  actualMode);	  final    boolean    phased    =    checkIfNeedsZip64(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
483	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  actualNeedsZip64,  trueMode);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  actualNeedsZip64,  trueMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(phased,  actualNeedsZip64,  trueMode);	  final    boolean    phased    =    checkIfNeedsZip64(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
484	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  trueMode);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  trueMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(phased,  trueMode);	  final    boolean    phased    =    checkIfNeedsZip64(phased,    actuallyNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
485	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  effectivelyMode);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  effectivelyMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(phased,  effectivelyMode);	  final    boolean    phased    =    checkIfNeedsZip64(phased,    actuallyNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
486	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased  +  2);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased  +  2);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(phased  +  2);	  final    boolean    phased    =    checkIfNeedsZip64(phased    +    1);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
487	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased  +  3);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased  +  3);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(phased  +  3);	  final    boolean    phased    =    checkIfNeedsZip64(phased    +    1);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
488	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  actualNeedsZip64  +  1);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  actualNeedsZip64  +  1);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(phased,  actualNeedsZip64  +  1);	  final    boolean    phased    =    checkIfNeedsZip64(phased    +    1);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
489	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  effectiveMode  +  1);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  effectiveMode  +  1);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(phased,  effectiveMode  +  1);	  final    boolean    phased    =    checkIfNeedsZip64(phased    +    1);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
490	[BUG]  [BUGGY]  final  boolean  phased  =  checkForNeedsZip64(phased);  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkForNeedsZip64(phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkForNeedsZip64(phased);	  final    boolean    phased    =    checkIfNeedsZip64(actualMode);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
491	[BUG]  [BUGGY]  final  boolean  phased  =  checkPasedZip64(actualMode);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkPasedZip64(actualMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkPasedZip64(actualMode);	  final    boolean    phased    =    checkIfNeedsZip64(actualMode);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
492	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(activeMode);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(activeMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(activeMode);	  final    boolean    phased    =    checkIfNeedsZip64(actualMode);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
493	[BUG]  [BUGGY]  finallyPhased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead.close();  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyPhased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyPhased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead.close();  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    entry.bytesRead.close();    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
494	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  entry.bytesRead);  }  else  {  entry.bytesRead.close();  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  entry.bytesRead);  }  else  {  entry.bytesRead.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  entry.bytesRead);  }  else  {  entry.bytesRead.close();  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    entry.bytesRead.close();    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
495	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  false);  }  else  {  entry.bytesRead.close();  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  false);  }  else  {  entry.bytesRead.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  false);  }  else  {  entry.bytesRead.close();  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    entry.bytesRead.close();    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
496	[BUG]  [BUGGY]  if(phased)  {  if(actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  if(actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  if(actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }	  if(actualNeedsZip64!=    phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
497	[BUG]  [BUGGY]  if(phased)  {  if(actualNeedsZip64!=  actualNeedsZip64)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  if(actualNeedsZip64!=  actualNeedsZip64)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  if(actualNeedsZip64!=  actualNeedsZip64)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }	  if(actualNeedsZip64!=    phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
498	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }	  if(actualNeedsZip64!=    phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
499	[BUG]  [BUGGY]  final  boolean  phased  =  actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }	  if(actualNeedsZip64!=    phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
500	[BUG]  [BUGGY]  final  boolean  phased  =  actualNeedsZip64  ==  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  actualNeedsZip64  ==  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  actualNeedsZip64  ==  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }	  if(actualNeedsZip64!=    phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
501	[BUG]  [BUGGY]  final  boolean  phased  =  actualNeedsZip64  ==  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  actualNeedsZip64  ==  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  actualNeedsZip64  ==  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);	  if(actualNeedsZip64    ==    phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
502	[BUG]  [BUGGY]  Preconditions.checkState(!phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  preClose();  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(!phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  preClose();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(!phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  preClose();  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    preClose();    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
503	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  preClose();  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  preClose();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  preClose();  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    preClose();    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
504	[BUG]  [BUGGY]  finallyPhased)  {  preClose(new  Zip64Mode(effectiveMode,  phased));  }  else  {  preClose();  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyPhased)  {  preClose(new  Zip64Mode(effectiveMode,  phased));  }  else  {  preClose();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyPhased)  {  preClose(new  Zip64Mode(effectiveMode,  phased));  }  else  {  preClose();  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    preClose();    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
505	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  trueNeedsZip64);  }  else  {  preClose();  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  trueNeedsZip64);  }  else  {  preClose();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  trueNeedsZip64);  }  else  {  preClose();  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    preClose();    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
506	[BUG]  [BUGGY]  phased  =  closeCopiedEntry(actuallyNeedsZip64,  phased);  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  phased  =  closeCopiedEntry(actuallyNeedsZip64,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	phased  =  closeCopiedEntry(actuallyNeedsZip64,  phased);	  if(phased)    {    closeCopiedEntry(actuallyNeedsZip64,    phased);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
507	[BUG]  [BUGGY]  final  phased  =  closeCopiedEntry(actuallyNeedsZip64,  phased);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  phased  =  closeCopiedEntry(actuallyNeedsZip64,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  phased  =  closeCopiedEntry(actuallyNeedsZip64,  phased);	  if(phased)    {    closeCopiedEntry(actuallyNeedsZip64,    phased);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
508	[BUG]  [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(zip64Mode);  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(zip64Mode);  }  else  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(zip64Mode);  }  else  {  zip64Mode.close();  }	  if(phased)    {    final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
509	[BUG]  [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(entry.bytesRead);  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(entry.bytesRead);  }  else  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(entry.bytesRead);  }  else  {  zip64Mode.close();  }	  if(phased)    {    final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
510	[BUG]  [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(currentEntry.bytesRead);  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(currentEntry.bytesRead);  }  else  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(currentEntry.bytesRead);  }  else  {  zip64Mode.close();  }	  if(phased)    {    final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
511	[BUG]  [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(step64Mode);  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(step64Mode);  }  else  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(step64Mode);  }  else  {  zip64Mode.close();  }	  if(phased)    {    final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
512	[BUG]  [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(plot);  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(plot);  }  else  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(plot);  }  else  {  zip64Mode.close();  }	  if(phased)    {    final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
513	[BUG]  [BUGGY]  if(phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode  =  new  Zip64Mode();  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode  =  new  Zip64Mode();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode  =  new  Zip64Mode();  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    zip64Mode    =    new    Zip64Mode();    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
514	[BUG]  [BUGGY]  zip64Mode  =  new  Zip64Mode();  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  zip64Mode  =  new  Zip64Mode();  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	zip64Mode  =  new  Zip64Mode();	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    zip64Mode    =    new    Zip64Mode();    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
515	[BUG]  [BUGGY]  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.bytesRead);  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.bytesRead);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.bytesRead);	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    zip64Mode    =    new    Zip64Mode();    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
516	[BUG]  [BUGGY]  closeCopiedEntry(phased,  trueNeedsZip64,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(phased,  trueNeedsZip64,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(phased,  trueNeedsZip64,  actualNeedsZip64);	  closeCopiedEntry(phased,    actualNeedsZip64,    trueNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
517	[BUG]  [BUGGY]  closeCopiedEntry(entry.bytesRead,  actualNeedsZip64,  trueNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(entry.bytesRead,  actualNeedsZip64,  trueNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(entry.bytesRead,  actualNeedsZip64,  trueNeedsZip64);	  closeCopiedEntry(phased,    actualNeedsZip64,    trueNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
518	[BUG]  [BUGGY]  closeCopiedEntry(phased,  actualNeedsZip64,  trueMode);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(phased,  actualNeedsZip64,  trueMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(phased,  actualNeedsZip64,  trueMode);	  closeCopiedEntry(phased,    actualNeedsZip64,    trueNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
519	[BUG]  [BUGGY]  closeCopiedEntry(phased,  actualNeedsZip64,  falseNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(phased,  actualNeedsZip64,  falseNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(phased,  actualNeedsZip64,  falseNeedsZip64);	  closeCopiedEntry(phased,    actualNeedsZip64,    trueNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
520	[BUG]  [BUGGY]  closeCopiedEntry(phased,  actualNeedsZip64,  falseNeedsZip64,  trueNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(phased,  actualNeedsZip64,  falseNeedsZip64,  trueNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(phased,  actualNeedsZip64,  falseNeedsZip64,  trueNeedsZip64);	  closeCopiedEntry(phased,    actualNeedsZip64,    trueNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
521	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  falseNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  falseNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(phased,  falseNeedsZip64);	  final    boolean    phased    =    checkIfNeedsZip64(phased,    trueNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
522	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  trueNeedsZip64,  trueMode);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  trueNeedsZip64,  trueMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(phased,  trueNeedsZip64,  trueMode);	  final    boolean    phased    =    checkIfNeedsZip64(phased,    trueNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
523	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  trueNeedsZip64,  effectiveMode);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  trueNeedsZip64,  effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(phased,  trueNeedsZip64,  effectiveMode);	  final    boolean    phased    =    checkIfNeedsZip64(phased,    trueNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
524	[BUG]  [BUGGY]  finallyPhased)  {  closeCopiedEntry(zip64Mode,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyPhased)  {  closeCopiedEntry(zip64Mode,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyPhased)  {  closeCopiedEntry(zip64Mode,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeCopiedEntry(zip64Mode,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
525	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(zip64Mode,  effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(zip64Mode,  effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(zip64Mode,  effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeCopiedEntry(zip64Mode,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
526	[BUG]  [BUGGY]  final  phased)  {  closeCopiedEntry(zip64Mode,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  phased)  {  closeCopiedEntry(zip64Mode,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  phased)  {  closeCopiedEntry(zip64Mode,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeCopiedEntry(zip64Mode,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
527	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(zip64Mode,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(zip64Mode,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(zip64Mode,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeCopiedEntry(zip64Mode,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
528	[BUG]  [BUGGY]  if(phased)  {  closePaddedEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode  =  getPaddedZip64Mode(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closePaddedEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode  =  getPaddedZip64Mode(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closePaddedEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode  =  getPaddedZip64Mode(effectiveMode);  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    zip64Mode    =    getPaddedZip64Mode(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
529	[BUG]  [BUGGY]  if(phased  &&  zip64Mode!=  getPaddedZip64Mode())  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode  =  getPaddedZip64Mode(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  zip64Mode!=  getPaddedZip64Mode())  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode  =  getPaddedZip64Mode(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  zip64Mode!=  getPaddedZip64Mode())  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode  =  getPaddedZip64Mode(effectiveMode);  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    zip64Mode    =    getPaddedZip64Mode(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
530	[BUG]  [BUGGY]  if(phased  &&  checkIfNeedsZip64!=  effectiveMode)  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  checkIfNeedsZip64!=  effectiveMode)  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  checkIfNeedsZip64!=  effectiveMode)  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
531	[BUG]  [BUGGY]  if(phased  &&  checkIfNeedsZip64  ==  effectiveMode)  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  checkIfNeedsZip64  ==  effectiveMode)  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  checkIfNeedsZip64  ==  effectiveMode)  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
532	[BUG]  [BUGGY]  if(phased)  {  checkIfNeedsZip64(effectiveMode,  phased);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  checkIfNeedsZip64(effectiveMode,  phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  checkIfNeedsZip64(effectiveMode,  phased);  }	  if(phased)    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
533	[BUG]  [BUGGY]  if(actualNeedsZip64!=  entry.bytesRead)  {  closeEntry(entry,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(actualNeedsZip64!=  entry.bytesRead)  {  closeEntry(entry,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(actualNeedsZip64!=  entry.bytesRead)  {  closeEntry(entry,  actualNeedsZip64);  }	  closeEntry(entry,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
534	[BUG]  [BUGGY]  if(actualNeedsZip64!=  entry.bytesRead)  {  closeEntry(entry,  actualNeedsZip64);  }  else  {  zip64Mode  =  checkIfNeedsZip64(actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(actualNeedsZip64!=  entry.bytesRead)  {  closeEntry(entry,  actualNeedsZip64);  }  else  {  zip64Mode  =  checkIfNeedsZip64(actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(actualNeedsZip64!=  entry.bytesRead)  {  closeEntry(entry,  actualNeedsZip64);  }  else  {  zip64Mode  =  checkIfNeedsZip64(actualNeedsZip64);  }	  closeEntry(entry,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
535	[BUG]  [BUGGY]  if(actualNeedsZip64!=  entry.bytesRead)  {  closeEntry(entry,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(actualNeedsZip64!=  entry.bytesRead)  {  closeEntry(entry,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(actualNeedsZip64!=  entry.bytesRead)  {  closeEntry(entry,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }	  closeEntry(entry,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
536	[BUG]  [BUGGY]  if(actualNeedsZip64!=  entry.bytesRead)  {  closeEntry(entry,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(actualNeedsZip64!=  entry.bytesRead)  {  closeEntry(entry,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(actualNeedsZip64!=  entry.bytesRead)  {  closeEntry(entry,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }	  closeEntry(entry,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
537	[BUG]  [BUGGY]  if(actualNeedsZip64  ==  entry.bytesRead)  {  closeEntry(entry,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(actualNeedsZip64  ==  entry.bytesRead)  {  closeEntry(entry,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(actualNeedsZip64  ==  entry.bytesRead)  {  closeEntry(entry,  actualNeedsZip64);  }	  closeEntry(entry,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
538	[BUG]  [BUGGY]  finallyNeedsZip64  =  checkIfNeedsZip64(efficientMode);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyNeedsZip64  =  checkIfNeedsZip64(efficientMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyNeedsZip64  =  checkIfNeedsZip64(efficientMode);	  finallyNeedsZip64    =    checkIfNeedsZip64(percentageNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
539	[BUG]  [BUGGY]  finallyNeedsZip64  =  checkIfNeedsZip64(percentageNeedsZip64,  phased);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyNeedsZip64  =  checkIfNeedsZip64(percentageNeedsZip64,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyNeedsZip64  =  checkIfNeedsZip64(percentageNeedsZip64,  phased);	  finallyNeedsZip64    =    checkIfNeedsZip64(percentageNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
540	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  phased,  checkIfNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  phased,  checkIfNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  phased,  checkIfNeedsZip64);	  closeEntry(entry.bytesRead,    phased,    trueNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
541	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  phased,  trueNeedsZip64,  activeMode);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  phased,  trueNeedsZip64,  activeMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  phased,  trueNeedsZip64,  activeMode);	  closeEntry(entry.bytesRead,    phased,    trueNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
542	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  phased,  trueNeedsZip64,  passiveMode);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  phased,  trueNeedsZip64,  passiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  phased,  trueNeedsZip64,  passiveMode);	  closeEntry(entry.bytesRead,    phased,    trueNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
543	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(phased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(entry.bytesRead,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
544	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(entry.bytesRead,  Phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(entry.bytesRead,  Phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(entry.bytesRead,  Phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(entry.bytesRead,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
545	[BUG]  [BUGGY]  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(efficiencyMode);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(efficiencyMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(efficiencyMode);	  final    boolean    actuallyNeedsZip64    =    checkIfNeedsZip64(efficientMode);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
546	[BUG]  [BUGGY]  closeCopiedEntry(phased,  entry.bytesRead);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(phased,  entry.bytesRead);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(phased,  entry.bytesRead);	  closeCopiedEntry(entry.bytesRead,    phased);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
547	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(entry.bytesRead,  phased);  }  else  {  checkIfNeedsZip64(efficientMode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(entry.bytesRead,  phased);  }  else  {  checkIfNeedsZip64(efficientMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(entry.bytesRead,  phased);  }  else  {  checkIfNeedsZip64(efficientMode);  }	  closeCopiedEntry(entry.bytesRead,    phased);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
548	[BUG]  [BUGGY]  if(effectiveMode)  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(effectiveMode)  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(effectiveMode)  {  checkIfNeedsZip64(effectiveMode);  }	  checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
549	[BUG]  [BUGGY]  if(effectiveMode!=  null)  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(effectiveMode!=  null)  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(effectiveMode!=  null)  {  checkIfNeedsZip64(effectiveMode);  }	  checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
550	[BUG]  [BUGGY]  closeCopiedEntry(phased,  effectiveMode,  trueNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(phased,  effectiveMode,  trueNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(phased,  effectiveMode,  trueNeedsZip64);	  closeCopiedEntry(phased,    actualNeedsZip64,    trueNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
551	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(phased,  actualNeedsZip64,  trueNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(phased,  actualNeedsZip64,  trueNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(phased,  actualNeedsZip64,  trueNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }	  closeCopiedEntry(phased,    actualNeedsZip64,    trueNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
552	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode.close();  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
553	[BUG]  [BUGGY]  if(phased  &&  zip64Mode!=  null)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  zip64Mode!=  null)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  zip64Mode!=  null)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode.close();  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
554	[BUG]  [BUGGY]  Preconditions.checkState(!phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(!phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(!phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode.close();  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
555	[BUG]  [BUGGY]  final  phased  =  closePhasedEntry(phased,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  phased  =  closePhasedEntry(phased,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  phased  =  closePhasedEntry(phased,  actualNeedsZip64);	  if(actualNeedsZip64    ==    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
556	[BUG]  [BUGGY]  if(phased  ||  actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  ||  actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  ||  actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }	  if(phased)    {    closeEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
557	[BUG]  [BUGGY]  if(phased  &&  actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }	  if(phased)    {    closeEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
558	[BUG]  [BUGGY]  if(phased  &&  actualNeedsZip64!=  null)  {  closeEntry(phased,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  actualNeedsZip64!=  null)  {  closeEntry(phased,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  actualNeedsZip64!=  null)  {  closeEntry(phased,  actualNeedsZip64);  }	  if(phased)    {    closeEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
559	[BUG]  [BUGGY]  if(phased  &&  actualNeedsZip64!=  null)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  actualNeedsZip64!=  null)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  actualNeedsZip64!=  null)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }	  if(phased)    {    closeEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
560	[BUG]  [BUGGY]  if(phased)  {  preClose(new  Zip64Mode(effectiveMode,  phased));  }  else  {  preClose();  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  preClose(new  Zip64Mode(effectiveMode,  phased));  }  else  {  preClose();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  preClose(new  Zip64Mode(effectiveMode,  phased));  }  else  {  preClose();  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    preClose();    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
561	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  phased);  }  else  {  preClose();  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  phased);  }  else  {  preClose();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  phased);  }  else  {  preClose();  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    preClose();    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
562	[BUG]  [BUGGY]  if(phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  preClose();  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  preClose();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  preClose();  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    preClose();    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
563	[BUG]  [BUGGY]  if(phased  &&  zip64Mode!=  null)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  zip64Mode!=  null)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  zip64Mode!=  null)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(entry.bytesRead,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
564	[BUG]  [BUGGY]  if(phased  &&  zip64Mode!=  effectiveMode)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  zip64Mode!=  effectiveMode)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  zip64Mode!=  effectiveMode)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(entry.bytesRead,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
565	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(phased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(entry.bytesRead,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
566	[BUG]  [BUGGY]  if(phased  &&  zip64Mode!=  null)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  zip64Mode!=  null)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  zip64Mode!=  null)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(entry.bytesRead,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
567	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  closeCopiedEntry(entry,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(phased)  {  closeCopiedEntry(entry,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  closeCopiedEntry(entry,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeCopiedEntry(entry,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
568	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(entry,  phase);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(entry,  phase);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(entry,  phase);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeCopiedEntry(entry,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
569	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(entry,  phased);  }  else  {  checkIfNeedsZip64(efficientMode);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(entry,  phased);  }  else  {  checkIfNeedsZip64(efficientMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(entry,  phased);  }  else  {  checkIfNeedsZip64(efficientMode);  }	  if(phased)    {    closeCopiedEntry(entry,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
570	[BUG]  [BUGGY]  final  boolean  phased  =  actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(phased);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(phased);  }	  if(actualNeedsZip64!=    phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
571	[BUG]  [BUGGY]  final  boolean  phased  =  actualNeedsZip64  ==  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(phased);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  actualNeedsZip64  ==  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  actualNeedsZip64  ==  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(phased);  }	  if(actualNeedsZip64!=    phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
572	[BUG]  [BUGGY]  final  boolean  phased  =  actualNeedsZip64  >=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(phased);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  actualNeedsZip64  >=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  actualNeedsZip64  >=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(phased);  }	  if(actualNeedsZip64!=    phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
573	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  CheckIfNeedsZip64(actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  CheckIfNeedsZip64(actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  CheckIfNeedsZip64(actualNeedsZip64);  }	  if(actualNeedsZip64!=    phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
574	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(activeMode);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(activeMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(activeMode);  }	  if(actualNeedsZip64!=    phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
575	[BUG]  [BUGGY]  lastMode  =  checkIfNeedsZip64(effectiveMode);  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  lastMode  =  checkIfNeedsZip64(effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	lastMode  =  checkIfNeedsZip64(effectiveMode);	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
576	[BUG]  [BUGGY]  if(checkIfNeedsZip64)  {  checkIfNeedsZip64(efficientMode);  }  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64)  {  checkIfNeedsZip64(efficientMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64)  {  checkIfNeedsZip64(efficientMode);  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
577	[BUG]  [BUGGY]  openEntry(entry.getSize(),  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  openEntry(entry.getSize(),  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	openEntry(entry.getSize(),  actualNeedsZip64);	  openEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
578	[BUG]  [BUGGY]  openEntry(entry.getKey(),  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  openEntry(entry.getKey(),  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	openEntry(entry.getKey(),  actualNeedsZip64);	  openEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
579	[BUG]  [BUGGY]  openEntry(actualNeedsZip64,  entry.bytesRead);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  openEntry(actualNeedsZip64,  entry.bytesRead);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	openEntry(actualNeedsZip64,  entry.bytesRead);	  openEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
580	[BUG]  [BUGGY]  openEntry(entry.blocksRead,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  openEntry(entry.blocksRead,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	openEntry(entry.blocksRead,  actualNeedsZip64);	  openEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
581	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(phased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(entry.bytesRead,    phased);    }    else    {    Zip64Mode    effectiveMode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
582	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  closeEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(phased)  {  closeEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  closeEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(entry.bytesRead,    phased);    }    else    {    Zip64Mode    effectiveMode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
583	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsPadding(phased);  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsPadding(phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsPadding(phased);	  final    boolean    phased    =    checkIfNeedsZip64(actualMode);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
584	[BUG]  [BUGGY]  if(phased  &&  zip64Mode!=  null)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.blocksRead);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  zip64Mode!=  null)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.blocksRead);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  zip64Mode!=  null)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.blocksRead);  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    getCopiedZip64Mode(entry.blocksRead);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
585	[BUG]  [BUGGY]  if(phased)  {  preClose();  zip64Mode  =  getCopiedZip64Mode(entry.blocksRead);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  preClose();  zip64Mode  =  getCopiedZip64Mode(entry.blocksRead);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  preClose();  zip64Mode  =  getCopiedZip64Mode(entry.blocksRead);  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    getCopiedZip64Mode(entry.blocksRead);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
586	[BUG]  [BUGGY]  final  Zip64Mode  effectiveMode  =  getIfNeedsZip64(effectiveMode);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  effectiveMode  =  getIfNeedsZip64(effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  effectiveMode  =  getIfNeedsZip64(effectiveMode);	  final    Zip64Mode    effectiveMode    =    checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
587	[BUG]  [BUGGY]  final  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(module);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(module);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(module);	  final    Zip64Mode    effectiveMode    =    checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
588	[BUG]  [BUGGY]  final  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(efficientMode,  phased);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(efficientMode,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(efficientMode,  phased);	  final    Zip64Mode    effectiveMode    =    checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
589	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }	  if(phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
590	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(phased,  actualNeedsZip64,  false);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(phased,  actualNeedsZip64,  false);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(phased,  actualNeedsZip64,  false);  }	  if(phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
591	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(phased,  actualNeedsZip64,  trueMode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(phased,  actualNeedsZip64,  trueMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(phased,  actualNeedsZip64,  trueMode);  }	  if(phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
592	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsSip64(phased  +  1);  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsSip64(phased  +  1);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsSip64(phased  +  1);	  final    boolean    phased    =    checkIfNeedsSip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
593	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsSip64(phased,  phased);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsSip64(phased,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsSip64(phased,  phased);	  final    boolean    phased    =    checkIfNeedsSip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
594	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsPip64(phased);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsPip64(phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsPip64(phased);	  final    boolean    phased    =    checkIfNeedsSip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
595	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(activeMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(activeMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(activeMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeCopiedEntry(actuallyNeedsZip64,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
596	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(efficientMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(efficientMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(efficientMode);  }	  if(phased)    {    closeCopiedEntry(actuallyNeedsZip64,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
597	[BUG]  [BUGGY]  if(phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(activeMode);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(activeMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(activeMode);  }	  if(actualNeedsZip64!=    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualMode);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
598	[BUG]  [BUGGY]  if(phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(actualNeedsZip64!=    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualMode);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
599	[BUG]  [BUGGY]  if(phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  CheckIfNeedsZip64(actualMode);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  CheckIfNeedsZip64(actualMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  CheckIfNeedsZip64(actualMode);  }	  if(actualNeedsZip64!=    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualMode);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
600	[BUG]  [BUGGY]  if(phased  &&  zip64Mode!=  null)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  zip64Mode!=  null)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  zip64Mode!=  null)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    getCopiedZip64Mode(entry.bytesRead);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
601	[BUG]  [BUGGY]  if(phased)  {  preClose();  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  preClose();  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  preClose();  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    getCopiedZip64Mode(entry.bytesRead);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
602	[BUG]  [BUGGY]  if(phased  &&  zip64Mode!=  null)  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  zip64Mode!=  null)  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  zip64Mode!=  null)  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    getCopiedZip64Mode(entry.bytesRead);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
603	[BUG]  [BUGGY]  if(phased  &&  zip64Mode!=  null)  {  closeEntry(entry,  phased);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  zip64Mode!=  null)  {  closeEntry(entry,  phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  zip64Mode!=  null)  {  closeEntry(entry,  phased);  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    getCopiedZip64Mode(entry.bytesRead);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
604	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
605	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
606	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  0,  phased));  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  0,  phased));  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  0,  phased));  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
607	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  checkIfNeedsZip64(efficientMode);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  checkIfNeedsZip64(efficientMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  checkIfNeedsZip64(efficientMode);  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
608	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  effectiveMode,  actuallyNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  effectiveMode,  actuallyNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  effectiveMode,  actuallyNeedsZip64);	  closeEntry(entry.bytesRead,    phased,    actuallyNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
609	[BUG]  [BUGGY]  openEntry(entry.bytesRead,  phased,  effectiveMode);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  openEntry(entry.bytesRead,  phased,  effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	openEntry(entry.bytesRead,  phased,  effectiveMode);	  closeEntry(entry.bytesRead,    phased,    actuallyNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
610	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  phased,  effectivenessMode);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  phased,  effectivenessMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  phased,  effectivenessMode);	  closeEntry(entry.bytesRead,    phased,    actuallyNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
611	[BUG]  [BUGGY]  CloseEntry(entry.bytesRead,  actualNeedsZip64,  activeMode);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  CloseEntry(entry.bytesRead,  actualNeedsZip64,  activeMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	CloseEntry(entry.bytesRead,  actualNeedsZip64,  activeMode);	  CloseEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
612	[BUG]  [BUGGY]  CloseEntry(entry.bytesRead,  actualNeedsZip64,  forceMode);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  CloseEntry(entry.bytesRead,  actualNeedsZip64,  forceMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	CloseEntry(entry.bytesRead,  actualNeedsZip64,  forceMode);	  CloseEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
613	[BUG]  [BUGGY]  stopCopiedEntry(phased,  effectiveMode);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  stopCopiedEntry(phased,  effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	stopCopiedEntry(phased,  effectiveMode);	  stopCopiedEntry(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
614	[BUG]  [BUGGY]  stopCopiedEntry(phased,  actualNeedsZip64,  checkIfNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  stopCopiedEntry(phased,  actualNeedsZip64,  checkIfNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	stopCopiedEntry(phased,  actualNeedsZip64,  checkIfNeedsZip64);	  stopCopiedEntry(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
615	[BUG]  [BUGGY]  stopCopiedEntry(phased,  actualNeedsZip64,  activeMode);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  stopCopiedEntry(phased,  actualNeedsZip64,  activeMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	stopCopiedEntry(phased,  actualNeedsZip64,  activeMode);	  stopCopiedEntry(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
616	[BUG]  [BUGGY]  startCopiedEntry(phased,  actualNeedsZip64,  effectiveMode);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  startCopiedEntry(phased,  actualNeedsZip64,  effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	startCopiedEntry(phased,  actualNeedsZip64,  effectiveMode);	  stopCopiedEntry(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
617	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(entry,  phased);  }  else  {  preClose();  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(entry,  phased);  }  else  {  preClose();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(entry,  phased);  }  else  {  preClose();  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    preClose();    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
618	[BUG]  [BUGGY]  if(phased)  {  checkIfNeedsZip64(phased);  }  else  {  preClose();  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  checkIfNeedsZip64(phased);  }  else  {  preClose();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  checkIfNeedsZip64(phased);  }  else  {  preClose();  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    preClose();    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
619	[BUG]  [BUGGY]  CloseEntry(new  Zip64Mode(effectiveMode,  phased));  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  CloseEntry(new  Zip64Mode(effectiveMode,  phased));  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	CloseEntry(new  Zip64Mode(effectiveMode,  phased));	  if(checkIfNeedsZip64)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
620	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  trueNeedsZip64  +  1);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  trueNeedsZip64  +  1);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(phased,  trueNeedsZip64  +  1);	  final    boolean    phased    =    checkIfNeedsZip64(phased,    trueNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
621	[BUG]  [BUGGY]  if(phased)  {  checkIfNeedsZip64(effectiveMode,  entry.bytesRead);  }  else  {  entry.bytesRead  =  entry.getBytesRead();  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  checkIfNeedsZip64(effectiveMode,  entry.bytesRead);  }  else  {  entry.bytesRead  =  entry.getBytesRead();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  checkIfNeedsZip64(effectiveMode,  entry.bytesRead);  }  else  {  entry.bytesRead  =  entry.getBytesRead();  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    entry.bytesRead    =    entry.getBytesRead();    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
622	[BUG]  [BUGGY]  if(phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  +=  entry.getBytesRead();  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  +=  entry.getBytesRead();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  +=  entry.getBytesRead();  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    entry.bytesRead    =    entry.getBytesRead();    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
623	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  closeEntry(activeMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(phased)  {  closeEntry(activeMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  closeEntry(activeMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(activeMode,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
624	[BUG]  [BUGGY]  if(phased)  {  closeEntry(activeMode,  phased);  }  else  {  checkIfNeedsZip64(efficientMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(activeMode,  phased);  }  else  {  checkIfNeedsZip64(efficientMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(activeMode,  phased);  }  else  {  checkIfNeedsZip64(efficientMode);  }	  if(phased)    {    closeEntry(activeMode,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
625	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  currentMode);  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  currentMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(phased,  currentMode);	  final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64,    phased);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
626	[BUG]  [BUGGY]  if(phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(realNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(realNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(realNeedsZip64);  }	  if(actualNeedsZip64!=    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
627	[BUG]  [BUGGY]  if(phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  CheckIfNeedsZip64(actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  CheckIfNeedsZip64(actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  CheckIfNeedsZip64(actualNeedsZip64);  }	  if(actualNeedsZip64!=    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
628	[BUG]  [BUGGY]  final  boolean  actuallyNeedsZip64  =  phased  &&  checkIfNeedsZip64(effectiveMode);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  actuallyNeedsZip64  =  phased  &&  checkIfNeedsZip64(effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  actuallyNeedsZip64  =  phased  &&  checkIfNeedsZip64(effectiveMode);	  final    boolean    actuallyNeedsZip64    =    checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
629	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead  =  zip64Mode;  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead  =  zip64Mode;  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead  =  zip64Mode;  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    entry.bytesRead    =    zip64Mode;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
630	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead  =  zip64Mode;  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead  =  zip64Mode;  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead  =  zip64Mode;  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    entry.bytesRead    =    zip64Mode;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
631	[BUG]  [BUGGY]  if(phased)  {  closePipedEntry(entry,  phased);  }  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closePipedEntry(entry,  phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closePipedEntry(entry,  phased);  }	  if(phased)    {    closeEntry(entry,    phased);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
632	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(entry);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(entry);  }	  if(phased)    {    closeEntry(entry,    phased);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
633	[BUG]  [BUGGY]  closeCopiedEntry(entry.bytesRead,  effectiveMode);  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(entry.bytesRead,  effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(entry.bytesRead,  effectiveMode);	  closeCopiedEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
634	[BUG]  [BUGGY]  if(actualNeedsZip64!=  entry.bytesRead)  {  closeCopiedEntry(entry.bytesRead,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(actualNeedsZip64!=  entry.bytesRead)  {  closeCopiedEntry(entry.bytesRead,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(actualNeedsZip64!=  entry.bytesRead)  {  closeCopiedEntry(entry.bytesRead,  actualNeedsZip64);  }	  closeCopiedEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
635	[BUG]  [BUGGY]  if(actualNeedsZip64!=  entry.bytesRead)  {  closeCopiedEntry(entry.bytesRead,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(actualNeedsZip64!=  entry.bytesRead)  {  closeCopiedEntry(entry.bytesRead,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(actualNeedsZip64!=  entry.bytesRead)  {  closeCopiedEntry(entry.bytesRead,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }	  closeCopiedEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
636	[BUG]  [BUGGY]  if(actualNeedsZip64!=  entry.bytesRead)  {  closeCopiedEntry(entry.bytesRead,  actualNeedsZip64);  }  else  {  preClose();  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(actualNeedsZip64!=  entry.bytesRead)  {  closeCopiedEntry(entry.bytesRead,  actualNeedsZip64);  }  else  {  preClose();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(actualNeedsZip64!=  entry.bytesRead)  {  closeCopiedEntry(entry.bytesRead,  actualNeedsZip64);  }  else  {  preClose();  }	  closeCopiedEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
637	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(actualNeedsZip64!=    phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualMode);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
638	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsChanged(phased,  phased);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsChanged(phased,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsChanged(phased,  phased);	  final    boolean    phased    =    checkIfNeedsChanged(phased);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
639	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsChanged(phased  +  1);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsChanged(phased  +  1);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsChanged(phased  +  1);	  final    boolean    phased    =    checkIfNeedsChanged(phased);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
640	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsPased(phased);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsPased(phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsPased(phased);	  final    boolean    phased    =    checkIfNeedsChanged(phased);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
641	[BUG]  [BUGGY]  if(phased  ||  checkIfNeedsZip64)  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  ||  checkIfNeedsZip64)  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  ||  checkIfNeedsZip64)  {  checkIfNeedsZip64(effectiveMode);  }	  if(!phased)    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
642	[BUG]  [BUGGY]  Preconditions.checkState(!phased)  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(!phased)  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(!phased)  {  checkIfNeedsZip64(effectiveMode);  }	  if(!phased)    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
643	[BUG]  [BUGGY]  if(phased)  {  final  Zip64Mode  phased  =  checkIfNeedsZip64(phased);  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  final  Zip64Mode  phased  =  checkIfNeedsZip64(phased);  }  else  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  final  Zip64Mode  phased  =  checkIfNeedsZip64(phased);  }  else  {  zip64Mode.close();  }	  if(phased)    {    final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
644	[BUG]  [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(phased);  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(phased);  }  else  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(phased);  }  else  {  zip64Mode.close();  }	  if(phased)    {    final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
645	[BUG]  [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode.close();  }	  if(phased)    {    final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
646	[BUG]  [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(partialMode);  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(partialMode);  }  else  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(partialMode);  }  else  {  zip64Mode.close();  }	  if(phased)    {    final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
647	[BUG]  [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(opt64Mode);  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(opt64Mode);  }  else  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(opt64Mode);  }  else  {  zip64Mode.close();  }	  if(phased)    {    final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
648	[BUG]  [BUGGY]  if(phased  &&  zip64Mode!=  null)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  zip64Mode!=  null)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  zip64Mode!=  null)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }	  if(phased)    {    closeEntry(entry.bytesRead,    phased);    }    else    {    zip64Mode    =    getCopiedZip64Mode(entry.bytesRead);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
649	[BUG]  [BUGGY]  if(phased)  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }	  if(phased)    {    closeEntry(entry.bytesRead,    phased);    }    else    {    zip64Mode    =    getCopiedZip64Mode(entry.bytesRead);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
650	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  closeCopiedEntry(entry,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(phased)  {  closeCopiedEntry(entry,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  closeCopiedEntry(entry,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeCopiedEntry(entry,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
651	[BUG]  [BUGGY]  if(phased  &&  zip64Mode!=  effectiveMode)  {  closeCopiedEntry(entry,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  zip64Mode!=  effectiveMode)  {  closeCopiedEntry(entry,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  zip64Mode!=  effectiveMode)  {  closeCopiedEntry(entry,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeCopiedEntry(entry,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
652	[BUG]  [BUGGY]  if(phased  &&  zip64Mode!=  null)  {  closeCopiedEntry(entry,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  zip64Mode!=  null)  {  closeCopiedEntry(entry,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  zip64Mode!=  null)  {  closeCopiedEntry(entry,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeCopiedEntry(entry,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
653	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  closeCopiedEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(phased)  {  closeCopiedEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  closeCopiedEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeCopiedEntry(entry,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
654	[BUG]  [BUGGY]  final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(actualNeedsZip64  +  phased);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(actualNeedsZip64  +  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(actualNeedsZip64  +  phased);	  final    boolean    actualNeedsZip64    =    checkIfNeedsZip64(actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
655	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsCip64(phased  +  1);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsCip64(phased  +  1);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsCip64(phased  +  1);	  final    boolean    phased    =    checkIfNeedsCip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
656	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsCopied(phased);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsCopied(phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsCopied(phased);	  final    boolean    phased    =    checkIfNeedsCip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
657	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  closeCopiedEntry(new  Zip64Mode(effectiveMode,  phased));  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(phased)  {  closeCopiedEntry(new  Zip64Mode(effectiveMode,  phased));  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  closeCopiedEntry(new  Zip64Mode(effectiveMode,  phased));  }	  if(phased)    {    closeCopiedEntry(new    Zip64Mode(effectiveMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
658	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(new  Zip64Mode(effectiveMode,  false));  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(new  Zip64Mode(effectiveMode,  false));  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(new  Zip64Mode(effectiveMode,  false));  }	  if(phased)    {    closeCopiedEntry(new    Zip64Mode(effectiveMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
659	[BUG]  [BUGGY]  CloseCopiedEntry(new  Zip64Mode(effectiveMode,  phased));  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  CloseCopiedEntry(new  Zip64Mode(effectiveMode,  phased));  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	CloseCopiedEntry(new  Zip64Mode(effectiveMode,  phased));	  if(phased)    {    closeCopiedEntry(new    Zip64Mode(effectiveMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
660	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(new  Zip64Mode(effectiveMode,  phased),  phased);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(new  Zip64Mode(effectiveMode,  phased),  phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(new  Zip64Mode(effectiveMode,  phased),  phased);  }	  if(phased)    {    closeCopiedEntry(new    Zip64Mode(effectiveMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
661	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(new  Zip64Mode(effectiveMode,  0,  phased));  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(new  Zip64Mode(effectiveMode,  0,  phased));  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(new  Zip64Mode(effectiveMode,  0,  phased));  }	  if(phased)    {    closeCopiedEntry(new    Zip64Mode(effectiveMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
662	[BUG]  [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(phased);  }  else  {  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(phased);  }  else  {  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(phased);  }  else  {  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode);  }	  if(phased)    {    final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    }    else    {    Zip64Mode    mode    =    getMode();    closeCopiedEntry(mode);    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
663	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(phased);  }  else  {  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(phased);  }  else  {  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(phased);  }  else  {  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode);  }	  if(phased)    {    final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    }    else    {    Zip64Mode    mode    =    getMode();    closeCopiedEntry(mode);    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
664	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  phased,  false);  }  else  {  preClose();  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  phased,  false);  }  else  {  preClose();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry.bytesRead,  phased,  false);  }  else  {  preClose();  }	  closeEntry(entry.bytesRead,    phased,    false);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
665	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  phased,  false);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  phased,  false);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry.bytesRead,  phased,  false);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  closeEntry(entry.bytesRead,    phased,    false);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
666	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  phased,  false);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  phased,  false);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry.bytesRead,  phased,  false);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }	  closeEntry(entry.bytesRead,    phased,    false);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
667	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  phased,  false);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.getName());  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  phased,  false);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.getName());  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry.bytesRead,  phased,  false);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.getName());  }	  closeEntry(entry.bytesRead,    phased,    false);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
668	[BUG]  [BUGGY]  finallyNeedsZip64  =  checkIfNeedsZip64(phased  +  1);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyNeedsZip64  =  checkIfNeedsZip64(phased  +  1);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyNeedsZip64  =  checkIfNeedsZip64(phased  +  1);	  finallyNeedsZip64    =    checkIfNeedsZip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
669	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
670	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  false));  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  false));  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  false));  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
671	[BUG]  [BUGGY]  if(checkIfNeedsZip64)  {  checkIfNeedsZip64(effectiveMode,  entry.bytesRead);  }  else  {  entry.bytesRead  =  entry.getSize();  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64)  {  checkIfNeedsZip64(effectiveMode,  entry.bytesRead);  }  else  {  entry.bytesRead  =  entry.getSize();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64)  {  checkIfNeedsZip64(effectiveMode,  entry.bytesRead);  }  else  {  entry.bytesRead  =  entry.getSize();  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    entry.bytesRead    =    entry.getSize();    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
672	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(phased);  }  else  {  preClose();  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(phased);  }  else  {  preClose();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(phased);  }  else  {  preClose();  }	  if(phased)    {    final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    }    else    {    preClose();    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
673	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(phased);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(phased);	  if(phased)    {    final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    }    else    {    preClose();    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
674	[BUG]  [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(period);  }  else  {  preClose();  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(period);  }  else  {  preClose();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(period);  }  else  {  preClose();  }	  if(phased)    {    final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    }    else    {    preClose();    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
675	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(phased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(Zip64Mode.DEFAULT_ENCODING,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
676	[BUG]  [BUGGY]  if(phased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  0,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  0,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  0,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(Zip64Mode.DEFAULT_ENCODING,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
677	[BUG]  [BUGGY]  if(phased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  initialized);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  initialized);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  initialized);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(Zip64Mode.DEFAULT_ENCODING,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
678	[BUG]  [BUGGY]  if(checkIfNeedsZip64(effectiveMode))  {  closeCopiedEntry(phased,  actualNeedsZip64,  effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64(effectiveMode))  {  closeCopiedEntry(phased,  actualNeedsZip64,  effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64(effectiveMode))  {  closeCopiedEntry(phased,  actualNeedsZip64,  effectiveMode);  }	  closeCopiedEntry(phased,    actualNeedsZip64,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
679	[BUG]  [BUGGY]  if(checkIfNeedsZip64(effectiveMode))  {  closeCopiedEntry(phased,  actualNeedsZip64,  effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64(effectiveMode))  {  closeCopiedEntry(phased,  actualNeedsZip64,  effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64(effectiveMode))  {  closeCopiedEntry(phased,  actualNeedsZip64,  effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  closeCopiedEntry(phased,    actualNeedsZip64,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
680	[BUG]  [BUGGY]  if(effectiveMode!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64,  effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(effectiveMode!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64,  effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(effectiveMode!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64,  effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  closeCopiedEntry(phased,    actualNeedsZip64,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
681	[BUG]  [BUGGY]  closeCopiedEntry(phased,  effectiveMode,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(phased,  effectiveMode,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(phased,  effectiveMode,  actualNeedsZip64);	  closeCopiedEntry(phased,    actualNeedsZip64,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
682	[BUG]  [BUGGY]  if(checkIfNeedsZip64(effectiveMode))  {  closeCopiedEntry(phased,  actualNeedsZip64,  effectiveMode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64(effectiveMode))  {  closeCopiedEntry(phased,  actualNeedsZip64,  effectiveMode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64(effectiveMode))  {  closeCopiedEntry(phased,  actualNeedsZip64,  effectiveMode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  closeCopiedEntry(phased,    actualNeedsZip64,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
683	[BUG]  [BUGGY]  if(effectiveMode!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64,  effectiveMode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(effectiveMode!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64,  effectiveMode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(effectiveMode!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64,  effectiveMode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  closeCopiedEntry(phased,    actualNeedsZip64,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
684	[BUG]  [BUGGY]  final  boolean  phased  =  verifyIfNeedsZip64(phased  +  1);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  verifyIfNeedsZip64(phased  +  1);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  verifyIfNeedsZip64(phased  +  1);	  final    boolean    phased    =    verifyIfNeedsZip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
685	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  closeEntry(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(phased)  {  closeEntry(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  closeEntry(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(effectiveMode,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
686	[BUG]  [BUGGY]  finallyNeedsZip64  =  checkIfNeedsZip64(activeMode);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyNeedsZip64  =  checkIfNeedsZip64(activeMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyNeedsZip64  =  checkIfNeedsZip64(activeMode);	  finallyNeedsZip64    =    checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
687	[BUG]  [BUGGY]  if(effectiveMode!=  phased)  {  closeCopiedEntry(phased,  effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(effectiveMode!=  phased)  {  closeCopiedEntry(phased,  effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(effectiveMode!=  phased)  {  closeCopiedEntry(phased,  effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  closeCopiedEntry(phased,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
688	[BUG]  [BUGGY]  if(effectiveMode  ==  phased)  {  closeCopiedEntry(phased,  effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(effectiveMode  ==  phased)  {  closeCopiedEntry(phased,  effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(effectiveMode  ==  phased)  {  closeCopiedEntry(phased,  effectiveMode);  }	  closeCopiedEntry(phased,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
689	[BUG]  [BUGGY]  phased  =  closePhaseEntry(effectiveMode,  phased);  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  phased  =  closePhaseEntry(effectiveMode,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	phased  =  closePhaseEntry(effectiveMode,  phased);	  phased    =    closePhaseEntry(actuallyNeedsZip64,    phased);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
690	[BUG]  [BUGGY]  phased  =  closePhaseEntry(period,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  phased  =  closePhaseEntry(period,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	phased  =  closePhaseEntry(period,  actualNeedsZip64);	  phased    =    closePhaseEntry(actuallyNeedsZip64,    phased);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
691	[BUG]  [BUGGY]  phased  =  closePhaseEntry(activeMode,  phased);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  phased  =  closePhaseEntry(activeMode,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	phased  =  closePhaseEntry(activeMode,  phased);	  phased    =    closePhaseEntry(actuallyNeedsZip64,    phased);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
692	[BUG]  [BUGGY]  phased  =  closePhaseEntry(positive,  phased);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  phased  =  closePhaseEntry(positive,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	phased  =  closePhaseEntry(positive,  phased);	  phased    =    closePhaseEntry(actuallyNeedsZip64,    phased);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
693	[BUG]  [BUGGY]  if(phased  &&  zip64Mode!=  effectiveMode)  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  zip64Mode!=  effectiveMode)  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  zip64Mode!=  effectiveMode)  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
694	[BUG]  [BUGGY]  if(phased)  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode,  phased);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode,  phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode,  phased);  }	  if(phased)    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
695	[BUG]  [BUGGY]  if(phased  &&  zip64Mode!=  effectiveMode)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  zip64Mode!=  effectiveMode)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  zip64Mode!=  effectiveMode)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
696	[BUG]  [BUGGY]  if(phased  &&  zip64Mode!=  null)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  zip64Mode!=  null)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  zip64Mode!=  null)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
697	[BUG]  [BUGGY]  if(phased  &&  zip64Mode!=  effectiveMode)  {  closeEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  zip64Mode!=  effectiveMode)  {  closeEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  zip64Mode!=  effectiveMode)  {  closeEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
698	[BUG]  [BUGGY]  if(phased)  {  closePipedEntry(effectiveMode,  phased);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closePipedEntry(effectiveMode,  phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closePipedEntry(effectiveMode,  phased);  }	  if(phased)    {    closeEntry(effectiveMode,    phased);    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
699	[BUG]  [BUGGY]  if(checkIfNeedsZip64  &&  phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64  &&  phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64  &&  phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode.close();  }	  if(checkIfNeedsZip64)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
700	[BUG]  [BUGGY]  if(!phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(!phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(!phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode.close();  }	  if(checkIfNeedsZip64)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
701	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry,  phased,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(entry,  phased,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry,  phased,  actualNeedsZip64);  }	  closeEntry(entry,    phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
702	[BUG]  [BUGGY]  closeEntry(entry,  phased,  actualNeedsZip64,  activeMode);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry,  phased,  actualNeedsZip64,  activeMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry,  phased,  actualNeedsZip64,  activeMode);	  closeEntry(entry,    phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
703	[BUG]  [BUGGY]  closeEntry(entry,  phased,  actualNeedsZip64,  efectivMode);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry,  phased,  actualNeedsZip64,  efectivMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry,  phased,  actualNeedsZip64,  efectivMode);	  closeEntry(entry,    phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
704	[BUG]  [BUGGY]  closeEntry(entry,  phased,  actualNeedsZip64,  realMode);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry,  phased,  actualNeedsZip64,  realMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry,  phased,  actualNeedsZip64,  realMode);	  closeEntry(entry,    phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
705	[BUG]  [BUGGY]  if(phased)  {  closePaddedEntry(entry,  phased);  }  else  {  zip64Mode  =  getPaddedZip64Mode(entry.bytesRead);  }  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closePaddedEntry(entry,  phased);  }  else  {  zip64Mode  =  getPaddedZip64Mode(entry.bytesRead);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closePaddedEntry(entry,  phased);  }  else  {  zip64Mode  =  getPaddedZip64Mode(entry.bytesRead);  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    getPaddedZip64Mode(entry.bytesRead);    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
706	[BUG]  [BUGGY]  if(phased  &&  zip64Mode!=  null)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getPaddedZip64Mode(entry.bytesRead);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  zip64Mode!=  null)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getPaddedZip64Mode(entry.bytesRead);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  zip64Mode!=  null)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getPaddedZip64Mode(entry.bytesRead);  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    getPaddedZip64Mode(entry.bytesRead);    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
707	[BUG]  [BUGGY]  if(phased  &&  zip64Mode!=  getPaddedZip64Mode())  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getPaddedZip64Mode(entry.bytesRead);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  zip64Mode!=  getPaddedZip64Mode())  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getPaddedZip64Mode(entry.bytesRead);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  zip64Mode!=  getPaddedZip64Mode())  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getPaddedZip64Mode(entry.bytesRead);  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    getPaddedZip64Mode(entry.bytesRead);    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
708	[BUG]  [BUGGY]  if(effectiveMode!=  entry.bytesRead)  {  closeEntry(entry.bytesRead,  effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(effectiveMode!=  entry.bytesRead)  {  closeEntry(entry.bytesRead,  effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(effectiveMode!=  entry.bytesRead)  {  closeEntry(entry.bytesRead,  effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  closeEntry(entry.bytesRead,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
709	[BUG]  [BUGGY]  if(effectiveMode!=  entry.bytesRead)  {  closeEntry(entry.bytesRead,  effectiveMode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(effectiveMode!=  entry.bytesRead)  {  closeEntry(entry.bytesRead,  effectiveMode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(effectiveMode!=  entry.bytesRead)  {  closeEntry(entry.bytesRead,  effectiveMode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  closeEntry(entry.bytesRead,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
710	[BUG]  [BUGGY]  if(effectiveMode  ==  entry.bytesRead)  {  closeEntry(entry.bytesRead,  effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(effectiveMode  ==  entry.bytesRead)  {  closeEntry(entry.bytesRead,  effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(effectiveMode  ==  entry.bytesRead)  {  closeEntry(entry.bytesRead,  effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  closeEntry(entry.bytesRead,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
711	[BUG]  [BUGGY]  if(effectiveMode!=  entry.bytesRead)  {  closeEntry(entry.bytesRead,  effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(effectiveMode!=  entry.bytesRead)  {  closeEntry(entry.bytesRead,  effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(effectiveMode!=  entry.bytesRead)  {  closeEntry(entry.bytesRead,  effectiveMode);  }	  closeEntry(entry.bytesRead,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
712	[BUG]  [BUGGY]  if(effectiveMode!=  entry.bytesRead)  {  closeEntry(entry.bytesRead,  effectiveMode);  }  else  {  zip64Mode  =  getEffectiveZip64Mode(entry.bytesRead);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(effectiveMode!=  entry.bytesRead)  {  closeEntry(entry.bytesRead,  effectiveMode);  }  else  {  zip64Mode  =  getEffectiveZip64Mode(entry.bytesRead);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(effectiveMode!=  entry.bytesRead)  {  closeEntry(entry.bytesRead,  effectiveMode);  }  else  {  zip64Mode  =  getEffectiveZip64Mode(entry.bytesRead);  }	  closeEntry(entry.bytesRead,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
713	[BUG]  [BUGGY]  if(effectiveMode  ==  entry.bytesRead)  {  closeEntry(entry.bytesRead,  effectiveMode);  }  else  {  zip64Mode  =  getEffectiveZip64Mode(entry.bytesRead);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(effectiveMode  ==  entry.bytesRead)  {  closeEntry(entry.bytesRead,  effectiveMode);  }  else  {  zip64Mode  =  getEffectiveZip64Mode(entry.bytesRead);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(effectiveMode  ==  entry.bytesRead)  {  closeEntry(entry.bytesRead,  effectiveMode);  }  else  {  zip64Mode  =  getEffectiveZip64Mode(entry.bytesRead);  }	  closeEntry(entry.bytesRead,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
714	[BUG]  [BUGGY]  if(phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  Zip64Mode  activeMode  =  getCopiedZip64Mode(activeMode);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  Zip64Mode  activeMode  =  getCopiedZip64Mode(activeMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  Zip64Mode  activeMode  =  getCopiedZip64Mode(activeMode);  }	  if(actualNeedsZip64!=    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    else    {    zip64Mode    =    getCopiedZip64Mode(actualMode);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
715	[BUG]  [BUGGY]  if(phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(effectiveMode);  }	  if(actualNeedsZip64!=    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    else    {    zip64Mode    =    getCopiedZip64Mode(actualMode);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
716	[BUG]  [BUGGY]  if(checkIfNeedsZip64)  {  checkIfNeedsZip64(effectiveMode,  entry.bytesRead);  }  else  {  entry.bytesRead  =  entry.getByteRead();  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64)  {  checkIfNeedsZip64(effectiveMode,  entry.bytesRead);  }  else  {  entry.bytesRead  =  entry.getByteRead();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64)  {  checkIfNeedsZip64(effectiveMode,  entry.bytesRead);  }  else  {  entry.bytesRead  =  entry.getByteRead();  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    entry.bytesRead    =    entry.getByteRead();    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
717	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  phased,  effectiveMode,  zip64Mode);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  phased,  effectiveMode,  zip64Mode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  phased,  effectiveMode,  zip64Mode);	  closeEntry(entry.bytesRead,    phased,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
718	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  phased,  effectiveMode,  checkIfNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  phased,  effectiveMode,  checkIfNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  phased,  effectiveMode,  checkIfNeedsZip64);	  closeEntry(entry.bytesRead,    phased,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
719	[BUG]  [BUGGY]  final  Zip64Mode  activeMode  =  checkIfNeedsZip64(effectiveMode);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  activeMode  =  checkIfNeedsZip64(effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  activeMode  =  checkIfNeedsZip64(effectiveMode);	  closeEntry(entry.bytesRead,    phased,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
720	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  phased,  effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  phased,  effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry.bytesRead,  phased,  effectiveMode);  }	  closeEntry(entry.bytesRead,    phased,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
721	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  phased,  effectiveMode,  encoding);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  phased,  effectiveMode,  encoding);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  phased,  effectiveMode,  encoding);	  closeEntry(entry.bytesRead,    phased,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
722	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  closeCopiedEntry(new  Zip64Mode(activeMode,  phased));  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(phased)  {  closeCopiedEntry(new  Zip64Mode(activeMode,  phased));  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  closeCopiedEntry(new  Zip64Mode(activeMode,  phased));  }	  if(phased)    {    closeCopiedEntry(new    Zip64Mode(activeMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
723	[BUG]  [BUGGY]  final  phased)  {  closeCopiedEntry(new  Zip64Mode(activeMode,  phased));  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  phased)  {  closeCopiedEntry(new  Zip64Mode(activeMode,  phased));  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  phased)  {  closeCopiedEntry(new  Zip64Mode(activeMode,  phased));  }	  if(phased)    {    closeCopiedEntry(new    Zip64Mode(activeMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
724	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(new  Zip64Mode(activeMode,  true));  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(new  Zip64Mode(activeMode,  true));  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(new  Zip64Mode(activeMode,  true));  }	  if(phased)    {    closeCopiedEntry(new    Zip64Mode(activeMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
725	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(new  Zip64Mode(activeMode,  false));  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(new  Zip64Mode(activeMode,  false));  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(new  Zip64Mode(activeMode,  false));  }	  if(phased)    {    closeCopiedEntry(new    Zip64Mode(activeMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
726	[BUG]  [BUGGY]  CloseCopiedEntry(new  Zip64Mode(activeMode,  phased));  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  CloseCopiedEntry(new  Zip64Mode(activeMode,  phased));  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	CloseCopiedEntry(new  Zip64Mode(activeMode,  phased));	  if(phased)    {    closeCopiedEntry(new    Zip64Mode(activeMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
727	[BUG]  [BUGGY]  if(phased)  {  zip64Mode  =  getCopiedZip64Mode(effectiveMode);  }  else  {  zip64Mode  =  getCopiedZip64Mode(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  zip64Mode  =  getCopiedZip64Mode(effectiveMode);  }  else  {  zip64Mode  =  getCopiedZip64Mode(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  zip64Mode  =  getCopiedZip64Mode(effectiveMode);  }  else  {  zip64Mode  =  getCopiedZip64Mode(effectiveMode);  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    zip64Mode    =    getCopiedZip64Mode(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
728	[BUG]  [BUGGY]  if(phased)  {  zip64Mode  =  getCopiedZip64Mode(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  zip64Mode  =  getCopiedZip64Mode(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  zip64Mode  =  getCopiedZip64Mode(effectiveMode);  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    zip64Mode    =    getCopiedZip64Mode(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
729	[BUG]  [BUGGY]  if(phased)  {  zip64Mode  =  getCopiedZip64Mode(effectiveMode);  }  else  {  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  zip64Mode  =  getCopiedZip64Mode(effectiveMode);  }  else  {  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  zip64Mode  =  getCopiedZip64Mode(effectiveMode);  }  else  {  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(effectiveMode);  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    zip64Mode    =    getCopiedZip64Mode(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
730	[BUG]  [BUGGY]  final  Zip64Mode  activeMode  =  getActiveZip64Mode(activeMode);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  activeMode  =  getActiveZip64Mode(activeMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  activeMode  =  getActiveZip64Mode(activeMode);	  if(checkIfNeedsZip64)    {    for(final    Zip64Mode    activeMode    :    activeModes)    {    checkIfNeedsZip64(activeMode);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
731	[BUG]  [BUGGY]  CheckIfNeedsZip64  <  =  phased  ||  checkIfNeedsZip64  {  for(final  Zip64Mode  activeMode  :  activeModes)  {  checkIfNeedsZip64(activeMode);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  CheckIfNeedsZip64  <  =  phased  ||  checkIfNeedsZip64  {  for(final  Zip64Mode  activeMode  :  activeModes)  {  checkIfNeedsZip64(activeMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	CheckIfNeedsZip64  <  =  phased  ||  checkIfNeedsZip64  {  for(final  Zip64Mode  activeMode  :  activeModes)  {  checkIfNeedsZip64(activeMode);  }	  if(checkIfNeedsZip64)    {    for(final    Zip64Mode    activeMode    :    activeModes)    {    checkIfNeedsZip64(activeMode);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
732	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead.close();  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead.close();  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    entry.bytesRead.close();    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
733	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead.close();  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead.close();  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    entry.bytesRead.close();    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
734	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  phased);  }  else  {  entry.bytesRead.close();  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  phased);  }  else  {  entry.bytesRead.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  phased);  }  else  {  entry.bytesRead.close();  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    entry.bytesRead.close();    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
735	[BUG]  [BUGGY]  Preconditions.checkState(!phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead.close();  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(!phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(!phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead.close();  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    entry.bytesRead.close();    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
736	[BUG]  [BUGGY]  final  boolean  phased  =  checkPasedZip64(phased,  phased);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkPasedZip64(phased,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkPasedZip64(phased,  phased);	  final    boolean    phased    =    checkPasedZip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
737	[BUG]  [BUGGY]  final  boolean  phased  =  checkPasedZip64(phased  +  1);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkPasedZip64(phased  +  1);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkPasedZip64(phased  +  1);	  final    boolean    phased    =    checkPasedZip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
738	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  closeEntry(entry,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(phased)  {  closeEntry(entry,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  closeEntry(entry,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
739	[BUG]  [BUGGY]  final  boolean  phased  =  phased?  checkIfNeedsZip64(phased):  checkIfNeedsZip64;  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  phased?  checkIfNeedsZip64(phased):  checkIfNeedsZip64;  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  phased?  checkIfNeedsZip64(phased):  checkIfNeedsZip64;	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
740	[BUG]  [BUGGY]  if(effectiveMode!=  phased)  {  closeEntry(phased,  actualNeedsZip64,  effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(effectiveMode!=  phased)  {  closeEntry(phased,  actualNeedsZip64,  effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(effectiveMode!=  phased)  {  closeEntry(phased,  actualNeedsZip64,  effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  closeEntry(phased,    actualNeedsZip64,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
741	[BUG]  [BUGGY]  if(effectiveMode!=  phased)  {  closeEntry(phased,  actualNeedsZip64,  effectiveMode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(effectiveMode!=  phased)  {  closeEntry(phased,  actualNeedsZip64,  effectiveMode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(effectiveMode!=  phased)  {  closeEntry(phased,  actualNeedsZip64,  effectiveMode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  closeEntry(phased,    actualNeedsZip64,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
742	[BUG]  [BUGGY]  if(effectiveMode!=  phased)  {  closeEntry(phased,  actualNeedsZip64,  effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(effectiveMode!=  phased)  {  closeEntry(phased,  actualNeedsZip64,  effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(effectiveMode!=  phased)  {  closeEntry(phased,  actualNeedsZip64,  effectiveMode);  }	  closeEntry(phased,    actualNeedsZip64,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
743	[BUG]  [BUGGY]  if(effectiveMode!=  phased)  {  closeEntry(phased,  actualNeedsZip64,  effectiveMode);  }  else  {  zip64Mode  =  getCopiedZip64Mode(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(effectiveMode!=  phased)  {  closeEntry(phased,  actualNeedsZip64,  effectiveMode);  }  else  {  zip64Mode  =  getCopiedZip64Mode(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(effectiveMode!=  phased)  {  closeEntry(phased,  actualNeedsZip64,  effectiveMode);  }  else  {  zip64Mode  =  getCopiedZip64Mode(effectiveMode);  }	  closeEntry(phased,    actualNeedsZip64,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
744	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  phased,  actualNeedsZip64,  activeMode);  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  phased,  actualNeedsZip64,  activeMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  phased,  actualNeedsZip64,  activeMode);	  closeEntry(entry.bytesRead,    phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
745	[BUG]  [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(phased);  }  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(phased);  }	  if(phased)    {    final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
746	[BUG]  [BUGGY]  lastMode  =  checkIfNeedsZip64(phased);  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  lastMode  =  checkIfNeedsZip64(phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	lastMode  =  checkIfNeedsZip64(phased);	  if(phased)    {    final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
747	[BUG]  [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(phased,  activeMode));  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(phased,  activeMode));  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  effectiveMode  =  new  Zip64Mode(phased,  activeMode));	  final    Zip64Mode    effectiveMode    =    new    Zip64Mode(effectiveMode,    phased));    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
748	[BUG]  [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(plotsRead,  phased));  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(plotsRead,  phased));  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  effectiveMode  =  new  Zip64Mode(plotsRead,  phased));	  final    Zip64Mode    effectiveMode    =    new    Zip64Mode(effectiveMode,    phased));    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
749	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(entry,  phased);  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(entry,  phased);  }  else  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(entry,  phased);  }  else  {  zip64Mode.close();  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
750	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(phased)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode.close();  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
751	[BUG]  [BUGGY]  stopCopiedEntry(new  Zip64Mode(effectiveMode),  phased);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  stopCopiedEntry(new  Zip64Mode(effectiveMode),  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	stopCopiedEntry(new  Zip64Mode(effectiveMode),  phased);	  stopCopiedEntry(actuallyNeedsZip64,    phased);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
752	[BUG]  [BUGGY]  stopCopiedEntry(new  Zip64Mode(activeMode,  phased));  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  stopCopiedEntry(new  Zip64Mode(activeMode,  phased));  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	stopCopiedEntry(new  Zip64Mode(activeMode,  phased));	  stopCopiedEntry(actuallyNeedsZip64,    phased);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
753	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(phased);  }  else  {  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode,  mode);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(phased);  }  else  {  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode,  mode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(phased);  }  else  {  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode,  mode);  }	  if(phased)    {    final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    }    else    {    Zip64Mode    mode    =    getMode();    closeCopiedEntry(mode,    mode);    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
754	[BUG]  [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(phased);  }  else  {  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode,  mode);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(phased);  }  else  {  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode,  mode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(phased);  }  else  {  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode,  mode);  }	  if(phased)    {    final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    }    else    {    Zip64Mode    mode    =    getMode();    closeCopiedEntry(mode,    mode);    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
755	[BUG]  [BUGGY]  if(phased)  {  final  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode,  mode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  final  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode,  mode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  final  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode,  mode);  }	  if(phased)    {    final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    }    else    {    Zip64Mode    mode    =    getMode();    closeCopiedEntry(mode,    mode);    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
756	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(effectiveMode,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(effectiveMode,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(effectiveMode,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(actuallyNeedsZip64,    effectiveMode);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
757	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(effectiveMode,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(effectiveMode,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(effectiveMode,  actualNeedsZip64);  }	  if(phased)    {    closeEntry(actuallyNeedsZip64,    effectiveMode);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
758	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  checkIfNeedsZip64(effectiveMode,  phased);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(phased)  {  checkIfNeedsZip64(effectiveMode,  phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  checkIfNeedsZip64(effectiveMode,  phased);  }	  Preconditions.checkState(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
759	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  checkIfNeedsZip64(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(efficientMode);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(phased)  {  checkIfNeedsZip64(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(efficientMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  checkIfNeedsZip64(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(efficientMode);  }	  Preconditions.checkState(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
760	[BUG]  [BUGGY]  if(checkIfNeedsZip64  &&  phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead  =  zip64Mode;  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64  &&  phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead  =  zip64Mode;  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64  &&  phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead  =  zip64Mode;  }	  if(checkIfNeedsZip64)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    entry.bytesRead    =    zip64Mode;    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
761	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  checkedIfNeedsZip64));  }  else  {  entry.bytesRead  =  zip64Mode;  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  checkedIfNeedsZip64));  }  else  {  entry.bytesRead  =  zip64Mode;  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  checkedIfNeedsZip64));  }  else  {  entry.bytesRead  =  zip64Mode;  }	  if(checkIfNeedsZip64)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    entry.bytesRead    =    zip64Mode;    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
762	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  checkIfNeedsZip64));  }  else  {  entry.bytesRead  =  zip64Mode;  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  checkIfNeedsZip64));  }  else  {  entry.bytesRead  =  zip64Mode;  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  checkIfNeedsZip64));  }  else  {  entry.bytesRead  =  zip64Mode;  }	  if(checkIfNeedsZip64)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    entry.bytesRead    =    zip64Mode;    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
763	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsPaint(phased,  phased);  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsPaint(phased,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsPaint(phased,  phased);	  final    boolean    phased    =    checkIfNeedsPaint(phased);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
764	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsPaint(phased  +  1);  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsPaint(phased  +  1);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsPaint(phased  +  1);	  final    boolean    phased    =    checkIfNeedsPaint(phased);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
765	[BUG]  [BUGGY]  final  boolean  phased  =  checkPaint(phased);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkPaint(phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkPaint(phased);	  final    boolean    phased    =    checkIfNeedsPaint(phased);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
766	[BUG]  [BUGGY]  closeCopiedEntry(entry,  phased,  actualNeedsZip64,  checkIfNeedsZip64);  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(entry,  phased,  actualNeedsZip64,  checkIfNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(entry,  phased,  actualNeedsZip64,  checkIfNeedsZip64);	  closeCopiedEntry(entry,    phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
767	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(entry,  phased,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(entry,  phased,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(entry,  phased,  actualNeedsZip64);  }	  closeCopiedEntry(entry,    phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
768	[BUG]  [BUGGY]  closeCopiedEntry(entry,  phased,  actualNeedsZip64,  activeMode);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(entry,  phased,  actualNeedsZip64,  activeMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(entry,  phased,  actualNeedsZip64,  activeMode);	  closeCopiedEntry(entry,    phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
769	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased  +  4);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased  +  4);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(phased  +  4);	  final    boolean    phased    =    checkIfNeedsZip64(phased    +    1);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
770	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  closeCopiedEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(phased)  {  closeCopiedEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  closeCopiedEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeCopiedEntry(entry.bytesRead,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
771	[BUG]  [BUGGY]  if(phased  &&  zip64Mode!=  null)  {  closeCopiedEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  zip64Mode!=  null)  {  closeCopiedEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  zip64Mode!=  null)  {  closeCopiedEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeCopiedEntry(entry.bytesRead,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
772	[BUG]  [BUGGY]  if(phased  &&  zip64Mode!=  effectiveMode)  {  closeCopiedEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  zip64Mode!=  effectiveMode)  {  closeCopiedEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  zip64Mode!=  effectiveMode)  {  closeCopiedEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeCopiedEntry(entry.bytesRead,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
773	[BUG]  [BUGGY]  final  boolean  phased)  {  closeCopiedEntry(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased)  {  closeCopiedEntry(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased)  {  closeCopiedEntry(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  final    phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
774	[BUG]  [BUGGY]  final  boolean  phased)  {  closeCopiedEntry(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(phased);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased)  {  closeCopiedEntry(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased)  {  closeCopiedEntry(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(phased);  }	  final    phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
775	[BUG]  [BUGGY]  final  phased)  {  checkIfNeedsZip64(phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  phased)  {  checkIfNeedsZip64(phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  phased)  {  checkIfNeedsZip64(phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  final    phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
776	[BUG]  [BUGGY]  if(actualNeedsZip64!=  entry.bytesRead)  {  closeEntry(entry.bytesRead,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(actualNeedsZip64!=  entry.bytesRead)  {  closeEntry(entry.bytesRead,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(actualNeedsZip64!=  entry.bytesRead)  {  closeEntry(entry.bytesRead,  actualNeedsZip64);  }	  closeEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
777	[BUG]  [BUGGY]  if(actualNeedsZip64!=  entry.bytesRead)  {  closeEntry(entry.bytesRead,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(actualNeedsZip64!=  entry.bytesRead)  {  closeEntry(entry.bytesRead,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(actualNeedsZip64!=  entry.bytesRead)  {  closeEntry(entry.bytesRead,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }	  closeEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
778	[BUG]  [BUGGY]  if(actualNeedsZip64!=  entry.bytesRead)  {  closeEntry(entry.bytesRead,  actualNeedsZip64);  }  else  {  preClose();  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(actualNeedsZip64!=  entry.bytesRead)  {  closeEntry(entry.bytesRead,  actualNeedsZip64);  }  else  {  preClose();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(actualNeedsZip64!=  entry.bytesRead)  {  closeEntry(entry.bytesRead,  actualNeedsZip64);  }  else  {  preClose();  }	  closeEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
779	[BUG]  [BUGGY]  if(actualNeedsZip64  ==  entry.bytesRead)  {  closeEntry(entry.bytesRead,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(actualNeedsZip64  ==  entry.bytesRead)  {  closeEntry(entry.bytesRead,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(actualNeedsZip64  ==  entry.bytesRead)  {  closeEntry(entry.bytesRead,  actualNeedsZip64);  }	  closeEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
780	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  closeCopiedEntry(zip64Mode,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(phased)  {  closeCopiedEntry(zip64Mode,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  closeCopiedEntry(zip64Mode,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeCopiedEntry(zip64Mode,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
781	[BUG]  [BUGGY]  if(phased  &&  zip64Mode!=  effectiveMode)  {  closeCopiedEntry(zip64Mode,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  zip64Mode!=  effectiveMode)  {  closeCopiedEntry(zip64Mode,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  zip64Mode!=  effectiveMode)  {  closeCopiedEntry(zip64Mode,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeCopiedEntry(zip64Mode,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
782	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  closeCopiedEntry(zip64Mode,  phased);  }  else  {  Zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(phased)  {  closeCopiedEntry(zip64Mode,  phased);  }  else  {  Zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  closeCopiedEntry(zip64Mode,  phased);  }  else  {  Zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeCopiedEntry(zip64Mode,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
783	[BUG]  [BUGGY]  final  boolean  phased  =  getIfNeedsZip64(phased  +  1);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  getIfNeedsZip64(phased  +  1);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  getIfNeedsZip64(phased  +  1);	  final    boolean    phased    =    getIfNeedsZip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
784	[BUG]  [BUGGY]  final  boolean  phased  =  getIfNeedsZip64(phased,  phased);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  getIfNeedsZip64(phased,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  getIfNeedsZip64(phased,  phased);	  final    boolean    phased    =    getIfNeedsZip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
785	[BUG]  [BUGGY]  final  boolean  phased  =  getIfNeedsZip64(phased)&&  checkIfNeedsZip64(phased);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  getIfNeedsZip64(phased)&&  checkIfNeedsZip64(phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  getIfNeedsZip64(phased)&&  checkIfNeedsZip64(phased);	  final    boolean    phased    =    getIfNeedsZip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
786	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  actualNeedsRead);  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  actualNeedsRead);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(phased,  actualNeedsRead);	  final    boolean    phased    =    checkIfNeedsZip64(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
787	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  closeEntry(zip64Mode,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(phased)  {  closeEntry(zip64Mode,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  closeEntry(zip64Mode,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(zip64Mode,    phased);    }    else    {    Zip64Mode    effectiveMode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
788	[BUG]  [BUGGY]  if(phased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  DEFAULT_ENCODING);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  DEFAULT_ENCODING);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  DEFAULT_ENCODING);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(Zip64Mode.DEFAULT_ENCODING,    zip64Mode);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
789	[BUG]  [BUGGY]  if(phased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  activeMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  activeMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  activeMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(Zip64Mode.DEFAULT_ENCODING,    zip64Mode);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
790	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  closeEntry(entry.bytesRead,  entry.phased);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(phased)  {  closeEntry(entry.bytesRead,  entry.phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  closeEntry(entry.bytesRead,  entry.phased);  }	  if(phased)    {    closeEntry(entry.bytesRead,    entry.phased);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
791	[BUG]  [BUGGY]  final  boolean  phased  =  closePhaseEntry(entry.bytesRead,  entry.phased);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  closePhaseEntry(entry.bytesRead,  entry.phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  closePhaseEntry(entry.bytesRead,  entry.phased);	  if(phased)    {    closeEntry(entry.bytesRead,    entry.phased);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
792	[BUG]  [BUGGY]  finally  phased)  {  closeEntry(entry.bytesRead,  entry.phased);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finally  phased)  {  closeEntry(entry.bytesRead,  entry.phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finally  phased)  {  closeEntry(entry.bytesRead,  entry.phased);  }	  if(phased)    {    closeEntry(entry.bytesRead,    entry.phased);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
793	[BUG]  [BUGGY]  if(phased)  {  preClose();  entry.bytesRead  =  entry.bytesRead;  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  preClose();  entry.bytesRead  =  entry.bytesRead;  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  preClose();  entry.bytesRead  =  entry.bytesRead;  }	  if(phased)    {    closeEntry(entry.bytesRead,    entry.phased);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
794	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  closeEntry(entry.bytesRead,  phased);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(phased)  {  closeEntry(entry.bytesRead,  phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  closeEntry(entry.bytesRead,  phased);  }	  if(phased)    {    closeEntry(entry.bytesRead,    phased);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
795	[BUG]  [BUGGY]  final  phased)  {  closeEntry(entry.bytesRead,  phased);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  phased)  {  closeEntry(entry.bytesRead,  phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  phased)  {  closeEntry(entry.bytesRead,  phased);  }	  if(phased)    {    closeEntry(entry.bytesRead,    phased);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
796	[BUG]  [BUGGY]  final  boolean  phased  =  closePhase(entry.bytesRead,  phased);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  closePhase(entry.bytesRead,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  closePhase(entry.bytesRead,  phased);	  if(phased)    {    closeEntry(entry.bytesRead,    phased);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
797	[BUG]  [BUGGY]  closeCopiedEntry(phased,  falseNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(phased,  falseNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(phased,  falseNeedsZip64);	  closeCopiedEntry(phased,    trueNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
798	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(phased,  trueNeedsZip64);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(phased,  trueNeedsZip64);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(phased,  trueNeedsZip64);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  closeCopiedEntry(phased,    trueNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
799	[BUG]  [BUGGY]  closeCopiedEntry(phased,  trueNeedsZip64,  checkIfNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(phased,  trueNeedsZip64,  checkIfNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(phased,  trueNeedsZip64,  checkIfNeedsZip64);	  closeCopiedEntry(phased,    trueNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
800	[BUG]  [BUGGY]  closeCopiedEntry(phased,  trueNeedsZip64,  activeMode);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(phased,  trueNeedsZip64,  activeMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(phased,  trueNeedsZip64,  activeMode);	  closeCopiedEntry(phased,    trueNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
801	[BUG]  [BUGGY]  if(phased  &&  zip64Mode!=  effectiveMode)  {  closeEntry(zip64Mode,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  zip64Mode!=  effectiveMode)  {  closeEntry(zip64Mode,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  zip64Mode!=  effectiveMode)  {  closeEntry(zip64Mode,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(zip64Mode,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
802	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  closeEntry(zip64Mode,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(phased)  {  closeEntry(zip64Mode,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  closeEntry(zip64Mode,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(zip64Mode,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
803	[BUG]  [BUGGY]  if(phased)  {  closeEntry(zip64Mode,  phase);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(zip64Mode,  phase);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(zip64Mode,  phase);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(zip64Mode,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
804	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.getName());  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.getName());  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.getName());  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    getCopiedZip64Mode(entry.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
805	[BUG]  [BUGGY]  if(phased  &&  zip64Mode!=  null)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.getName());  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  zip64Mode!=  null)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.getName());  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  zip64Mode!=  null)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.getName());  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    getCopiedZip64Mode(entry.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
806	[BUG]  [BUGGY]  if(phased  &&  zip64Mode!=  getCopiedZip64Mode(entry.getName()))  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.getName());  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  zip64Mode!=  getCopiedZip64Mode(entry.getName()))  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.getName());  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  zip64Mode!=  getCopiedZip64Mode(entry.getName()))  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.getName());  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    getCopiedZip64Mode(entry.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
807	[BUG]  [BUGGY]  if(phased  &&  zip64Mode!=  getCopiedZip64Mode())  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.getName());  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  zip64Mode!=  getCopiedZip64Mode())  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.getName());  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  zip64Mode!=  getCopiedZip64Mode())  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.getName());  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    getCopiedZip64Mode(entry.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
808	[BUG]  [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(effectiveMode,  checkIfNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(effectiveMode,  checkIfNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  effectiveMode  =  new  Zip64Mode(effectiveMode,  checkIfNeedsZip64);	  final    Zip64Mode    effectiveMode    =    new    Zip64Mode(effectiveMode,    phased);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
809	[BUG]  [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(module,  phased);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(module,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  effectiveMode  =  new  Zip64Mode(module,  phased);	  final    Zip64Mode    effectiveMode    =    new    Zip64Mode(effectiveMode,    phased);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
810	[BUG]  [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(effectiveMode,  boolean  phased);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(effectiveMode,  boolean  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  effectiveMode  =  new  Zip64Mode(effectiveMode,  boolean  phased);	  final    Zip64Mode    effectiveMode    =    new    Zip64Mode(effectiveMode,    phased);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
811	[BUG]  [BUGGY]  if(phased)  {  zip64Mode  =  new  Zip64Mode();  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  zip64Mode  =  new  Zip64Mode();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  zip64Mode  =  new  Zip64Mode();  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    zip64Mode    =    new    Zip64Mode();    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
812	[BUG]  [BUGGY]  if(phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  Zip64Mode  newZip64Mode  =  new  Zip64Mode();  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  Zip64Mode  newZip64Mode  =  new  Zip64Mode();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  Zip64Mode  newZip64Mode  =  new  Zip64Mode();  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    zip64Mode    =    new    Zip64Mode();    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
813	[BUG]  [BUGGY]  final  Zip64Mode  mode  =  checkIfNeedsZip64(mode);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  mode  =  checkIfNeedsZip64(mode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  mode  =  checkIfNeedsZip64(mode);	  final    Zip64Mode    mode    =    checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
814	[BUG]  [BUGGY]  final  Zip64Mode  mode  =  getIfNeedsZip64(effectiveMode);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  mode  =  getIfNeedsZip64(effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  mode  =  getIfNeedsZip64(effectiveMode);	  final    Zip64Mode    mode    =    checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
815	[BUG]  [BUGGY]  if(phased)  {  closeEntry(effectiveMode,  0,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(effectiveMode,  0,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(effectiveMode,  0,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(effectiveMode,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
816	[BUG]  [BUGGY]  if(phased)  {  closeEntry(effectiveMode,  phased);  }  else  {  CheckIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(effectiveMode,  phased);  }  else  {  CheckIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(effectiveMode,  phased);  }  else  {  CheckIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(effectiveMode,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
817	[BUG]  [BUGGY]  if(phased)  {  closeEntry(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(efficientMode);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(efficientMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(efficientMode);  }	  if(phased)    {    closeEntry(effectiveMode,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
818	[BUG]  [BUGGY]  if(phased  &&  checkIfNeedsZip64)  {  closeEntry(entry,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  checkIfNeedsZip64)  {  closeEntry(entry,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  checkIfNeedsZip64)  {  closeEntry(entry,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
819	[BUG]  [BUGGY]  if(phased  &&  checkIfNeedsZip64)  {  closeEntry(entry,  phased);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  checkIfNeedsZip64)  {  closeEntry(entry,  phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  checkIfNeedsZip64)  {  closeEntry(entry,  phased);  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
820	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry,  0,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(entry,  0,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry,  0,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
821	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry,  phase);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(entry,  phase);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry,  phase);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
822	[BUG]  [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  zip64Mode)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  zip64Mode)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64  &&  effectiveMode!=  zip64Mode)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode.close();  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
823	[BUG]  [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  zip64Mode)  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  zip64Mode)  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64  &&  effectiveMode!=  zip64Mode)  {  checkIfNeedsZip64(effectiveMode);  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
824	[BUG]  [BUGGY]  if(checkIfNeedsZip64  &&  zip64Mode!=  effectiveMode)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64  &&  zip64Mode!=  effectiveMode)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64  &&  zip64Mode!=  effectiveMode)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode.close();  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
825	[BUG]  [BUGGY]  if(checkIfNeedsZip64  &&  zip64Mode!=  effectiveMode)  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64  &&  zip64Mode!=  effectiveMode)  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64  &&  zip64Mode!=  effectiveMode)  {  checkIfNeedsZip64(effectiveMode);  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
826	[BUG]  [BUGGY]  closeCopiedEntry(entry,  actualNeedsZip64,  trueNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(entry,  actualNeedsZip64,  trueNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(entry,  actualNeedsZip64,  trueNeedsZip64);	  closeCopiedEntry(phased,    actualNeedsZip64,    trueNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
827	[BUG]  [BUGGY]  closeCopiedEntry(entry,  phased,  trueNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(entry,  phased,  trueNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(entry,  phased,  trueNeedsZip64);	  closeCopiedEntry(phased,    actualNeedsZip64,    trueNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
828	[BUG]  [BUGGY]  closeCopiedEntry(phased,  actualNeedsZip64,  trueNeedsZip64,  effectiveMode);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(phased,  actualNeedsZip64,  trueNeedsZip64,  effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(phased,  actualNeedsZip64,  trueNeedsZip64,  effectiveMode);	  closeCopiedEntry(phased,    actualNeedsZip64,    trueNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
829	[BUG]  [BUGGY]  CheckIfNeedsZip64  <  =  checkIfNeedsZip64(activeMode);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  CheckIfNeedsZip64  <  =  checkIfNeedsZip64(activeMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	CheckIfNeedsZip64  <  =  checkIfNeedsZip64(activeMode);	  if(checkIfNeedsZip64)    {    for(final    Zip64Mode    activeMode    :    activeModes)    {    checkIfNeedsZip64(activeMode);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
830	[BUG]  [BUGGY]  final  Zip64Mode  activeMode  =  getActiveZip64Mode(entry);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  activeMode  =  getActiveZip64Mode(entry);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  activeMode  =  getActiveZip64Mode(entry);	  if(checkIfNeedsZip64)    {    for(final    Zip64Mode    activeMode    :    activeModes)    {    checkIfNeedsZip64(activeMode);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
831	[BUG]  [BUGGY]  CheckIfNeedsZip64  <  =  phased  &&  checkIfNeedsZip64  <  >(entry.bytesRead))  {  checkIfNeedsZip64(activeMode);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  CheckIfNeedsZip64  <  =  phased  &&  checkIfNeedsZip64  <  >(entry.bytesRead))  {  checkIfNeedsZip64(activeMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	CheckIfNeedsZip64  <  =  phased  &&  checkIfNeedsZip64  <  >(entry.bytesRead))  {  checkIfNeedsZip64(activeMode);  }	  if(checkIfNeedsZip64)    {    for(final    Zip64Mode    activeMode    :    activeModes)    {    checkIfNeedsZip64(activeMode);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
832	[BUG]  [BUGGY]  CheckIfNeedsZip64  <  =  phased  ||  checkIfNeedsZip64  <  >(activeMode))  {  checkIfNeedsZip64(activeMode);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  CheckIfNeedsZip64  <  =  phased  ||  checkIfNeedsZip64  <  >(activeMode))  {  checkIfNeedsZip64(activeMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	CheckIfNeedsZip64  <  =  phased  ||  checkIfNeedsZip64  <  >(activeMode))  {  checkIfNeedsZip64(activeMode);  }	  if(checkIfNeedsZip64)    {    for(final    Zip64Mode    activeMode    :    activeModes)    {    checkIfNeedsZip64(activeMode);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
833	[BUG]  [BUGGY]  final  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(entry.getName());  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(entry.getName());  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(entry.getName());	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    getCopiedZip64Mode(entry.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
834	[BUG]  [BUGGY]  if(phased  &&  zip64Mode!=  getCopiedZip64Mode(entry.getName()))  {  closeEntry(entry,  phased);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  zip64Mode!=  getCopiedZip64Mode(entry.getName()))  {  closeEntry(entry,  phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  zip64Mode!=  getCopiedZip64Mode(entry.getName()))  {  closeEntry(entry,  phased);  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    getCopiedZip64Mode(entry.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
835	[BUG]  [BUGGY]  if(phased)  {  openEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.getName());  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  openEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.getName());  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  openEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.getName());  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    getCopiedZip64Mode(entry.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
836	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsClosed(phased);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsClosed(phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsClosed(phased);	  final    boolean    phased    =    checkIfNeedsChanged(phased);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
837	[BUG]  [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsChanged(phased);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsChanged(phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  final  boolean  phased  =  checkIfNeedsChanged(phased);  }	  final    boolean    phased    =    checkIfNeedsChanged(phased);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
838	[BUG]  [BUGGY]  if(phased)  {  closeEntry(activeMode,  phased);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(activeMode,  phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(activeMode,  phased);  }	  if(phased)    {    closeEntry(activeMode,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
839	[BUG]  [BUGGY]  if(phased)  {  closeEntry(activeMode,  phased);  }  else  {  CheckIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(activeMode,  phased);  }  else  {  CheckIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(activeMode,  phased);  }  else  {  CheckIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(activeMode,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
840	[BUG]  [BUGGY]  openEntry(entry,  phased,  actualNeedsZip64,  effectiveMode);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  openEntry(entry,  phased,  actualNeedsZip64,  effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	openEntry(entry,  phased,  actualNeedsZip64,  effectiveMode);	  closeEntry(entry,    phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
841	[BUG]  [BUGGY]  openZipEntry(entry,  phased,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  openZipEntry(entry,  phased,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	openZipEntry(entry,  phased,  actualNeedsZip64);	  closeEntry(entry,    phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
842	[BUG]  [BUGGY]  CloseEntry(entry,  phased,  actualNeedsZip64,  effectiveMode);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  CloseEntry(entry,  phased,  actualNeedsZip64,  effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	CloseEntry(entry,  phased,  actualNeedsZip64,  effectiveMode);	  closeEntry(entry,    phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
843	[BUG]  [BUGGY]  if(phased)  {  openEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  openEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  openEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(entry.bytesRead,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
844	[BUG]  [BUGGY]  if(phased  &&  checkIfNeedsZip64)  {  closeEntry(entry,  phased);  }  else  {  preClose();  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  checkIfNeedsZip64)  {  closeEntry(entry,  phased);  }  else  {  preClose();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  checkIfNeedsZip64)  {  closeEntry(entry,  phased);  }  else  {  preClose();  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    preClose();    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
845	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry,  0,  phased);  }  else  {  preClose();  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(entry,  0,  phased);  }  else  {  preClose();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry,  0,  phased);  }  else  {  preClose();  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    preClose();    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
846	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry);  }  else  {  preClose();  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(entry);  }  else  {  preClose();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry);  }  else  {  preClose();  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    preClose();    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
847	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  effectiveMode,  zip64Mode);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  effectiveMode,  zip64Mode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  effectiveMode,  zip64Mode);	  closeEntry(entry.bytesRead,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
848	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  effectiveMode,  Zip64Mode.NEEDED_OFFSET);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  effectiveMode,  Zip64Mode.NEEDED_OFFSET);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  effectiveMode,  Zip64Mode.NEEDED_OFFSET);	  closeEntry(entry.bytesRead,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
849	[BUG]  [BUGGY]  final  Zip64Mode  mode  =  getEffectiveZip64Mode(entry.bytesRead);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  mode  =  getEffectiveZip64Mode(entry.bytesRead);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  mode  =  getEffectiveZip64Mode(entry.bytesRead);	  closeEntry(entry.bytesRead,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
850	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(entry,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(entry,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(entry,  actualNeedsZip64);  }	  if(phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
851	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(phased,  actualNeedsZip64,  effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(phased,  actualNeedsZip64,  effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(phased,  actualNeedsZip64,  effectiveMode);  }	  if(phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
852	[BUG]  [BUGGY]  if(phased)  {  closeEntry(effectiveMode,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(effectiveMode,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(effectiveMode,  actualNeedsZip64);  }	  if(phased)    {    closeEntry(actuallyNeedsZip64,    effectiveMode);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
853	[BUG]  [BUGGY]  if(phased)  {  closeEntry(effectiveMode,  effectiveMode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(effectiveMode,  effectiveMode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(effectiveMode,  effectiveMode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(actuallyNeedsZip64,    effectiveMode);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
854	[BUG]  [BUGGY]  if(phased)  {  closeEntry(effectiveMode,  effectiveNeedsZip64);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(effectiveMode,  effectiveNeedsZip64);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(effectiveMode,  effectiveNeedsZip64);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(actuallyNeedsZip64,    effectiveMode);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
855	[BUG]  [BUGGY]  final  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(efficientMode);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(efficientMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(efficientMode);	  final    Zip64Mode    effectiveMode    =    checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
856	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  effectivelyNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  effectivelyNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(phased,  effectivelyNeedsZip64);	  final    boolean    phased    =    checkIfNeedsZip64(phased,    actuallyNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
857	[BUG]  [BUGGY]  openEntry(entry.getKey(),  entry.bytesRead,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  openEntry(entry.getKey(),  entry.bytesRead,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	openEntry(entry.getKey(),  entry.bytesRead,  actualNeedsZip64);	  openEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
858	[BUG]  [BUGGY]  openEntry(entry.getValue(),  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  openEntry(entry.getValue(),  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	openEntry(entry.getValue(),  actualNeedsZip64);	  openEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
859	[BUG]  [BUGGY]  openEntry(entry.getName(),  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  openEntry(entry.getName(),  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	openEntry(entry.getName(),  actualNeedsZip64);	  openEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
860	[BUG]  [BUGGY]  if(phased)  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  else  {  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  else  {  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  else  {  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(effectiveMode);  }	  if(phased)    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
861	[BUG]  [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  entry.bytesRead)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getByteRead();  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  entry.bytesRead)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getByteRead();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64  &&  effectiveMode!=  entry.bytesRead)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getByteRead();  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    entry.bytesRead    =    entry.getByteRead();    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
862	[BUG]  [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.DEFAULT_ENCODING)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getByteRead();  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.DEFAULT_ENCODING)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getByteRead();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.DEFAULT_ENCODING)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getByteRead();  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    entry.bytesRead    =    entry.getByteRead();    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
863	[BUG]  [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.UNKNOWN)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getByteRead();  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.UNKNOWN)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getByteRead();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.UNKNOWN)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getByteRead();  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    entry.bytesRead    =    entry.getByteRead();    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
864	[BUG]  [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  zip64Mode)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getByteRead();  }  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  zip64Mode)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getByteRead();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64  &&  effectiveMode!=  zip64Mode)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getByteRead();  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    entry.bytesRead    =    entry.getByteRead();    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
865	[BUG]  [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.DEFAULT)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getByteRead();  }  [CE]  illegal  start  of  expression  [FE]                                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.DEFAULT)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getByteRead();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.DEFAULT)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getByteRead();  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    entry.bytesRead    =    entry.getByteRead();    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
866	[BUG]  [BUGGY]  if(phased  &&  zip64Mode!=  effectiveMode)  {  closeEntry(entry,  phased);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  zip64Mode!=  effectiveMode)  {  closeEntry(entry,  phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  zip64Mode!=  effectiveMode)  {  closeEntry(entry,  phased);  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
867	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  closeCopiedEntry(activeMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(phased)  {  closeCopiedEntry(activeMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  closeCopiedEntry(activeMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  Preconditions.checkState(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
868	[BUG]  [BUGGY]  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);	  Preconditions.checkState(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
869	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  closeCopiedEntry(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(efficientMode);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(phased)  {  closeCopiedEntry(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(efficientMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  closeCopiedEntry(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(efficientMode);  }	  Preconditions.checkState(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
870	[BUG]  [BUGGY]  if(zip64Mode!=  null)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode  =  getCopiedZip64Mode(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(zip64Mode!=  null)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode  =  getCopiedZip64Mode(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(zip64Mode!=  null)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode  =  getCopiedZip64Mode(effectiveMode);  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    zip64Mode    =    getCopiedZip64Mode(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
871	[BUG]  [BUGGY]  if(zip64Mode!=  null)  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(zip64Mode!=  null)  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(zip64Mode!=  null)  {  checkIfNeedsZip64(effectiveMode);  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    zip64Mode    =    getCopiedZip64Mode(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
872	[BUG]  [BUGGY]  final  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(effectiveMode);  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(effectiveMode);	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    zip64Mode    =    getCopiedZip64Mode(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
873	[BUG]  [BUGGY]  if(zip64Mode!=  null)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(zip64Mode!=  null)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(zip64Mode!=  null)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(effectiveMode);  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    zip64Mode    =    getCopiedZip64Mode(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
874	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  effectiveMode,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  effectiveMode,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  effectiveMode,  actualNeedsZip64);	  closeEntry(entry.bytesRead,    phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
875	[BUG]  [BUGGY]  CloseEntry(entry.bytesRead,  phased,  actualNeedsZip64,  effectiveMode);  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  CloseEntry(entry.bytesRead,  phased,  actualNeedsZip64,  effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	CloseEntry(entry.bytesRead,  phased,  actualNeedsZip64,  effectiveMode);	  closeEntry(entry.bytesRead,    phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
876	[BUG]  [BUGGY]  closeEntry(entry.blocksRead,  phased,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.blocksRead,  phased,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.blocksRead,  phased,  actualNeedsZip64);	  closeEntry(entry.bytesRead,    phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
877	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  phased,  actualNeedsZip64,  effectivelyMode);  [CE]  illegal  start  of  expression  [FE]                                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  phased,  actualNeedsZip64,  effectivelyMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  phased,  actualNeedsZip64,  effectivelyMode);	  closeEntry(entry.bytesRead,    phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
878	[BUG]  [BUGGY]  if(phased  &&  zip64Mode!=  getCopiedZip64Mode())  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.blocksRead);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  zip64Mode!=  getCopiedZip64Mode())  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.blocksRead);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  zip64Mode!=  getCopiedZip64Mode())  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.blocksRead);  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    getCopiedZip64Mode(entry.blocksRead);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
879	[BUG]  [BUGGY]  final  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(entry.blocksRead);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(entry.blocksRead);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(entry.blocksRead);	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    getCopiedZip64Mode(entry.blocksRead);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
880	[BUG]  [BUGGY]  if(phased)  {  openEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.blocksRead);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  openEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.blocksRead);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  openEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.blocksRead);  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    getCopiedZip64Mode(entry.blocksRead);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
881	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  entry.phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  entry.phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry.bytesRead,  entry.phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(entry.bytesRead,    phased);    }    else    {    Zip64Mode    effectiveMode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
882	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  0,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  0,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry.bytesRead,  0,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(entry.bytesRead,    phased);    }    else    {    Zip64Mode    effectiveMode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
883	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  effectiveMode,  false);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  effectiveMode,  false);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  effectiveMode,  false);	  closeEntry(entry.bytesRead,    phased,    false);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
884	[BUG]  [BUGGY]  closeEntry(entry.blocksRead,  phased,  false);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.blocksRead,  phased,  false);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.blocksRead,  phased,  false);	  closeEntry(entry.bytesRead,    phased,    false);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
885	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  true,  false);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  true,  false);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  true,  false);	  closeEntry(entry.bytesRead,    phased,    false);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
886	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  phased,  false,  true);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  phased,  false,  true);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  phased,  false,  true);	  closeEntry(entry.bytesRead,    phased,    false);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
887	[BUG]  [BUGGY]  phased  =  closePhaseEntry(entry,  phased);  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  phased  =  closePhaseEntry(entry,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	phased  =  closePhaseEntry(entry,  phased);	  phased    =    closePhaseEntry(actuallyNeedsZip64,    phased);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
888	[BUG]  [BUGGY]  phased  =  closePhaseEntry(extendsZip64,  phased);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  phased  =  closePhaseEntry(extendsZip64,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	phased  =  closePhaseEntry(extendsZip64,  phased);	  phased    =    closePhaseEntry(actuallyNeedsZip64,    phased);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
889	[BUG]  [BUGGY]  phased  =  closePhaseEntry(step,  phased);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  phased  =  closePhaseEntry(step,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	phased  =  closePhaseEntry(step,  phased);	  phased    =    closePhaseEntry(actuallyNeedsZip64,    phased);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
890	[BUG]  [BUGGY]  if(checkIfNeedsZip64)  {  closeCopiedEntry(phased,  effectiveMode);  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64)  {  closeCopiedEntry(phased,  effectiveMode);  }  else  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64)  {  closeCopiedEntry(phased,  effectiveMode);  }  else  {  zip64Mode.close();  }	  closeCopiedEntry(phased,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
891	[BUG]  [BUGGY]  closeCopiedEntry(phased,  effectiveMode,  entry.bytesRead);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(phased,  effectiveMode,  entry.bytesRead);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(phased,  effectiveMode,  entry.bytesRead);	  closeCopiedEntry(phased,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
892	[BUG]  [BUGGY]  if(checkIfNeedsZip64)  {  closeCopiedEntry(phased,  effectiveMode);  }  else  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64)  {  closeCopiedEntry(phased,  effectiveMode);  }  else  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64)  {  closeCopiedEntry(phased,  effectiveMode);  }  else  {  throw  new  RuntimeException( " ");  }	  closeCopiedEntry(phased,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
893	[BUG]  [BUGGY]  final  boolean  phased  =  closePhaseEntry(entry,  phased);  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  closePhaseEntry(entry,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  closePhaseEntry(entry,  phased);	  if(phased)    {    closeEntry(entry,    phased);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
894	[BUG]  [BUGGY]  final  boolean  phased  =  closeCopiedEntry(actuallyNeedsZip64,  phased);  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  closeCopiedEntry(actuallyNeedsZip64,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  closeCopiedEntry(actuallyNeedsZip64,  phased);	  if(phased)    {    closeCopiedEntry(actuallyNeedsZip64,    phased);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
895	[BUG]  [BUGGY]  if(phased  ||  checkIfNeedsZip64)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  ||  checkIfNeedsZip64)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  ||  checkIfNeedsZip64)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode.close();  }	  if(checkIfNeedsZip64)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
896	[BUG]  [BUGGY]  if(phased  &&  checkIfNeedsZip64)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  checkIfNeedsZip64)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  checkIfNeedsZip64)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode.close();  }	  if(checkIfNeedsZip64)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
897	[BUG]  [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  zip64Mode)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  zip64Mode)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64  &&  effectiveMode!=  zip64Mode)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode.close();  }	  if(checkIfNeedsZip64)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
898	[BUG]  [BUGGY]  if(checkIfNeedsZip64  &&  zip64Mode!=  effectiveMode)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64  &&  zip64Mode!=  effectiveMode)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64  &&  zip64Mode!=  effectiveMode)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode.close();  }	  if(checkIfNeedsZip64)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
899	[BUG]  [BUGGY]  if(checkIfNeedsZip64  &&  zip64Mode!=  effectiveMode)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64  &&  zip64Mode!=  effectiveMode)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64  &&  zip64Mode!=  effectiveMode)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }	  if(checkIfNeedsZip64)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
900	[BUG]  [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  zip64Mode)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  zip64Mode)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64  &&  effectiveMode!=  zip64Mode)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }	  if(checkIfNeedsZip64)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
901	[BUG]  [BUGGY]  CloseEntry(entry.bytesRead,  phased);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  CloseEntry(entry.bytesRead,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	CloseEntry(entry.bytesRead,  phased);	  if(phased)    {    closeEntry(entry.bytesRead,    phased);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
902	[BUG]  [BUGGY]  if(phased  &&  zip64Mode!=  effectiveMode)  {  closeEntry(zip64Mode,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  zip64Mode!=  effectiveMode)  {  closeEntry(zip64Mode,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  zip64Mode!=  effectiveMode)  {  closeEntry(zip64Mode,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(zip64Mode,    phased);    }    else    {    Zip64Mode    effectiveMode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
903	[BUG]  [BUGGY]  if(phased)  {  closeEntry(zip64Mode,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(activeMode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(zip64Mode,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(activeMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(zip64Mode,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(activeMode);  }	  if(phased)    {    closeEntry(zip64Mode,    phased);    }    else    {    Zip64Mode    effectiveMode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
904	[BUG]  [BUGGY]  if(phased)  {  closeEntry(zip64Mode,  phased);  }  else  {  Zip64Mode  efficientMode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(zip64Mode,  phased);  }  else  {  Zip64Mode  efficientMode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(zip64Mode,  phased);  }  else  {  Zip64Mode  efficientMode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(zip64Mode,    phased);    }    else    {    Zip64Mode    effectiveMode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
905	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode.close();  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
906	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.getValue());  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.getValue());  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.getValue());  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
907	[BUG]  [BUGGY]  if(phased)  {  checkIfNeedsZip64(efficientMode);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  checkIfNeedsZip64(efficientMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  checkIfNeedsZip64(efficientMode);  }	  if(!phased)    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
908	[BUG]  [BUGGY]  if(phased)  {  checkIfNeedsZip64(effectiveMode,  zip64Mode);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  checkIfNeedsZip64(effectiveMode,  zip64Mode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  checkIfNeedsZip64(effectiveMode,  zip64Mode);  }	  if(!phased)    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
909	[BUG]  [BUGGY]  closeEntry(entry.getKey(),  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.getKey(),  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.getKey(),  actualNeedsZip64);	  closeEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
910	[BUG]  [BUGGY]  closeEntry(entry.blocksRead,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.blocksRead,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.blocksRead,  actualNeedsZip64);	  closeEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
911	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  actualNeedsZip64,  efectivMode);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  actualNeedsZip64,  efectivMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  actualNeedsZip64,  efectivMode);	  closeEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
912	[BUG]  [BUGGY]  if(phased  ||  actualNeedsZip64  ==  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  ||  actualNeedsZip64  ==  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  ||  actualNeedsZip64  ==  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }	  if(actualNeedsZip64    ==    phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualMode);    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
913	[BUG]  [BUGGY]  if(phased  &&  actualNeedsZip64  ==  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  actualNeedsZip64  ==  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  actualNeedsZip64  ==  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }	  if(actualNeedsZip64    ==    phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualMode);    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
914	[BUG]  [BUGGY]  if(phased  ||  actualNeedsZip64  <  =  0)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  ||  actualNeedsZip64  <  =  0)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  ||  actualNeedsZip64  <  =  0)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }	  if(actualNeedsZip64    ==    phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualMode);    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
915	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  CheckIfNeedsZip64(actualMode);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  CheckIfNeedsZip64(actualMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  CheckIfNeedsZip64(actualMode);  }	  if(actualNeedsZip64    ==    phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualMode);    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
916	[BUG]  [BUGGY]  if(phased  ||  actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  ||  actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  ||  actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }	  if(actualNeedsZip64!=    phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
917	[BUG]  [BUGGY]  if(phased  ||  actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  ||  actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  ||  actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }	  if(actualNeedsZip64!=    phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
918	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  phased,  trueNeedsZip64,  effectivelyMode);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.bytesRead,  phased,  trueNeedsZip64,  effectivelyMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  phased,  trueNeedsZip64,  effectivelyMode);	  closeEntry(entry.bytesRead,    phased,    trueNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
919	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(new  Zip64Mode(effectiveMode,  entry.bytesRead));  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(new  Zip64Mode(effectiveMode,  entry.bytesRead));  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(new  Zip64Mode(effectiveMode,  entry.bytesRead));  }	  if(phased)    {    closeCopiedEntry(new    Zip64Mode(effectiveMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
920	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(new  Zip64Mode(effectiveMode,  zip64Mode));  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(new  Zip64Mode(effectiveMode,  zip64Mode));  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(new  Zip64Mode(effectiveMode,  zip64Mode));  }	  if(phased)    {    closeCopiedEntry(new    Zip64Mode(effectiveMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
921	[BUG]  [BUGGY]  final  boolean  phased  =  closeCopiedEntry(new  Zip64Mode(effectiveMode,  phased));  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  closeCopiedEntry(new  Zip64Mode(effectiveMode,  phased));  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  closeCopiedEntry(new  Zip64Mode(effectiveMode,  phased));	  if(phased)    {    closeCopiedEntry(new    Zip64Mode(effectiveMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
922	[BUG]  [BUGGY]  phased  =  closeCopiedEntry(new  Zip64Mode(effectiveMode,  phased));  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  phased  =  closeCopiedEntry(new  Zip64Mode(effectiveMode,  phased));  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	phased  =  closeCopiedEntry(new  Zip64Mode(effectiveMode,  phased));	  if(phased)    {    closeCopiedEntry(new    Zip64Mode(effectiveMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
923	[BUG]  [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.DEFAULT_ENCODING)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.DEFAULT_ENCODING)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.DEFAULT_ENCODING)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }	  if(checkIfNeedsZip64)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
924	[BUG]  [BUGGY]  if(phased  ||  checkIfNeedsZip64)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  ||  checkIfNeedsZip64)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  ||  checkIfNeedsZip64)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }	  if(checkIfNeedsZip64)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
925	[BUG]  [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode.isSupported())  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode.isSupported())  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64  &&  effectiveMode.isSupported())  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }	  if(checkIfNeedsZip64)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
926	[BUG]  [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.DEFAULT)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.DEFAULT)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.DEFAULT)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }	  if(checkIfNeedsZip64)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
927	[BUG]  [BUGGY]  if(phased  &&  zip64Mode!=  getCopiedZip64Mode())  {  closeEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  zip64Mode!=  getCopiedZip64Mode())  {  closeEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  zip64Mode!=  getCopiedZip64Mode())  {  closeEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }	  if(phased)    {    closeEntry(entry.bytesRead,    phased);    }    else    {    zip64Mode    =    getCopiedZip64Mode(entry.bytesRead);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
928	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  final  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  final  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry.bytesRead,  final  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }	  if(phased)    {    closeEntry(entry.bytesRead,    phased);    }    else    {    zip64Mode    =    getCopiedZip64Mode(entry.bytesRead);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
929	[BUG]  [BUGGY]  final  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(entry.bytesRead);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(entry.bytesRead);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  effectiveMode  =  getCopiedZip64Mode(entry.bytesRead);	  if(phased)    {    closeEntry(entry.bytesRead,    phased);    }    else    {    zip64Mode    =    getCopiedZip64Mode(entry.bytesRead);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
930	[BUG]  [BUGGY]  final  Zip64Mode  effectiveMode  =  getPaddedZip64Mode(entry.bytesRead);  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  effectiveMode  =  getPaddedZip64Mode(entry.bytesRead);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  effectiveMode  =  getPaddedZip64Mode(entry.bytesRead);	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    getPaddedZip64Mode(entry.bytesRead);    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
931	[BUG]  [BUGGY]  if(phased  &&  zip64Mode!=  getPaddedZip64Mode())  {  closeEntry(entry,  phased);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  zip64Mode!=  getPaddedZip64Mode())  {  closeEntry(entry,  phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  zip64Mode!=  getPaddedZip64Mode())  {  closeEntry(entry,  phased);  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    getPaddedZip64Mode(entry.bytesRead);    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
932	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(efficientMode,  phased);  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(efficientMode,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(efficientMode,  phased);	  final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64,    phased);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
933	[BUG]  [BUGGY]  lastModified  =  phased?  checkIfNeedsZip64(phased):  checkIfNeedsZip64(actuallyNeedsZip64);  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  lastModified  =  phased?  checkIfNeedsZip64(phased):  checkIfNeedsZip64(actuallyNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	lastModified  =  phased?  checkIfNeedsZip64(phased):  checkIfNeedsZip64(actuallyNeedsZip64);	  if(phased)    {    final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
934	[BUG]  [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(phased,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(phased,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(phased,  actualNeedsZip64);  }	  if(phased)    {    final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
935	[BUG]  [BUGGY]  Phased  =  checkIfNeedsZip64(phased);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Phased  =  checkIfNeedsZip64(phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Phased  =  checkIfNeedsZip64(phased);	  if(phased)    {    final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
936	[BUG]  [BUGGY]  CloseCopiedEntry(entry.bytesRead,  actualNeedsZip64,  effectiveMode);  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  CloseCopiedEntry(entry.bytesRead,  actualNeedsZip64,  effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	CloseCopiedEntry(entry.bytesRead,  actualNeedsZip64,  effectiveMode);	  closeCopiedEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
937	[BUG]  [BUGGY]  closeCopiedEntry(entry.bytesRead,  actualNeedsZip64,  efectivMode);  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(entry.bytesRead,  actualNeedsZip64,  efectivMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(entry.bytesRead,  actualNeedsZip64,  efectivMode);	  closeCopiedEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
938	[BUG]  [BUGGY]  closeCopiedEntry(entry.bytesRead,  actualNeedsZip64,  activeMode);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(entry.bytesRead,  actualNeedsZip64,  activeMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(entry.bytesRead,  actualNeedsZip64,  activeMode);	  closeCopiedEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
939	[BUG]  [BUGGY]  closeCopiedEntry(entry.bytesRead,  true);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(entry.bytesRead,  true);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(entry.bytesRead,  true);	  closeCopiedEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
940	[BUG]  [BUGGY]  stopCopiedEntry(phased,  actualNeedsZip64,  checkIfNeedsZip64(actualMode));  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  stopCopiedEntry(phased,  actualNeedsZip64,  checkIfNeedsZip64(actualMode));  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	stopCopiedEntry(phased,  actualNeedsZip64,  checkIfNeedsZip64(actualMode));	  stopCopiedEntry(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
941	[BUG]  [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.DEFAULT_ENCODING)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead  =  zip64Mode;  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.DEFAULT_ENCODING)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead  =  zip64Mode;  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.DEFAULT_ENCODING)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead  =  zip64Mode;  }	  if(checkIfNeedsZip64)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    entry.bytesRead    =    zip64Mode;    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
942	[BUG]  [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode.isSupported())  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead  =  zip64Mode;  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode.isSupported())  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead  =  zip64Mode;  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64  &&  effectiveMode.isSupported())  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead  =  zip64Mode;  }	  if(checkIfNeedsZip64)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    entry.bytesRead    =    zip64Mode;    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
943	[BUG]  [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.BASE)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead  =  zip64Mode;  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.BASE)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead  =  zip64Mode;  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.BASE)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead  =  zip64Mode;  }	  if(checkIfNeedsZip64)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    entry.bytesRead    =    zip64Mode;    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
944	[BUG]  [BUGGY]  if(checkIfNeedsZip64)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  zip64Mode);  }  else  {  entry.bytesRead  =  zip64Mode;  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  zip64Mode);  }  else  {  entry.bytesRead  =  zip64Mode;  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  zip64Mode);  }  else  {  entry.bytesRead  =  zip64Mode;  }	  if(checkIfNeedsZip64)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    entry.bytesRead    =    zip64Mode;    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
945	[BUG]  [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.DEFAULT)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead  =  zip64Mode;  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.DEFAULT)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead  =  zip64Mode;  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.DEFAULT)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead  =  zip64Mode;  }	  if(checkIfNeedsZip64)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    entry.bytesRead    =    zip64Mode;    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
946	[BUG]  [BUGGY]  if(phased  ||  actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  zip64Mode  =  getCopiedZip64Mode(actualMode);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  ||  actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  zip64Mode  =  getCopiedZip64Mode(actualMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  ||  actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  zip64Mode  =  getCopiedZip64Mode(actualMode);  }	  if(actualNeedsZip64!=    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    else    {    zip64Mode    =    getCopiedZip64Mode(actualMode);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
947	[BUG]  [BUGGY]  if(phased  &&  actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  zip64Mode  =  getCopiedZip64Mode(actualMode);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  zip64Mode  =  getCopiedZip64Mode(actualMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  zip64Mode  =  getCopiedZip64Mode(actualMode);  }	  if(actualNeedsZip64!=    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    else    {    zip64Mode    =    getCopiedZip64Mode(actualMode);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
948	[BUG]  [BUGGY]  zip64Mode  =  getCopiedZip64Mode(actualMode);  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  zip64Mode  =  getCopiedZip64Mode(actualMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	zip64Mode  =  getCopiedZip64Mode(actualMode);	  if(actualNeedsZip64!=    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    else    {    zip64Mode    =    getCopiedZip64Mode(actualMode);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
949	[BUG]  [BUGGY]  if(phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  Zip64Mode  currentMode  =  getCopiedZip64Mode(actualMode);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  Zip64Mode  currentMode  =  getCopiedZip64Mode(actualMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  Zip64Mode  currentMode  =  getCopiedZip64Mode(actualMode);  }	  if(actualNeedsZip64!=    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    else    {    zip64Mode    =    getCopiedZip64Mode(actualMode);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
950	[BUG]  [BUGGY]  if(phased  ||  actualNeedsZip64  ==  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  ||  actualNeedsZip64  ==  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  ||  actualNeedsZip64  ==  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }	  if(actualNeedsZip64    ==    phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
951	[BUG]  [BUGGY]  int  phased)  {  closeEntry(actuallyNeedsZip64,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  int  phased)  {  closeEntry(actuallyNeedsZip64,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	int  phased)  {  closeEntry(actuallyNeedsZip64,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  final    phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
952	[BUG]  [BUGGY]  final  boolean  phased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  final    phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
953	[BUG]  [BUGGY]  int  phased)  {  closeEntry(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  int  phased)  {  closeEntry(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	int  phased)  {  closeEntry(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  final    phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
954	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  actualNeedsZip64,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  actualNeedsZip64,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(phased,  actualNeedsZip64,  actualNeedsZip64);	  final    boolean    phased    =    checkIfNeedsZip64(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
955	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  actualNeedsZip64,  actualNeedsMode);  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  actualNeedsZip64,  actualNeedsMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(phased,  actualNeedsZip64,  actualNeedsMode);	  final    boolean    phased    =    checkIfNeedsZip64(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
956	[BUG]  [BUGGY]  stopCopiedEntry(entry.bytesRead,  entry.phased);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  stopCopiedEntry(entry.bytesRead,  entry.phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	stopCopiedEntry(entry.bytesRead,  entry.phased);	  if(phased)    {    closeEntry(entry.bytesRead,    entry.phased);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
957	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  entry.phase);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  entry.phase);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry.bytesRead,  entry.phase);  }	  if(phased)    {    closeEntry(entry.bytesRead,    entry.phased);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
958	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry,  entry.bytesRead,  entry.phased);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(entry,  entry.bytesRead,  entry.phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry,  entry.bytesRead,  entry.phased);  }	  if(phased)    {    closeEntry(entry.bytesRead,    entry.phased);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
959	[BUG]  [BUGGY]  final  boolean  phased  =  getIfNeedsZip64(actualMode);  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  getIfNeedsZip64(actualMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  getIfNeedsZip64(actualMode);	  final    boolean    phased    =    checkIfNeedsZip64(actualMode);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
960	[BUG]  [BUGGY]  CloseEntry(entry.bytesRead,  entry.version,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  CloseEntry(entry.bytesRead,  entry.version,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	CloseEntry(entry.bytesRead,  entry.version,  actualNeedsZip64);	  CloseEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
961	[BUG]  [BUGGY]  CloseEntry(entry.bytesRead,  actualNeedsZip64,  efectivMode);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  CloseEntry(entry.bytesRead,  actualNeedsZip64,  efectivMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	CloseEntry(entry.bytesRead,  actualNeedsZip64,  efectivMode);	  CloseEntry(entry.bytesRead,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
962	[BUG]  [BUGGY]  closeEntry(entry,  phased,  effectiveMode,  actuallyNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry,  phased,  effectiveMode,  actuallyNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry,  phased,  effectiveMode,  actuallyNeedsZip64);	  closeEntry(entry.bytesRead,    phased,    actuallyNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
963	[BUG]  [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.DEFAULT_ENCODING)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode  =  new  Zip64Mode();  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.DEFAULT_ENCODING)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode  =  new  Zip64Mode();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.DEFAULT_ENCODING)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode  =  new  Zip64Mode();  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    zip64Mode    =    new    Zip64Mode();    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
964	[BUG]  [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  zip64Mode)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode  =  new  Zip64Mode();  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  zip64Mode)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode  =  new  Zip64Mode();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64  &&  effectiveMode!=  zip64Mode)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode  =  new  Zip64Mode();  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    zip64Mode    =    new    Zip64Mode();    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
965	[BUG]  [BUGGY]  if(checkIfNeedsZip64)  {  checkIfNeedsZip64(efficientMode);  }  else  {  zip64Mode  =  new  Zip64Mode();  }  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64)  {  checkIfNeedsZip64(efficientMode);  }  else  {  zip64Mode  =  new  Zip64Mode();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64)  {  checkIfNeedsZip64(efficientMode);  }  else  {  zip64Mode  =  new  Zip64Mode();  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    zip64Mode    =    new    Zip64Mode();    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
966	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsFinally(phased);  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsFinally(phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsFinally(phased);	  final    boolean    phased    =    checkIfNeedsPaint(phased);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
967	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsCircuit(phased);  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsCircuit(phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsCircuit(phased);	  final    boolean    phased    =    checkIfNeedsPaint(phased);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
968	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsClose(phased);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsClose(phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsClose(phased);	  final    boolean    phased    =    checkIfNeedsPaint(phased);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
969	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  entry.bytesRead));  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  entry.bytesRead));  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  entry.bytesRead));  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
970	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  zip64Mode));  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  zip64Mode));  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  zip64Mode));  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
971	[BUG]  [BUGGY]  final  boolean  phased  =  closePhase(new  Zip64Mode(effectiveMode,  phased));  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  closePhase(new  Zip64Mode(effectiveMode,  phased));  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  closePhase(new  Zip64Mode(effectiveMode,  phased));	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
972	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  getPhase()));  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  getPhase()));  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  getPhase()));  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
973	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  zip64Mode));  }  else  {  zip64Mode  =  getPaddedZip64Mode(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  zip64Mode));  }  else  {  zip64Mode  =  getPaddedZip64Mode(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  zip64Mode));  }  else  {  zip64Mode  =  getPaddedZip64Mode(effectiveMode);  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    zip64Mode    =    getPaddedZip64Mode(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
974	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  0,  phased));  }  else  {  zip64Mode  =  getPaddedZip64Mode(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  0,  phased));  }  else  {  zip64Mode  =  getPaddedZip64Mode(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  0,  phased));  }  else  {  zip64Mode  =  getPaddedZip64Mode(effectiveMode);  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    zip64Mode    =    getPaddedZip64Mode(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
975	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  zip64Mode),  phased);  }  else  {  zip64Mode  =  getPaddedZip64Mode(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  zip64Mode),  phased);  }  else  {  zip64Mode  =  getPaddedZip64Mode(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  zip64Mode),  phased);  }  else  {  zip64Mode  =  getPaddedZip64Mode(effectiveMode);  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    zip64Mode    =    getPaddedZip64Mode(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
976	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased  +  1));  }  else  {  zip64Mode  =  getPaddedZip64Mode(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased  +  1));  }  else  {  zip64Mode  =  getPaddedZip64Mode(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased  +  1));  }  else  {  zip64Mode  =  getPaddedZip64Mode(effectiveMode);  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    zip64Mode    =    getPaddedZip64Mode(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
977	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  trueNeedsZip64,  trueNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  trueNeedsZip64,  trueNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(phased,  trueNeedsZip64,  trueNeedsZip64);	  final    boolean    phased    =    checkIfNeedsZip64(phased,    trueNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
978	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  trueNeedsZip64,  falseNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  trueNeedsZip64,  falseNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(phased,  trueNeedsZip64,  falseNeedsZip64);	  final    boolean    phased    =    checkIfNeedsZip64(phased,    trueNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
979	[BUG]  [BUGGY]  if(phased  ||  actualNeedsZip64  ==  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  ||  actualNeedsZip64  ==  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  ||  actualNeedsZip64  ==  phased)  {  closeEntry(phased,  actualNeedsZip64);  }	  if(actualNeedsZip64    ==    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
980	[BUG]  [BUGGY]  CloseEntry(phased,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  CloseEntry(phased,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	CloseEntry(phased,  actualNeedsZip64);	  if(actualNeedsZip64    ==    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
981	[BUG]  [BUGGY]  final  boolean  phased  =  closePhasedEntry(phased,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  closePhasedEntry(phased,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  closePhasedEntry(phased,  actualNeedsZip64);	  if(actualNeedsZip64    ==    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
982	[BUG]  [BUGGY]  final  boolean  phased  =  closeCopiedEntry(new  Zip64Mode(activeMode,  phased));  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  closeCopiedEntry(new  Zip64Mode(activeMode,  phased));  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  closeCopiedEntry(new  Zip64Mode(activeMode,  phased));	  if(phased)    {    closeCopiedEntry(new    Zip64Mode(activeMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
983	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(new  Zip64Mode(activeMode,  zip64Mode));  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(new  Zip64Mode(activeMode,  zip64Mode));  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(new  Zip64Mode(activeMode,  zip64Mode));  }	  if(phased)    {    closeCopiedEntry(new    Zip64Mode(activeMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
984	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(new  Zip64Mode(activeMode,  activeMode));  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(new  Zip64Mode(activeMode,  activeMode));  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(new  Zip64Mode(activeMode,  activeMode));  }	  if(phased)    {    closeCopiedEntry(new    Zip64Mode(activeMode,    phased));    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
985	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.bytesRead);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.bytesRead);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.bytesRead);  }	  if(phased)    {    closeCopiedEntry(entry,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
986	[BUG]  [BUGGY]  if(phased  &&  zip64Mode!=  effectiveMode)  {  closeCopiedEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  zip64Mode!=  effectiveMode)  {  closeCopiedEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  zip64Mode!=  effectiveMode)  {  closeCopiedEntry(entry,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeCopiedEntry(entry,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
987	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  entry.bytesRead));  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  entry.bytesRead));  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  entry.bytesRead));  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
988	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  zip64Mode));  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  zip64Mode));  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  zip64Mode));  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
989	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  zip64Mode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  zip64Mode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  zip64Mode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
990	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  zipEncoding);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  zipEncoding);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  zipEncoding);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
991	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(zip64Mode,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(efficientMode);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(zip64Mode,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(efficientMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(zip64Mode,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(efficientMode);  }	  if(phased)    {    closeCopiedEntry(zip64Mode,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
992	[BUG]  [BUGGY]  finallyNeedsZip64  =  checkIfNeedsZip64(finallyNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyNeedsZip64  =  checkIfNeedsZip64(finallyNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyNeedsZip64  =  checkIfNeedsZip64(finallyNeedsZip64);	  finallyNeedsZip64    =    checkIfNeedsZip64(percentageNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
993	[BUG]  [BUGGY]  finallyNeedsZip64  =  checkIfNeedsZip64(percentageNeedsZip64,  effectiveMode);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  finallyNeedsZip64  =  checkIfNeedsZip64(percentageNeedsZip64,  effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyNeedsZip64  =  checkIfNeedsZip64(percentageNeedsZip64,  effectiveMode);	  finallyNeedsZip64    =    checkIfNeedsZip64(percentageNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
994	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  entry.bytesRead));  }  else  {  preClose();  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  entry.bytesRead));  }  else  {  preClose();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  entry.bytesRead));  }  else  {  preClose();  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    preClose();    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
995	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  checkIfNeedsZip64));  }  else  {  preClose();  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  checkIfNeedsZip64));  }  else  {  preClose();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  checkIfNeedsZip64));  }  else  {  preClose();  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    preClose();    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
996	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  zip64Mode));  }  else  {  preClose();  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  zip64Mode));  }  else  {  preClose();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  zip64Mode));  }  else  {  preClose();  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    preClose();    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
997	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  entry.bytesRead);  }  else  {  preClose();  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  entry.bytesRead);  }  else  {  preClose();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  entry.bytesRead);  }  else  {  preClose();  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    preClose();    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
998	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  false));  }  else  {  preClose();  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  false));  }  else  {  preClose();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  false));  }  else  {  preClose();  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    preClose();    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
999	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  zipEncoding);  }  else  {  preClose();  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  zipEncoding);  }  else  {  preClose();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  zipEncoding);  }  else  {  preClose();  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    preClose();    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
1000	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  final  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  final  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry.bytesRead,  final  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(entry.bytesRead,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
1001	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  entry.phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  entry.phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry.bytesRead,  entry.phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(entry.bytesRead,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
1002	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  Phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  Phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry.bytesRead,  Phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(entry.bytesRead,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
1003	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  checkIfNeedsZip64(efficientMode);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  checkIfNeedsZip64(efficientMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  checkIfNeedsZip64(efficientMode);  }	  if(phased)    {    closeEntry(entry.bytesRead,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
1004	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  0,  phased));  }  else  {  entry.bytesRead  =  zip64Mode;  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  0,  phased));  }  else  {  entry.bytesRead  =  zip64Mode;  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  0,  phased));  }  else  {  entry.bytesRead  =  zip64Mode;  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    entry.bytesRead    =    zip64Mode;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
1005	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  zip64Mode));  }  else  {  entry.bytesRead  =  phased;  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  zip64Mode));  }  else  {  entry.bytesRead  =  phased;  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  zip64Mode));  }  else  {  entry.bytesRead  =  phased;  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    entry.bytesRead    =    zip64Mode;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
1006	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  zip64Mode);  }  else  {  entry.bytesRead  =  zip64Mode;  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  zip64Mode);  }  else  {  entry.bytesRead  =  zip64Mode;  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  zip64Mode);  }  else  {  entry.bytesRead  =  zip64Mode;  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    entry.bytesRead    =    zip64Mode;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
1007	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  entry.bytesRead);  }  else  {  entry.bytesRead  =  zip64Mode;  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  entry.bytesRead);  }  else  {  entry.bytesRead  =  zip64Mode;  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  entry.bytesRead);  }  else  {  entry.bytesRead  =  zip64Mode;  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    entry.bytesRead    =    zip64Mode;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
1008	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  false));  }  else  {  entry.bytesRead  =  zip64Mode;  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  false));  }  else  {  entry.bytesRead  =  zip64Mode;  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  false));  }  else  {  entry.bytesRead  =  zip64Mode;  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    entry.bytesRead    =    zip64Mode;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
1009	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  true));  }  else  {  entry.bytesRead  =  zip64Mode;  }  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  true));  }  else  {  entry.bytesRead  =  zip64Mode;  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  true));  }  else  {  entry.bytesRead  =  zip64Mode;  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    entry.bytesRead    =    zip64Mode;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
1010	[BUG]  [BUGGY]  if(phased)  {  final  boolean  phased  =  getIfNeedsZip64(phased);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  final  boolean  phased  =  getIfNeedsZip64(phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  final  boolean  phased  =  getIfNeedsZip64(phased);  }	  final    boolean    phased    =    getIfNeedsZip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
1011	[BUG]  [BUGGY]  if(phased  &&  zip64Mode!=  getCopiedZip64Mode())  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  zip64Mode!=  getCopiedZip64Mode())  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  zip64Mode!=  getCopiedZip64Mode())  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    getCopiedZip64Mode(entry.bytesRead);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
1012	[BUG]  [BUGGY]  if(phased  &&  zip64Mode!=  getCopiedZip64Mode())  {  closeEntry(entry,  phased);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  zip64Mode!=  getCopiedZip64Mode())  {  closeEntry(entry,  phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  zip64Mode!=  getCopiedZip64Mode())  {  closeEntry(entry,  phased);  }	  if(phased)    {    closeEntry(entry,    phased);    }    else    {    zip64Mode    =    getCopiedZip64Mode(entry.bytesRead);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
1013	[BUG]  [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(phased,  false);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(phased,  false);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(phased,  false);  }	  final    boolean    phased    =    checkIfNeedsZip64(phased,    false);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
1014	[BUG]  [BUGGY]  closeEntry(entry,  effectiveMode);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry,  effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry,  effectiveMode);	  closeEntry(entry,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
1015	[BUG]  [BUGGY]  closeEntry(entry,  trueNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry,  trueNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry,  trueNeedsZip64);	  closeEntry(entry,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
1016	[BUG]  [BUGGY]  openEntry(entry,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  openEntry(entry,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	openEntry(entry,  actualNeedsZip64);	  closeEntry(entry,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
1017	[BUG]  [BUGGY]  stopCopiedEntry(step64,  phased);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  stopCopiedEntry(step64,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	stopCopiedEntry(step64,  phased);	  stopCopiedEntry(actuallyNeedsZip64,    phased);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
1018	[BUG]  [BUGGY]  closeEntry(entry,  effectiveMode,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry,  effectiveMode,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry,  effectiveMode,  actualNeedsZip64);	  closeEntry(phased,    actualNeedsZip64,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
1019	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(entry.bytesRead,  0,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(entry.bytesRead,  0,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(entry.bytesRead,  0,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeCopiedEntry(entry.bytesRead,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
1020	[BUG]  [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(efficientMode,  phased));  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(efficientMode,  phased));  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  effectiveMode  =  new  Zip64Mode(efficientMode,  phased));	  final    Zip64Mode    effectiveMode    =    new    Zip64Mode(effectiveMode,    phased));    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
1021	[BUG]  [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(effectiveMode,  mode));  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(effectiveMode,  mode));  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  effectiveMode  =  new  Zip64Mode(effectiveMode,  mode));	  final    Zip64Mode    effectiveMode    =    new    Zip64Mode(effectiveMode,    phased));    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
1022	[BUG]  [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(effectiveMode,  zipEncoding));  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(effectiveMode,  zipEncoding));  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  effectiveMode  =  new  Zip64Mode(effectiveMode,  zipEncoding));	  final    Zip64Mode    effectiveMode    =    new    Zip64Mode(effectiveMode,    phased));    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
1023	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(actuallyNeedsZip64);  }  else  {  preClose();  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  Preconditions.checkState(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(actuallyNeedsZip64);  }  else  {  preClose();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(actuallyNeedsZip64);  }  else  {  preClose();  }	  if(phased)    {    final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    }    else    {    preClose();    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
1024	[BUG]  [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(efficientMode);  }  else  {  preClose();  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(efficientMode);  }  else  {  preClose();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(efficientMode);  }  else  {  preClose();  }	  if(phased)    {    final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    }    else    {    preClose();    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
1025	[BUG]  [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(activeMode);  }  else  {  preClose();  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(activeMode);  }  else  {  preClose();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(activeMode);  }  else  {  preClose();  }	  if(phased)    {    final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    }    else    {    preClose();    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
1026	[BUG]  [BUGGY]  closeCopiedEntry(entry,  effectiveMode,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(entry,  effectiveMode,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(entry,  effectiveMode,  actualNeedsZip64);	  closeCopiedEntry(phased,    actualNeedsZip64,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
1027	[BUG]  [BUGGY]  closeCopiedEntry(entry.bytesRead,  effectiveMode,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(entry.bytesRead,  effectiveMode,  actualNeedsZip64);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(entry.bytesRead,  effectiveMode,  actualNeedsZip64);	  closeCopiedEntry(phased,    actualNeedsZip64,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
1028	[BUG]  [BUGGY]  if(checkIfNeedsZip64(effectiveMode))  {  closeCopiedEntry(phased,  actualNeedsZip64,  effectiveMode);  }  else  {  entry.bytesRead  =  zip64Mode;  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64(effectiveMode))  {  closeCopiedEntry(phased,  actualNeedsZip64,  effectiveMode);  }  else  {  entry.bytesRead  =  zip64Mode;  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64(effectiveMode))  {  closeCopiedEntry(phased,  actualNeedsZip64,  effectiveMode);  }  else  {  entry.bytesRead  =  zip64Mode;  }	  closeCopiedEntry(phased,    actualNeedsZip64,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
1029	[BUG]  [BUGGY]  final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(actualNeedsZip64,  effectiveMode);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(actualNeedsZip64,  effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(actualNeedsZip64,  effectiveMode);	  final    boolean    actualNeedsZip64    =    checkIfNeedsZip64(actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
1030	[BUG]  [BUGGY]  closeCopiedEntry(entry.bytesRead,  phased,  true);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(entry.bytesRead,  phased,  true);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(entry.bytesRead,  phased,  true);	  closeCopiedEntry(entry.bytesRead,    phased);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
1031	[BUG]  [BUGGY]  if(phased)  {  closeEntry(zip64Mode,  phased);  }  else  {  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(zip64Mode,  phased);  }  else  {  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(zip64Mode,  phased);  }  else  {  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(effectiveMode);  }	  if(phased)    {    closeEntry(zip64Mode,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
1032	[BUG]  [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(effectiveMode,  zipEncoding);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(effectiveMode,  zipEncoding);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  effectiveMode  =  new  Zip64Mode(effectiveMode,  zipEncoding);	  final    Zip64Mode    effectiveMode    =    new    Zip64Mode(effectiveMode,    phased);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
1033	[BUG]  [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(effectiveMode,  mode);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(effectiveMode,  mode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  effectiveMode  =  new  Zip64Mode(effectiveMode,  mode);	  final    Zip64Mode    effectiveMode    =    new    Zip64Mode(effectiveMode,    phased);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
1034	[BUG]  [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(efficientMode,  phased);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(efficientMode,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  effectiveMode  =  new  Zip64Mode(efficientMode,  phased);	  final    Zip64Mode    effectiveMode    =    new    Zip64Mode(effectiveMode,    phased);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
1035	[BUG]  [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.DEFAULT_ENCODING)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getSize();  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.DEFAULT_ENCODING)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getSize();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.DEFAULT_ENCODING)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getSize();  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    entry.bytesRead    =    entry.getSize();    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
1036	[BUG]  [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.UNKNOWN)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getSize();  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.UNKNOWN)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getSize();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.UNKNOWN)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getSize();  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    entry.bytesRead    =    entry.getSize();    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
1037	[BUG]  [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  entry.bytesRead)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getSize();  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  entry.bytesRead)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getSize();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64  &&  effectiveMode!=  entry.bytesRead)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getSize();  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    entry.bytesRead    =    entry.getSize();    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
1038	[BUG]  [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.DEFAULT)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getSize();  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.DEFAULT)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getSize();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.DEFAULT)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getSize();  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    entry.bytesRead    =    entry.getSize();    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
1039	[BUG]  [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  zip64Mode)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getSize();  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  zip64Mode)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getSize();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64  &&  effectiveMode!=  zip64Mode)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getSize();  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    entry.bytesRead    =    entry.getSize();    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
1040	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(entry,  0,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(entry,  0,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(entry,  0,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeCopiedEntry(entry,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
1041	[BUG]  [BUGGY]  if(phased!=  actualNeedsZip64)  {  closeEntry(phased,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased!=  actualNeedsZip64)  {  closeEntry(phased,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased!=  actualNeedsZip64)  {  closeEntry(phased,  actualNeedsZip64);  }	  if(actualNeedsZip64!=    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
1042	[BUG]  [BUGGY]  if(phased  >>  actualNeedsZip64)  {  closeEntry(phased,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  >>  actualNeedsZip64)  {  closeEntry(phased,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  >>  actualNeedsZip64)  {  closeEntry(phased,  actualNeedsZip64);  }	  if(actualNeedsZip64!=    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
1043	[BUG]  [BUGGY]  if(phased  >=  actualNeedsZip64)  {  closeEntry(phased,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  >=  actualNeedsZip64)  {  closeEntry(phased,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  >=  actualNeedsZip64)  {  closeEntry(phased,  actualNeedsZip64);  }	  if(actualNeedsZip64!=    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
1044	[BUG]  [BUGGY]  if(phased  ==  actualNeedsZip64)  {  closeEntry(phased,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  ==  actualNeedsZip64)  {  closeEntry(phased,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  ==  actualNeedsZip64)  {  closeEntry(phased,  actualNeedsZip64);  }	  if(actualNeedsZip64!=    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
1045	[BUG]  [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(currentMode);  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(currentMode);  }  else  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(currentMode);  }  else  {  zip64Mode.close();  }	  if(phased)    {    final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
1046	[BUG]  [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(partition);  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(partition);  }  else  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(partition);  }  else  {  zip64Mode.close();  }	  if(phased)    {    final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
1047	[BUG]  [BUGGY]  if(phased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  code);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  code);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  code);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(Zip64Mode.DEFAULT_ENCODING,    zip64Mode);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
1048	[BUG]  [BUGGY]  final  boolean  phased  =  checkPasedZip64(phased,  zip64Mode);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkPasedZip64(phased,  zip64Mode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkPasedZip64(phased,  zip64Mode);	  final    boolean    phased    =    checkPasedZip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
1049	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  zip64Mode));  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  zip64Mode));  }  else  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  zip64Mode));  }  else  {  zip64Mode.close();  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
1050	[BUG]  [BUGGY]  if(phased  &&  zip64Mode!=  effectiveMode)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  zip64Mode!=  effectiveMode)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  zip64Mode!=  effectiveMode)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode.close();  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
1051	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  0,  phased));  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  0,  phased));  }  else  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  0,  phased));  }  else  {  zip64Mode.close();  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
1052	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  entry.bytesRead));  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  entry.bytesRead));  }  else  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  entry.bytesRead));  }  else  {  zip64Mode.close();  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
1053	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  zip64Mode.clone());  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  zip64Mode.clone());  }  else  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  zip64Mode.clone());  }  else  {  zip64Mode.close();  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
1054	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  false));  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  false));  }  else  {  zip64Mode.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  false));  }  else  {  zip64Mode.close();  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    zip64Mode.close();    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
1055	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(effectiveMode,  0,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(effectiveMode,  0,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(effectiveMode,  0,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeCopiedEntry(effectiveMode,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
1056	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(effectiveMode,  phased);  }  else  {  CheckIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(effectiveMode,  phased);  }  else  {  CheckIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(effectiveMode,  phased);  }  else  {  CheckIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeCopiedEntry(effectiveMode,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
1057	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(effectiveMode,  phase);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeCopiedEntry(effectiveMode,  phase);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(effectiveMode,  phase);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeCopiedEntry(effectiveMode,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
1058	[BUG]  [BUGGY]  final  boolean  actuallyNeedsZip64  =  checkForNeedsZip64(phased);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  actuallyNeedsZip64  =  checkForNeedsZip64(phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  actuallyNeedsZip64  =  checkForNeedsZip64(phased);	  final    boolean    actuallyNeedsZip64    =    checkIfNeedsZip64(effectMode);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
1059	[BUG]  [BUGGY]  if(phased  ||  actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  ||  actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  ||  actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }	  if(actualNeedsZip64!=    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
1060	[BUG]  [BUGGY]  if(phased  ||  actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  CheckIfNeedsZip64(actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  ||  actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  CheckIfNeedsZip64(actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  ||  actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  CheckIfNeedsZip64(actualNeedsZip64);  }	  if(actualNeedsZip64!=    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
1061	[BUG]  [BUGGY]  while(checkIfNeedsZip64)  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  while(checkIfNeedsZip64)  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	while(checkIfNeedsZip64)  {  checkIfNeedsZip64(effectiveMode);  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
1062	[BUG]  [BUGGY]  while(checkIfNeedsZip64)  {  checkIfNeedsZip64(effectiveMode);  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  while(checkIfNeedsZip64)  {  checkIfNeedsZip64(effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	while(checkIfNeedsZip64)  {  checkIfNeedsZip64(effectiveMode);	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
1063	[BUG]  [BUGGY]  CloseCopiedEntry(entry,  phased,  actualNeedsZip64,  effectiveMode);  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  CloseCopiedEntry(entry,  phased,  actualNeedsZip64,  effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	CloseCopiedEntry(entry,  phased,  actualNeedsZip64,  effectiveMode);	  closeCopiedEntry(entry,    phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
1064	[BUG]  [BUGGY]  closeCopiedEntry(entry,  phased,  actualNeedsZip64,  effectivelyMode);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(entry,  phased,  actualNeedsZip64,  effectivelyMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(entry,  phased,  actualNeedsZip64,  effectivelyMode);	  closeCopiedEntry(entry,    phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
1065	[BUG]  [BUGGY]  closeCopiedEntry(entry,  phased,  actualNeedsZip64,  effectMode);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeCopiedEntry(entry,  phased,  actualNeedsZip64,  effectMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(entry,  phased,  actualNeedsZip64,  effectMode);	  closeCopiedEntry(entry,    phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
1066	[BUG]  [BUGGY]  if(phased  ||  actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  ||  actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  ||  actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }	  if(actualNeedsZip64!=    phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualMode);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
1067	[BUG]  [BUGGY]  if(phased  >  0)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  >  0)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  >  0)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }	  if(actualNeedsZip64!=    phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualMode);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
1068	[BUG]  [BUGGY]  phased  =  closeCopiedEntry(effectiveMode,  phased);  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  phased  =  closeCopiedEntry(effectiveMode,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	phased  =  closeCopiedEntry(effectiveMode,  phased);	  if(phased)    {    closeEntry(effectiveMode,    phased);    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
1069	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(efficientMode);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(efficientMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(efficientMode);	  if(phased)    {    closeEntry(effectiveMode,    phased);    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
1070	[BUG]  [BUGGY]  if(phased)  {  finallyNeedsZip64  =  checkIfNeedsZip64(phased);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  finallyNeedsZip64  =  checkIfNeedsZip64(phased);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  finallyNeedsZip64  =  checkIfNeedsZip64(phased);  }	  finallyNeedsZip64    =    checkIfNeedsZip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
1071	[BUG]  [BUGGY]  read()  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  read()  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	read()  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
1072	[BUG]  [BUGGY]  if(phased)  {  zip64Mode  =  checkIfNeedsZip64(efficientMode);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  zip64Mode  =  checkIfNeedsZip64(efficientMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  zip64Mode  =  checkIfNeedsZip64(efficientMode);  }	  if(phased)    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
1073	[BUG]  [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(effectiveMode);  }  else  {  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(effectiveMode);  }  else  {  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(effectiveMode);  }  else  {  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode);  }	  if(phased)    {    final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    }    else    {    Zip64Mode    mode    =    getMode();    closeCopiedEntry(mode);    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
1074	[BUG]  [BUGGY]  if(phased  &&  checkIfNeedsZip64(effectiveMode))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  checkIfNeedsZip64(effectiveMode))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  checkIfNeedsZip64(effectiveMode))  {  throw  new  IllegalStateException( " ");  }	  if(phased)    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
1075	[BUG]  [BUGGY]  if(phased  &&  checkIfNeedsZip64(effectiveMode);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  checkIfNeedsZip64(effectiveMode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  checkIfNeedsZip64(effectiveMode);	  if(phased)    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
1076	[BUG]  [BUGGY]  if(phased  &&  checkIfNeedsZip64(effectiveMode))  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  &&  checkIfNeedsZip64(effectiveMode))  {  throw  new  IOException( " ");  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  &&  checkIfNeedsZip64(effectiveMode))  {  throw  new  IOException( " ");  }	  if(phased)    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
1077	[BUG]  [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.DEFAULT_ENCODING)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getBytesRead();  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.DEFAULT_ENCODING)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getBytesRead();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.DEFAULT_ENCODING)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getBytesRead();  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    entry.bytesRead    =    entry.getBytesRead();    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
1078	[BUG]  [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.UNKNOWN)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getBytesRead();  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.UNKNOWN)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getBytesRead();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.UNKNOWN)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getBytesRead();  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    entry.bytesRead    =    entry.getBytesRead();    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
1079	[BUG]  [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  zip64Mode)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getBytesRead();  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  zip64Mode)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getBytesRead();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64  &&  effectiveMode!=  zip64Mode)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getBytesRead();  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    entry.bytesRead    =    entry.getBytesRead();    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
1080	[BUG]  [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.DEFAULT)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getBytesRead();  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.DEFAULT)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getBytesRead();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.DEFAULT)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getBytesRead();  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    entry.bytesRead    =    entry.getBytesRead();    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
1081	[BUG]  [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.BIG)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getBytesRead();  }  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.BIG)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getBytesRead();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64  &&  effectiveMode!=  Zip64Mode.BIG)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getBytesRead();  }	  if(checkIfNeedsZip64)    {    checkIfNeedsZip64(effectiveMode);    }    else    {    entry.bytesRead    =    entry.getBytesRead();    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
1082	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased  ||  phased  +  1);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased  ||  phased  +  1);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(phased  ||  phased  +  1);	  final    boolean    phased    =    checkIfNeedsZip64(phased    +    1);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
1083	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased  ||  phased);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased  ||  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(phased  ||  phased);	  final    boolean    phased    =    checkIfNeedsZip64(phased    +    1);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
1084	[BUG]  [BUGGY]  if(phased  ||  actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  ||  actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  ||  actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }	  if(actualNeedsZip64!=    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualMode);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
1085	[BUG]  [BUGGY]  if(phased  ||  actualNeedsZip64  ==  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  ||  actualNeedsZip64  ==  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  ||  actualNeedsZip64  ==  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }	  if(actualNeedsZip64!=    phased)    {    closeEntry(phased,    actualNeedsZip64);    }    else    {    checkIfNeedsZip64(actualMode);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
1086	[BUG]  [BUGGY]  if(phased!=  actualNeedsZip64)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased!=  actualNeedsZip64)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased!=  actualNeedsZip64)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }	  if(actualNeedsZip64!=    phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
1087	[BUG]  [BUGGY]  if(phased  >>  actualNeedsZip64)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  >>  actualNeedsZip64)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  >>  actualNeedsZip64)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }	  if(actualNeedsZip64!=    phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
1088	[BUG]  [BUGGY]  if(phased  >=  actualNeedsZip64)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  >=  actualNeedsZip64)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  >=  actualNeedsZip64)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }	  if(actualNeedsZip64!=    phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
1089	[BUG]  [BUGGY]  if(phased  ==  actualNeedsZip64)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased  ==  actualNeedsZip64)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased  ==  actualNeedsZip64)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }	  if(actualNeedsZip64!=    phased)    {    closeCopiedEntry(phased,    actualNeedsZip64);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
1090	[BUG]  [BUGGY]  if(effectiveMode!=  zip64Mode)  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(effectiveMode!=  zip64Mode)  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(effectiveMode!=  zip64Mode)  {  checkIfNeedsZip64(effectiveMode);  }	  checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
1091	[BUG]  [BUGGY]  checkIfNeedsZip64(phased);  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  checkIfNeedsZip64(phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	checkIfNeedsZip64(phased);	  checkIfNeedsZip64(effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
1092	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  0,  phased));  }  else  {  entry.bytesRead.close();  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  0,  phased));  }  else  {  entry.bytesRead.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  0,  phased));  }  else  {  entry.bytesRead.close();  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    entry.bytesRead.close();    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
1093	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  false));  }  else  {  entry.bytesRead.close();  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  false));  }  else  {  entry.bytesRead.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  false));  }  else  {  entry.bytesRead.close();  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    entry.bytesRead.close();    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
1094	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  entry.blocksRead);  }  else  {  entry.bytesRead.close();  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  entry.blocksRead);  }  else  {  entry.bytesRead.close();  }  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased),  entry.blocksRead);  }  else  {  entry.bytesRead.close();  }	  if(phased)    {    closeEntry(new    Zip64Mode(effectiveMode,    phased));    }    else    {    entry.bytesRead.close();    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
1095	[BUG]  [BUGGY]  closeEntry(entry.blocksRead,  effectiveMode,  phased);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closeEntry(entry.blocksRead,  effectiveMode,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.blocksRead,  effectiveMode,  phased);	  closeEntry(entry.bytesRead,    phased,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
1096	[BUG]  [BUGGY]  CloseEntry(entry.bytesRead,  effectiveMode,  phased);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  CloseEntry(entry.bytesRead,  effectiveMode,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	CloseEntry(entry.bytesRead,  effectiveMode,  phased);	  closeEntry(entry.bytesRead,    phased,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
1097	[BUG]  [BUGGY]  CloseEntry(entry.bytesRead,  phased,  effectiveMode,  zip64Mode);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  CloseEntry(entry.bytesRead,  phased,  effectiveMode,  zip64Mode);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	CloseEntry(entry.bytesRead,  phased,  effectiveMode,  zip64Mode);	  closeEntry(entry.bytesRead,    phased,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
1098	[BUG]  [BUGGY]  closureEntry(entry.bytesRead,  effectiveMode,  phased);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);      [BUGGY]  closureEntry(entry.bytesRead,  effectiveMode,  phased);  [BUGGY]      }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closureEntry(entry.bytesRead,  effectiveMode,  phased);	  closeEntry(entry.bytesRead,    phased,    effectiveMode);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
